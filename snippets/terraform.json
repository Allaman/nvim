{
  "svar": {
    "prefix": "svar",
    "body": "variable \"${1:name}\" {\n  default = \"${2}\"\n}",
    "description": "Short variable definition"
  },
  "fvar": {
    "prefix": "fvar",
    "body": "variable \"${1:name}\" {\n  description = \"\"\n  type        = \"\"\n  default     = \"${2}\"\n}",
    "description": "Full variable definition"
  },
  "varString": {
    "prefix": "varString",
    "body": "variable \"${1:name}\" {\n  description = \"\"\n  type        = \"string\"\n  default     = \"${2}\"\n}",
    "description": "String variable definition"
  },
  "varList": {
    "prefix": "varList",
    "body": "variable \"${1:name}\" {\n  description = \"\"\n  type        = \"list\"\n  default     = [\"${2}\"]\n}",
    "description": "List variable definition"
  },
  "varMap": {
    "prefix": "varMap",
    "body": "variable \"${1:name}\" {\n  description = \"\"\n  type        = \"map\"\n  default     = \\{\n    \"${2:key}\" = \"${3:val}\"\n  }\n}",
    "description": "Variable definition"
  },
  "output": {
    "prefix": "output",
    "body": "output \"${1:name}\" {\n  value = \"\\$\\{${2}}\"\n}",
    "description": "Output definition"
  },
  "module": {
    "prefix": "module",
    "body": "module \"${1:name}\" {\n  source    = \"../modules/\"\n  modparam  = \"val\"\n}",
    "description": "Module definition"
  },
  "gitSsh": {
    "prefix": "gitSsh",
    "body": "git::ssh://git@privGitServer/account/example.git//subdir?ref=0.0.1",
    "description": "Private Git SSH reference with tag ref"
  },
  "gitHub": {
    "prefix": "gitHub",
    "body": "git@github.com:account/example.git//subdir",
    "description": "Git SSH reference"
  },
  "gitHttp": {
    "prefix": "gitHttp",
    "body": "github.com/account/example.git//subdir",
    "description": "Git HTTP(s) reference"
  },
  "spAws": {
    "prefix": "spAws",
    "body": "provider \"aws\" {\n  region = \"\\$\\{var.aws_region}\"\n}",
    "description": "Provider AWS"
  },
  "fpAws": {
    "prefix": "fpAws",
    "body": "provider \"aws\" {\n  access_key                  = \"\\$\\{var.aws_access_key}\"\n  secret_key                  = \"\\$\\{var.aws_secret_key}\"\n  region                      = \"\\$\\{var.aws_region}\"\n  profile                     = \"\"\n  alias                       = \"\"\n  assume_role \\{\n    role_arn     = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n    session_name = \"SESSION_NAME\"\n    external_id  = \"EXTERNAL_ID\"\n    policy       = \"\"\n  }\n  shared_credentials_file     = \"\"\n  token                       = \"\"\n  max_retries                 = 11\n  allowed_account_ids         = \"\"\n  forbidden_account_ids       = \"\" # Conflicts with allowed_account_ids\n  dynamodb_endpoint           = \"\"\n  kinesis_endpoint            = \"\"\n  endpoints \\{\n    dynamodb = \"\"\n    iam      = \"\"\n    ec2      = \"\"\n    elb      = \"\"\n    kinesis  = \"\"\n    s3       = \"\"\n  }\n  insecure                    = false\n  skip_credentials_validation = false\n  skip_region_validation      = false\n  skip_requesting_account_id  = false\n  skip_metadata_api_check     = false\n  s3_force_path_style         = false\n}",
    "description": "Provider AWS"
  },
  "depends": {
    "prefix": "depends",
    "body": "depends_on = [\"\\${${1:dependency}}\"]",
    "description": "Explicit dependency"
  },
  "provider": {
    "prefix": "provider",
    "body": "provider = [\"\\${${1:alias}}\"]",
    "description": "Provider alias reference"
  },
  "count": {
    "prefix": "count",
    "body": "count = ${1:count}",
    "description": "Count"
  },
  "lifecycle": {
    "prefix": "lifecycle",
    "body": "lifecycle {\n  create_before_destroy = true|false\n  prevent_destroy       = true|false\n  ignore_changes        = [\"\"]\n}",
    "description": "Lifecycle control"
  },
  "sdAwsAcm": {
    "prefix": "sdAwsAcm",
    "body": "data \"aws_acm_certificate\" \"${1:name}\" {\n  domain = \"\"\n}",
    "description": "Certificate Manager ARN"
  },
  "fdAwsAcm": {
    "prefix": "fdAwsAcm",
    "body": "data \"aws_acm_certificate\" \"${1:name}\" {\n  domain   = \"\"\n  statuses = [\"\"]\n}",
    "description": "Certificate Manager ARN"
  },
  "sdAwsAlb": {
    "prefix": "sdAwsAlb",
    "body": "data \"aws_alb\" \"${1:name}\" {\n}",
    "description": "Application Load Balancer"
  },
  "fdAwsAlb": {
    "prefix": "fdAwsAlb",
    "body": "data \"aws_alb\" \"${1:name}\" {\n  arn  = \"\"\n  name = \"\"\n}",
    "description": "Application Load Balancer"
  },
  "sdAwsAlbListener": {
    "prefix": "sdAwsAlbListener",
    "body": "data \"aws_alb_listener\" \"${1:name}\" {\n  arn = \"\"\n}",
    "description": "Application Load Balancer Listener"
  },
  "fdAwsAlbListener": {
    "prefix": "fdAwsAlbListener",
    "body": "data \"aws_alb_listener\" \"${1:name}\" {\n  arn = \"\"\n}",
    "description": "Application Load Balancer Listener"
  },
  "sdAwsAmi": {
    "prefix": "sdAwsAmi",
    "body": "data \"aws_ami\" \"${1:name}\" {\n}",
    "description": "Machine Images"
  },
  "fdAwsAmi": {
    "prefix": "fdAwsAmi",
    "body": "data \"aws_ami\" \"${1:name}\" {\n  executable_users = [\"\"]\n  name_regex       = \"\"\n  most_recent      = true|false\n  owners           = [\"\"]\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "Machine Images"
  },
  "sdAwsASG": {
    "prefix": "sdAwsASG",
    "body": "data \"aws_autoscaling_groups\" \"${1:name}\" {\n}",
    "description": "AutoScaling Groups on the current region"
  },
  "fdAwsASG": {
    "prefix": "fdAwsASG",
    "body": "data \"aws_autoscaling_groups\" \"${1:name}\" {\n}",
    "description": "AutoScaling Groups on the current region"
  },
  "sdAwsAZ": {
    "prefix": "sdAwsAZ",
    "body": "data \"aws_availability_zone\" \"${1:name}\" {\n}",
    "description": "Availability Zone in the current region"
  },
  "fdAwsAZ": {
    "prefix": "fdAwsAZ",
    "body": "data \"aws_availability_zone\" \"${1:name}\" {\n  name  = \"\"\n  state = \"\"\n}",
    "description": "Availability Zone in the current region"
  },
  "sdAwsAZs": {
    "prefix": "sdAwsAZs",
    "body": "data \"aws_availability_zones\" \"${1:name}\" {\n}",
    "description": "List of AZs in the configured region"
  },
  "fdAwsAZs": {
    "prefix": "fdAwsAZs",
    "body": "data \"aws_availability_zones\" \"${1:name}\" {\n  state = \"\"\n}",
    "description": "List of AZs in the configured region"
  },
  "sdAwsBillingServiceAccount": {
    "prefix": "sdAwsBillingServiceAccount",
    "body": "data \"aws_billing_service_account\" \"${1:name}\" {\n}",
    "description": "ARN for the Billing Service Account"
  },
  "fdAwsBillingServiceAccount": {
    "prefix": "fdAwsBillingServiceAccount",
    "body": "data \"aws_billing_service_account\" \"${1:name}\" {\n}",
    "description": "ARN for the Billing Service Account"
  },
  "sdAwsCallerIdentity": {
    "prefix": "sdAwsCallerIdentity",
    "body": "data \"aws_caller_identity\" \"${1:name}\" {\n}",
    "description": "Caller identity used by terraform"
  },
  "fdAwsCallerIdentity": {
    "prefix": "fdAwsCallerIdentity",
    "body": "data \"aws_caller_identity\" \"${1:name}\" {\n}",
    "description": "Caller identity used by terraform"
  },
  "sdAwsCanonicalUserId": {
    "prefix": "sdAwsCanonicalUserId",
    "body": "data \"aws_canonical_user_id\" \"${1:name}\" {\n}",
    "description": "Canonical userID used by terraform"
  },
  "fdAwsCanonicalUserId": {
    "prefix": "fdAwsCanonicalUserId",
    "body": "data \"aws_canonical_user_id\" \"${1:name}\" {\n}",
    "description": "Canonical userID used by terraform"
  },
  "sdAwsCloudFormationStack": {
    "prefix": "sdAwsCloudFormationStack",
    "body": "data \"aws_cloud_formation_stack\" \"${1:name}\" {\n  name = \"\"\n}",
    "description": "CloudFormation stack"
  },
  "fdAwsCloudFormationStack": {
    "prefix": "fdAwsCloudFormationStack",
    "body": "data \"aws_cloud_formation_stack\" \"${1:name}\" {\n  name = \"\"\n}",
    "description": "CloudFormation stack"
  },
  "sdAwsDbInstance": {
    "prefix": "sdAwsDbInstance",
    "body": "data \"aws_db_instance\" \"${1:name}\" {\n  db_instance_identifier = \"\"\n}",
    "description": "RDS instance"
  },
  "fdAwsDbInstance": {
    "prefix": "fdAwsDbInstance",
    "body": "data \"aws_db_instance\" \"${1:name}\" {\n  db_instance_identifier = \"\"\n}",
    "description": "RDS instance"
  },
  "sdAwsEbsSnapshot": {
    "prefix": "sdAwsEbsSnapshot",
    "body": "data \"aws_ebs_snapshot\" \"${1:name}\" {\n}",
    "description": "EBS snapshot"
  },
  "fdAwsEbsSnapshot": {
    "prefix": "fdAwsEbsSnapshot",
    "body": "data \"aws_ebs_snapshot\" \"${1:name}\" {\n  most_recent            = true|false\n  owners                 = [\"\"]\n  snapshot_ids           = [\"\"]\n  restorable_by_user_ids = [\"\"]\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "EBS snapshot"
  },
  "sdAwsEbsVolume": {
    "prefix": "sdAwsEbsVolume",
    "body": "data \"aws_ebs_volume\" \"${1:name}\" {\n}",
    "description": "EBS volume"
  },
  "fdAwsEbsVolume": {
    "prefix": "fdAwsEbsVolume",
    "body": "data \"aws_ebs_volume\" \"${1:name}\" {\n  most_recent       = true|false\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "EBS volume"
  },
  "sdAwsEcsCluster": {
    "prefix": "sdAwsEcsCluster",
    "body": "data \"aws_ecs_cluster\" \"${1:name}\" {\n  cluster_name = \"\"\n}",
    "description": "ECS cluster"
  },
  "fdAwsEcsCluster": {
    "prefix": "fdAwsEcsCluster",
    "body": "data \"aws_ecs_cluster\" \"${1:name}\" {\n  cluster_name = \"\"\n}",
    "description": "ECS cluster"
  },
  "sdAwsEcsContainer": {
    "prefix": "sdAwsEcsContainer",
    "body": "data \"aws_ecs_container_definition\" \"${1:name}\" {\n  task_definition = \"\"\n  container_name  = \"\"\n}",
    "description": "ECS Specific container Definition"
  },
  "fdAwsEcsContainer": {
    "prefix": "fdAwsEcsContainer",
    "body": "data \"aws_ecs_container_definition\" \"${1:name}\" {\n  task_definition = \"\"\n  container_name  = \"\"\n}",
    "description": "ECS Specific container Definition"
  },
  "sdAwsEcsTask": {
    "prefix": "sdAwsEcsTask",
    "body": "data \"aws_ecs_task_definition\" \"${1:name}\" {\n  task_definition = \"\"\n}",
    "description": "Specific ECS Task Definition"
  },
  "fdAwsEcsTask": {
    "prefix": "fdAwsEcsTask",
    "body": "data \"aws_ecs_task_definition\" \"${1:name}\" {\n  task_definition = \"\"\n}",
    "description": "Specific ECS Task Definition"
  },
  "sdAwsEip": {
    "prefix": "sdAwsEip",
    "body": "data \"aws_eip\" \"${1:name}\" {\n}",
    "description": "Elastic IP"
  },
  "fdAwsEip": {
    "prefix": "fdAwsEip",
    "body": "data \"aws_eip\" \"${1:name}\" {\n  id        = \"\"\n  public_ip = \"\"\n}",
    "description": "Elastic IP"
  },
  "sdAwsElbHostedZoneId": {
    "prefix": "sdAwsElbHostedZoneId",
    "body": "data \"aws_elb_hosted_zone_id\" \"${1:name}\" {\n}",
    "description": "HostedZoneId of the Elastic Load Balancer"
  },
  "fdAwsElbHostedZoneId": {
    "prefix": "fdAwsElbHostedZoneId",
    "body": "data \"aws_elb_hosted_zone_id\" \"${1:name}\" {\n  region = \"\"\n}",
    "description": "HostedZoneId of the Elastic Load Balancer"
  },
  "sdAwsElbServiceAccount": {
    "prefix": "sdAwsElbServiceAccount",
    "body": "data \"aws_elb_service_account\" \"${1:name}\" {\n}",
    "description": "AccountID of the Elastic Load Balancer Service Account"
  },
  "fdAwsElbServiceAccount": {
    "prefix": "fdAwsElbServiceAccount",
    "body": "data \"aws_elb_service_account\" \"${1:name}\" {\n  region = \"\"\n}",
    "description": "AccountID of the Elastic Load Balancer Service Account"
  },
  "sdAwsIamAccountAlias": {
    "prefix": "sdAwsIamAccountAlias",
    "body": "data \"aws_iam_account_alias\" \"${1:name}\" {\n}",
    "description": "Identity Access Management alias used by terraform"
  },
  "fdAwsIamAccountAlias": {
    "prefix": "fdAwsIamAccountAlias",
    "body": "data \"aws_iam_account_alias\" \"${1:name}\" {\n}",
    "description": "Identity Access Management alias used by terraform"
  },
  "sdAwsIamPolicyDocument": {
    "prefix": "sdAwsIamPolicyDocument",
    "body": "data \"aws_iam_policy_document\" \"${1:name}\" {\n  statement \\{\n    sid     = \"\"\n    actions = [\"\"]\n    effect  = \"\"\n    principals \\{\n      type        = \"\"\n      identifiers = [\"\"]\n    }\n  }\n  statement \\{\n    actions  = [\"\"]\n    resource = [\"\"]\n    not_principals \\{\n      type        = \"\"\n      identifiers = [\"\"]\n    }\n    condition \\{\n      test     = \"\"\n      variable = \"\"\n      values   = [\"\"]\n    }\n  }\n}",
    "description": "Construct a JSON of the IAM policy document"
  },
  "fdAwsIamPolicyDocument": {
    "prefix": "fdAwsIamPolicyDocument",
    "body": "data \"aws_iam_policy_document\" \"${1:name}\" {\n  statement \\{\n    sid     = \"\"\n    actions = [\"\"]\n    effect  = \"\"\n    principals \\{\n      type        = \"\"\n      identifiers = [\"\"]\n    }\n  }\n  statement \\{\n    actions  = [\"\"]\n    resource = [\"\"]\n    not_principals \\{\n      type        = \"\"\n      identifiers = [\"\"]\n    }\n    condition \\{\n      test     = \"\"\n      variable = \"\"\n      values   = [\"\"]\n    }\n  }\n  policy_id = \"\"\n}",
    "description": "Construct a JSON of the IAM policy document"
  },
  "sdAwsIAMRole": {
    "prefix": "sdAwsIAMRole",
    "body": "data \"aws_iam_role\" \"${1:name}\" {\n  role_name = \"\"\n}",
    "description": "Identity Access Management used by terraform"
  },
  "fdAwsIAMRole": {
    "prefix": "fdAwsIAMRole",
    "body": "data \"aws_iam_role\" \"${1:name}\" {\n  role_name = \"\"\n}",
    "description": "Identity Access Management used by terraform"
  },
  "sdAwsIAMServerCertificate": {
    "prefix": "sdAwsIAMServerCertificate",
    "body": "data \"aws_iam_server_certificate\" \"${1:name}\" {\n}",
    "description": "AWS IAM Certificates"
  },
  "fdAwsIAMServerCertificate": {
    "prefix": "fdAwsIAMServerCertificate",
    "body": "data \"aws_iam_server_certificate\" \"${1:name}\" {\n  name            = \"\"\n  name_prefix     = \"\"\n  latest          = true|false\n}",
    "description": "AWS IAM Certificates"
  },
  "sdAwsInstance": {
    "prefix": "sdAwsInstance",
    "body": "data \"aws_instance\" \"${1:name}\" {\n}",
    "description": "ID of an EC2 instance"
  },
  "fdAwsInstance": {
    "prefix": "fdAwsInstance",
    "body": "data \"aws_instance\" \"${1:name}\" {\n  instance_id                 = \"\"\n  filter \\{\n    name    = \"\"\n    values  = [\"\"]\n  }\n  instance_tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "ID of an EC2 instance"
  },
  "sdAwsIPRanges": {
    "prefix": "sdAwsIPRanges",
    "body": "data \"aws_ip_ranges\" \"${1:name}\" {\n  services = [\"\"]\n}",
    "description": "IP Ranges of products or services"
  },
  "fdAwsIPRanges": {
    "prefix": "fdAwsIPRanges",
    "body": "data \"aws_ip_ranges\" \"${1:name}\" {\n  services    = [\"\"]\n  regions     = [\"\"]\n}",
    "description": "IP Ranges of products or services"
  },
  "sdAwsKmsSecret": {
    "prefix": "sdAwsKmsSecret",
    "body": "data \"aws_kms_secret\" \"${1:name}\" {\n  secret \\{\n    name    = \"\"\n    payload = \"\"\n  }\n}",
    "description": "Key Management Service secret for data encryption"
  },
  "fdAwsKmsSecret": {
    "prefix": "fdAwsKmsSecret",
    "body": "data \"aws_kms_secret\" \"${1:name}\" {\n  secret \\{\n    name          = \"\"\n    payload       = \"\"\n    context \\{\n      key = \"\\$\\{var.SOMEVAL}\"\n    }\n    grant_tokens  = [\"\"]\n  }\n}",
    "description": "Key Management Service secret for data encryption"
  },
  "sdAwsPartition": {
    "prefix": "sdAwsPartition",
    "body": "data \"aws_partition\" \"${1:name}\" {\n}",
    "description": "Current AWS partition used by terraform"
  },
  "fdAwsPartition": {
    "prefix": "fdAwsPartition",
    "body": "data \"aws_partition\" \"${1:name}\" {\n}",
    "description": "Current AWS partition used by terraform"
  },
  "sdAwsPL": {
    "prefix": "sdAwsPL",
    "body": "data \"aws_prefix_list\" \"${1:name}\" {\n}",
    "description": "Prefix List in the current region"
  },
  "fdAwsPL": {
    "prefix": "fdAwsPL",
    "body": "data \"aws_prefix_list\" \"${1:name}\" {\n  prefix_list_id = \"\"\n  name           = \"\"\n}",
    "description": "Prefix List in the current region"
  },
  "sdAwsRedshiftServiceAccount": {
    "prefix": "sdAwsRedshiftServiceAccount",
    "body": "data \"aws_redshift_service_account\" \"${1:name}\" {\n}",
    "description": "Service Account ID of the Redshift Account"
  },
  "fdAwsRedshiftServiceAccount": {
    "prefix": "fdAwsRedshiftServiceAccount",
    "body": "data \"aws_redshift_service_account\" \"${1:name}\" {\n  region = \"\"\n}",
    "description": "Service Account ID of the Redshift Account"
  },
  "sdAwsRegion": {
    "prefix": "sdAwsRegion",
    "body": "data \"aws_region\" \"${1:name}\" {\n}",
    "description": "Region"
  },
  "fdAwsRegion": {
    "prefix": "fdAwsRegion",
    "body": "data \"aws_region\" \"${1:name}\" {\n  name     = \"\"\n  current  = true|false\n  endpoint = \"\"\n}",
    "description": "Region"
  },
  "sdAwsRoute53Zone": {
    "prefix": "sdAwsRoute53Zone",
    "body": "data \"aws_route53_zone\" \"${1:name}\" {\n}",
    "description": "HostedZoneId for a Route53 Hosted Zone"
  },
  "fdAwsRoute53Zone": {
    "prefix": "fdAwsRoute53Zone",
    "body": "data \"aws_route53_zone\" \"${1:name}\" {\n  zone_id      = \"\"\n  name         = \"\" # Conflicts with zone_id\n  private_zone = true|false\n  vpc_id       = \"\"\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "HostedZoneId for a Route53 Hosted Zone"
  },
  "sdAwsRouteTable": {
    "prefix": "sdAwsRouteTable",
    "body": "data \"aws_route_table\" \"${1:name}\" {\n}",
    "description": "Route Table"
  },
  "fdAwsRouteTable": {
    "prefix": "fdAwsRouteTable",
    "body": "data \"aws_route_table\" \"${1:name}\" {\n  subnet_id      = \"\"\n  route_table_id = \"\"\n  vpc_id         = \"\"\n  tags \\{\n    TagName = \"\"\n  }\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "Route Table"
  },
  "sdAwsS3BucketObject": {
    "prefix": "sdAwsS3BucketObject",
    "body": "data \"aws_s3_bucket_object\" \"${1:name}\" {\n  bucket = \"\"\n  key    = \"\"\n}",
    "description": "Metadata for S3 Bucket Object"
  },
  "fdAwsS3BucketObject": {
    "prefix": "fdAwsS3BucketObject",
    "body": "data \"aws_s3_bucket_object\" \"${1:name}\" {\n  bucket     = \"\"\n  key        = \"\"\n  range      = \"\"\n  version_id = \"\"\n}",
    "description": "Metadata for S3 Bucketi Object"
  },
  "sdAwsSecurityGroup": {
    "prefix": "sdAwsSecurityGroup",
    "body": "data \"aws_security_group\" \"${1:name}\" {\n}",
    "description": "Security Group"
  },
  "fdAwsSecurityGroup": {
    "prefix": "fdAwsSecurityGroup",
    "body": "data \"aws_security_group\" \"${1:name}\" {\n  vpc_id = \"\"\n  name   = \"\"\n  id     = \"\"\n  tags \\{\n    TagName = \"\"\n  }\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "Security Group"
  },
  "sdAwsSnsTopic": {
    "prefix": "sdAwsSnsTopic",
    "body": "data \"aws_sns_topic\" \"${1:name}\" {\n  name = \"\"\n}",
    "description": "Simple Notification Service ARN Topic"
  },
  "fdAwsSnsTopic": {
    "prefix": "fdAwsSnsTopic",
    "body": "data \"aws_sns_topic\" \"${1:name}\" {\n  name = \"\"\n}",
    "description": "Simple Notification Service ARN Topic"
  },
  "sdAwsSubnet": {
    "prefix": "sdAwsSubnet",
    "body": "data \"aws_subnet\" \"${1:name}\" {\n}",
    "description": "VPC subnet"
  },
  "fdAwsSubnet": {
    "prefix": "fdAwsSubnet",
    "body": "data \"aws_subnet\" \"${1:name}\" {\n  availability_zone = \"\"\n  cidr_block        = \"\"\n  default_for_az    = true|false\n  id                = \"\"\n  state             = \"\"\n  vpc_id            = \"\"\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPC subnet"
  },
  "sdAwsSubnetIDs": {
    "prefix": "sdAwsSubnetIDs",
    "body": "data \"aws_subnet_ids\" \"${1:name}\" {\n  vpc_id = \"\"\n}",
    "description": "List of Subnets for a VPC"
  },
  "fdAwsSubnetIDs": {
    "prefix": "fdAwsSubnetIDs",
    "body": "data \"aws_subnet_ids\" \"${1:name}\" {\n  vpc_id = \"\"\n}",
    "description": "List of Subnets for a VPC"
  },
  "sdAwsVpc": {
    "prefix": "sdAwsVpc",
    "body": "data \"aws_vpc\" \"${1:name}\" {\n}",
    "description": "Virtual Private Cloud"
  },
  "fdAwsVpc": {
    "prefix": "fdAwsVpc",
    "body": "data \"aws_vpc\" \"${1:name}\" {\n  cidr_block      = \"\"\n  dhcp_options_id = \"\"\n  default         = true|false\n  id              = \"\"\n  state           = \"\"\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "Virtual Private Cloud"
  },
  "sdAwsVpcEndpoin": {
    "prefix": "sdAwsVpcEndpoin",
    "body": "data \"aws_vpc_endpoint\" \"${1:name}\" {\n}",
    "description": "VPC Endpoint"
  },
  "fdAwsVpcEndpoin": {
    "prefix": "fdAwsVpcEndpoin",
    "body": "data \"aws_vpc_endpoint\" \"${1:name}\" {\n  id           = \"\"\n  state        = \"\"\n  vpc_id       = \"\"\n  service_name = \"\"\n}",
    "description": "VPC Endpoint"
  },
  "sdAwsVpcEndpointService": {
    "prefix": "sdAwsVpcEndpointService",
    "body": "data \"aws_vpc_endpoint_service\" \"${1:name}\" {\n  service = \"\"\n}",
    "description": "VPC Endpoint Service"
  },
  "fdAwsVpcEndpointService": {
    "prefix": "fdAwsVpcEndpointService",
    "body": "data \"aws_vpc_endpoint_service\" \"${1:name}\" {\n  service = \"\"\n}",
    "description": "VPC Endpoint Service"
  },
  "sdAwsVpcPeeringConnection": {
    "prefix": "sdAwsVpcPeeringConnection",
    "body": "data \"aws_vpc_peering_connection\" \"${1:name}\" {\n}",
    "description": "VPC Peering Connection"
  },
  "fdAwsVpcPeeringConnection": {
    "prefix": "fdAwsVpcPeeringConnection",
    "body": "data \"aws_vpc_peering_connection\" \"${1:name}\" {\n  id              = \"\"\n  status          = \"\"\n  vpc_id          = \"\"\n  owner_id        = \"\"\n  cidr_block      = \"\"\n  peer_vpc_id     = \"\"\n  peer_owner_id   = \"\"\n  peer_cidr_block = \"\"\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPC Peering Connection"
  },
  "sdAwsVpnGateway": {
    "prefix": "sdAwsVpnGateway",
    "body": "data \"aws_vpn_gateway\" \"${1:name}\" {\n}",
    "description": "VPN Gateway"
  },
  "fdAwsVpnGateway": {
    "prefix": "fdAwsVpnGateway",
    "body": "data \"aws_vpn_gateway\" \"${1:name}\" {\n  id                = \"\"\n  state             = \"\"\n  attached_vpc_id   = \"\"\n  availability_zone = \"\"\n  filter \\{\n    name   = \"\"\n    values = [\"\"]\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPN Gateway"
  },
  "srAWSInspectorAssessmentTarget": {
    "prefix": "srAWSInspectorAssessmentTarget",
    "body": "resource \"aws_inspector_assessment_target\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  resource_group_arn = \"\\$\\{aws_inspector_resource_group.${2:foo}.arn}\"\n}",
    "description": "Inspector Assessment Target"
  },
  "frAWSInspectorAssessmentTarget": {
    "prefix": "frAWSInspectorAssessmentTarget",
    "body": "resource \"aws_inspector_assessment_target\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  resource_group_arn = \"\\$\\{aws_inspector_resource_group.${2:foo}.arn}\"\n}",
    "description": "Inspector Assessment Target"
  },
  "srAWSInspectorAssessmentTemplate": {
    "prefix": "srAWSInspectorAssessmentTemplate",
    "body": "resource \"aws_inspector_assessment_template\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  target_arn         = \"\\$\\{aws_inspector_assessment_target.${2:foo}.arn}\"\n  duration           = 3600\n  rules_package_arns = [\"arn:aws:inspector:us-east-1:XXX:XXX/0-XXX\"]\n}",
    "description": "Inspector Assessment Template"
  },
  "frAWSInspectorAssessmentTemplate": {
    "prefix": "frAWSInspectorAssessmentTemplate",
    "body": "resource \"aws_inspector_assessment_template\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  target_arn         = \"\\$\\{aws_inspector_assessment_target.${2:foo}.arn}\"\n  duration           = 3600\n  rules_package_arns = [\"arn:aws:inspector:us-east-1:XXX:XXX/0-XXX\"]\n}",
    "description": "Inspector Assessment Template"
  },
  "srAWSInspectorResourceGroup": {
    "prefix": "srAWSInspectorResourceGroup",
    "body": "resource \"aws_inspector_resource_group\" \"${1:name}\" {\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Inspector Assessment Resource Group"
  },
  "frAWSInspectorResourceGroup": {
    "prefix": "frAWSInspectorResourceGroup",
    "body": "resource \"aws_inspector_resource_group\" \"${1:name}\" {\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Inspector Assessment Resource Group"
  },
  "srAwsAlb": {
    "prefix": "srAwsAlb",
    "body": "resource \"aws_alb\" \"${1:name}\" {\n  subnets = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n}",
    "description": "Application Load Balancer"
  },
  "frAwsAlb": {
    "prefix": "frAwsAlb",
    "body": "resource \"aws_alb\" \"${1:name}\" {\n  subnets                    = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n  name                       = \"${1:name}\"\n  name_prefix                = \"\" # Conflicts with name_prefix\n  internal                   = true|false\n  security_groups            = [\"\\$\\{aws_security_group.${3:bar}.id}\"]\n  access_logs \\{\n    bucket  = \"\\$\\{aws_s3_bucket.alb_logs.bucket}\"\n    prefix  = \"\"\n    enabled = true|false\n  }\n  enable_deletion_protection = true|false\n  idle_timeout               = 1\n  ip_address_type            = \"\"\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "Application Load Balancer"
  },
  "srAwsAlbListener": {
    "prefix": "srAwsAlbListener",
    "body": "resource \"aws_alb_listener\" \"${1:name}\" {\n  load_balancer_arn = \"\\$\\{aws_alb.${2:foo}.arn}\"\n  port              = 443\n  default_action \\{\n    target_group_arn = \"\"\n    type             = \"\"\n  }\n}",
    "description": "Application Load Balancer Listener"
  },
  "frAwsAlbListener": {
    "prefix": "frAwsAlbListener",
    "body": "resource \"aws_alb_listener\" \"${1:name}\" {\n  load_balancer_arn = \"\\$\\{aws_alb.${2:foo}.arn}\"\n  port              = 443\n  default_action \\{\n    target_group_arn = \"\\$\\{aws_alb_target_group.${3:bar}.arn}\"\n    type             = \"\"\n  }\n  protocol          = \"\"\n  ssl_policy        = \"\"\n  certificate_arn   = \"arn:aws:iam::XXX:server-certificate/XXX\"\n}",
    "description": "Application Load Balancer Listener"
  },
  "srAwsAlbListenerRule": {
    "prefix": "srAwsAlbListenerRule",
    "body": "resource \"aws_alb_listener_rule\" \"${1:name}\" {\n  listener_arn = \"\\$\\{aws_alb_listener.${2:foo}.arn}\"\n  priority     = 1\n  action \\{\n    target_group_arn = \"\\$\\{aws_alb_target_group.${3:bar}.arn}\"\n    type             = \"\"\n  }\n  condition \\{\n    field  = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "Application Load Balancer Listener rule"
  },
  "frAwsAlbListenerRule": {
    "prefix": "frAwsAlbListenerRule",
    "body": "resource \"aws_alb_listener_rule\" \"${1:name}\" {\n  listener_arn = \"\\$\\{aws_alb_listener.${2:foo}.arn}\"\n  priority     = 1\n  action \\{\n    target_group_arn = \"\\$\\{aws_alb_target_group.${3:bar}.arn}\"\n    type             = \"\"\n  }\n  condition \\{\n    field  = \"\"\n    values = [\"\"]\n  }\n}",
    "description": "Application Load Balancer Listener rule"
  },
  "srAwsAlbTargetGroup": {
    "prefix": "srAwsAlbTargetGroup",
    "body": "resource \"aws_alb_target_group\" \"${1:name}\" {\n  port     = 80\n  protocol = \"\"\n  vpc_id   = \"\\$\\{aws_vpc.${2:foo}.id}\"\n}",
    "description": "Application Load Balancer Target Group"
  },
  "frAwsAlbTargetGroup": {
    "prefix": "frAwsAlbTargetGroup",
    "body": "resource \"aws_alb_target_group\" \"${1:name}\" {\n  port                 = 80\n  protocol             = \"\"\n  vpc_id               = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  name                 = \"${1:name}\"\n  name_prefix          = \"\" # Conflicts with name\n  deregistration_delay = 300\n  stickiness \\{\n    enabled         = true|false\n    type            = \"lb_cookie\"\n    cookie_duration = 1\n  }\n  health_check \\{\n    interval            = 30\n    path                = \"/\"\n    port                = \"\"\n    protocol            = \"HTTP\"\n    timeout             = 5\n    healthy_threshold   = 5\n    matcher             = \"200\"\n    unhealthy_threshold = 2\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "Application Load Balancer Target Group"
  },
  "srAwsAlbTargetGroupAttachment": {
    "prefix": "srAwsAlbTargetGroupAttachment",
    "body": "resource \"aws_alb_target_group_attachment\" \"${1:name}\" {\n  target_group_arn = \"\\$\\{aws_alb_target_group.${2:foo}.arn}\"\n  target_id        = \"\\$\\{aws_instance.${3:bar}.id}\"\n}",
    "description": "Register Instances and Containers with an ALB"
  },
  "frAwsAlbTargetGroupAttachment": {
    "prefix": "frAwsAlbTargetGroupAttachment",
    "body": "resource \"aws_alb_target_group_attachment\" \"${1:name}\" {\n  target_group_arn = \"\\$\\{aws_alb_target_group.${2:foo}.arn}\"\n  target_id        = \"\\$\\{aws_instance.${3:bar}.id}\"\n  port             = 80\n}",
    "description": "Register Instances and Containers with an ALB"
  },
  "srAwsAmi": {
    "prefix": "srAwsAmi",
    "body": "resource \"aws_ami\" \"${1:name}\" {\n  name = \"${1:name}\"\n}",
    "description": "Creates Amazon Machine Image"
  },
  "frAwsAmi": {
    "prefix": "frAwsAmi",
    "body": "resource \"aws_ami\" \"${1:name}\" {\n  name                = \"${1:name}\"\n  description         = \"\"\n  virtualization_type = \"\"\n  architecture        = \"x86_64\"\n  ebs_block_device \\{\n    device_name           = \"/dev/xvda\"\n    delete_on_termination = true|false\n    encrypted             = true|false\n    iops                  = \"\"\n    snapshot_id           = \"snap-XXX\" # Conflicts with encrypted\n    volume_size           = 8\n    volume_type           = \"\"\n    kms_key_id            = \"\"\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n  }\n}",
    "description": "Creates Amazon Machine Image"
  },
  "frAwsAmiHvm": {
    "prefix": "frAwsAmiHvm",
    "body": "resource \"aws_ami\" \"${1:name}\" {\n  name                = \"${1:name}\"\n  description         = \"\"\n  virtualization_type = \"hvm\"\n  architecture        = \"x86_64\"\n  sriov_net_support   = \"simple\"\n  ebs_block_device \\{\n    device_name           = \"/dev/xvda\"\n    delete_on_termination = true|false\n    encrypted             = true|false\n    iops                  = \"\"\n    snapshot_id           = \"snap-XXX\" # Conflicts with encrypted\n    volume_size           = 8\n    volume_type           = \"\"\n    kms_key_id            = \"\"\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n  }\n}",
    "description": "Creates Amazon Machine Image"
  },
  "frAwsAmiPv": {
    "prefix": "frAwsAmiPv",
    "body": "resource \"aws_ami\" \"${1:name}\" {\n  name                = \"${1:name}\"\n  description         = \"\"\n  virtualization_type = \"paravirtual\"\n  architecture        = \"x86_64\"\n  image_location      = \"\"\n  kernel_id           = \"\"\n  ramdisk_id          = \"\"\n  ebs_block_device \\{\n    device_name           = \"/dev/xvda\"\n    delete_on_termination = true|false\n    encrypted             = true|false\n    iops                  = \"\"\n    snapshot_id           = \"snap-XXX\"\n    volume_size           = 8\n    volume_type           = \"\"\n    kms_key_id            = \"\"\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n  }\n}",
    "description": "Creates Amazon Machine Image"
  },
  "srAwsAmiCopy": {
    "prefix": "srAwsAmiCopy",
    "body": "resource \"aws_ami_copy\" \"${1:name}\" {\n  name              = \"${1:name}\"\n  source_ami_id     = \"ami-${2:id}\"\n  source_ami_region = \"us-west-1\"\n}",
    "description": "Copies Amazon Machine Image including cross-region"
  },
  "frAwsAmiCopy": {
    "prefix": "frAwsAmiCopy",
    "body": "resource \"aws_ami_copy\" \"${1:name}\" {\n  name              = \"${1:name}\"\n  source_ami_id     = \"ami-${2:id}\"\n  source_ami_region = \"us-west-1\"\n  encrypted         = true|false\n  kms_key_id        = \"arn:aws:kms:region:account-id:key/key-id\"\n}",
    "description": "Copies Amazon Machine Image including cross-region"
  },
  "srAwsAmiFromInstance": {
    "prefix": "srAwsAmiFromInstance",
    "body": "resource \"aws_ami_from_instance\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  source_instance_id = \"i-XXX\"\n}",
    "description": "Creates AMI from existing EBS-backed EC2 instance"
  },
  "frAwsAmiFromInstance": {
    "prefix": "frAwsAmiFromInstance",
    "body": "resource \"aws_ami_from_instance\" \"${1:name}\" {\n  name                    = \"${1:name}\"\n  source_instance_id      = \"i-XXX\"\n  snapshot_without_reboot = true|false\n}",
    "description": "Creates AMI from existing EBS-backed EC2 instance"
  },
  "srAwsAmiLaunchPermission": {
    "prefix": "srAwsAmiLaunchPermission",
    "body": "resource \"aws_ami_launch_permission\" \"${1:name}\" {\n  image_id   = \"ami-XXX\"\n  account_id = \"\"\n}",
    "description": "Adds launch permission to AMI"
  },
  "frAwsAmiLaunchPermission": {
    "prefix": "frAwsAmiLaunchPermission",
    "body": "resource \"aws_ami_launch_permission\" \"${1:name}\" {\n  image_id   = \"ami-XXX\"\n  account_id = \"\"\n}",
    "description": "Adds launch permission to AMI"
  },
  "srAwsApiGatewayAccount": {
    "prefix": "srAwsApiGatewayAccount",
    "body": "resource \"aws_api_gateway_account\" \"${1:name}\" {\n}",
    "description": "API Gateway Account"
  },
  "frAwsApiGatewayAccount": {
    "prefix": "frAwsApiGatewayAccount",
    "body": "resource \"aws_api_gateway_account\" \"${1:name}\" {\n  cloudwatch_role_arn = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n}",
    "description": "API Gateway Account"
  },
  "srAwsApiGatewayApiKey": {
    "prefix": "srAwsApiGatewayApiKey",
    "body": "resource \"aws_api_gateway_api_key\" \"${1:name}\" {\n  name = \"${1:name}\"\n}",
    "description": "API Gateway API Key"
  },
  "frAwsApiGatewayApiKey": {
    "prefix": "frAwsApiGatewayApiKey",
    "body": "resource \"aws_api_gateway_api_key\" \"${1:name}\" {\n  name              = \"${1:name}\"\n  description       = \"\"\n  enabled           = true|false\n  stage_key \\{\n    rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n    stage_name  = \"\\$\\{aws_api_gateway_deployment.${3:bar}.stage_name}\"\n  }\n  value             = \"\"\n}",
    "description": "API Gateway API Key"
  },
  "srAwsApiGatewayAuthorizer": {
    "prefix": "srAwsApiGatewayAuthorizer",
    "body": "resource \"aws_api_gateway_authorizer\" \"${1:name}\" {\n  authorizer_uri = \"\"\n  name           = \"${1:name}\"\n  rest_api_id    = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n}",
    "description": "API Gateway Authorizer"
  },
  "frAwsApiGatewayAuthorizer": {
    "prefix": "frAwsApiGatewayAuthorizer",
    "body": "resource \"aws_api_gateway_authorizer\" \"${1:name}\" {\n  authorizer_uri                   = \"\"\n  name                             = \"${1:name}\"\n  rest_api_id                      = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  identity_source                  = \"\"\n  type                             = \"\"\n  authorizer_credentials           = \"\"\n  authorizer_result_ttl_in_seconds = 300\n  identity_validation_expression   = \"\"\n}",
    "description": "API Gateway Authorizer"
  },
  "srAwsApiGatewayBasePathMapping": {
    "prefix": "srAwsApiGatewayBasePathMapping",
    "body": "resource \"aws_api_gateway_base_path_mapping\" \"${1:name}\" {\n  api_id      = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  domain_name = \"\"\n}",
    "description": "DNS to deployed API Mapping"
  },
  "frAwsApiGatewayBasePathMapping": {
    "prefix": "frAwsApiGatewayBasePathMapping",
    "body": "resource \"aws_api_gateway_base_path_mapping\" \"${1:name}\" {\n  api_id      = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  domain_name = \"\"\n  base_path   = \"\\$\\{aws_api_gateway_deployment.${3:bar}.stage_name}\"\n  stage_name  = \"\"\n}",
    "description": "DNS to deployed API Mapping"
  },
  "srAwsApiGatewayClientCertificate": {
    "prefix": "srAwsApiGatewayClientCertificate",
    "body": "resource \"aws_api_gateway_client_certificate\" \"${1:name}\" {\n}",
    "description": "API Gateway Client Certificate"
  },
  "frAwsApiGatewayClientCertificate": {
    "prefix": "frAwsApiGatewayClientCertificate",
    "body": "resource \"aws_api_gateway_client_certificate\" \"${1:name}\" {\n  description = \"\"\n}",
    "description": "API Gateway Client Certificate"
  },
  "srAwsApiGatewayDeployment": {
    "prefix": "srAwsApiGatewayDeployment",
    "body": "resource \"aws_api_gateway_deployment\" \"${1:name}\" {\n  depends_on  = [\"aws_api_gateway_method.${2:foo}\"] # Suggested on docs\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.id}\"\n  stage_name  = \"\"\n}",
    "description": "API Gateway Deployment"
  },
  "frAwsApiGatewayDeployment": {
    "prefix": "frAwsApiGatewayDeployment",
    "body": "resource \"aws_api_gateway_deployment\" \"${1:name}\" {\n  depends_on        = [\"aws_api_gateway_method.${2:foo}\"] # Suggested on docs\n  rest_api_id       = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.id}\"\n  stage_name        = \"\"\n  description       = \"\"\n  stage_description = \"\"\n  variables \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "API Gateway Deployment"
  },
  "srAwsApiGatewayDomainName": {
    "prefix": "srAwsApiGatewayDomainName",
    "body": "resource \"aws_api_gateway_domain_name\" \"${1:name}\" {\n  domain_name = \"\"\n}",
    "description": "Custom DNS for API Gateway"
  },
  "frAwsApiGatewayDomainName": {
    "prefix": "frAwsApiGatewayDomainName",
    "body": "resource \"aws_api_gateway_domain_name\" \"${1:name}\" {\n  domain_name             = \"${2:fqdn}\"\n  certificate_arn         = \"arn:aws:iam::XXX:server-certificate/XXX\"\n  certificate_name        = \"${3:foo}\" # Conflicts with certificate_arn\n  certificate_body        = \"\\$\\{file(\"example.com/example.crt\")}\" # Conflicts with certificate_arn\n  certificate_chain       = \"\\$\\{file(\"example.com/example.ca\")}\" # Conflicts with certificate_arn\n  certificate_private_key = \"\\$\\{file(\"example.com/example.key\")}\" # Conflicts with certificate_arn\n}",
    "description": "Custom DNS for API Gateway"
  },
  "srAwsApiGatewayIntegration": {
    "prefix": "srAwsApiGatewayIntegration",
    "body": "resource \"aws_api_gateway_integration\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  type        = \"\"\n}",
    "description": "HTTP method Integration for API Gateway"
  },
  "frAwsApiGatewayIntegration": {
    "prefix": "frAwsApiGatewayIntegration",
    "body": "resource \"aws_api_gateway_integration\" \"${1:name}\" {\n  rest_api_id             = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id             = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method             = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  type                    = \"\"\n  uri                     = \"\"\n  credentials             = \"\"\n  integration_http_method = \"\"\n  request_templates \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  content_handling        = \"\"\n  passthrough_behavior    = \"\"\n  request_parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "HTTP method Integration for API Gateway"
  },
  "srAwsApiGatewayIntegrationResponse": {
    "prefix": "srAwsApiGatewayIntegrationResponse",
    "body": "resource \"aws_api_gateway_integration_response\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  status_code = \"\\$\\{aws_api_gateway_method_response.${5:qux}.status_code}\"\n}",
    "description": "HTTP method Integration Response for API Gateway"
  },
  "frAwsApiGatewayIntegrationResponse": {
    "prefix": "frAwsApiGatewayIntegrationResponse",
    "body": "resource \"aws_api_gateway_integration_response\" \"${1:name}\" {\n  rest_api_id       = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id       = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method       = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  status_code       = \"\\$\\{aws_api_gateway_method_response.${5:qux}.status_code}\"\n  selection_pattern = \"\"\n  response_templates \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  content_handling  = \"\"\n  response_parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "HTTP method Integration Response for API Gateway"
  },
  "srAwsApiGatewayMethod": {
    "prefix": "srAwsApiGatewayMethod",
    "body": "resource \"aws_api_gateway_method\" \"${1:name}\" {\n  rest_api_id   = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id   = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method   = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  authorization = \"\"\n}",
    "description": "HTTP method for API Gateway"
  },
  "frAwsApiGatewayMethod": {
    "prefix": "frAwsApiGatewayMethod",
    "body": "resource \"aws_api_gateway_method\" \"${1:name}\" {\n  rest_api_id      = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id      = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method      = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  authorization    = \"\"\n  authorizer_id    = \"\"\n  api_key_required = true|false\n  request_models \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  request_parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "HTTP method for API Gateway"
  },
  "srAwsApiGatewayMethodResponse": {
    "prefix": "srAwsApiGatewayMethodResponse",
    "body": "resource \"aws_api_gateway_method_response\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  status_code = \"\"\n}",
    "description": "HTTP method response for API Gateway"
  },
  "frAwsApiGatewayMethodResponse": {
    "prefix": "frAwsApiGatewayMethodResponse",
    "body": "resource \"aws_api_gateway_method_response\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  resource_id = \"\\$\\{aws_api_gateway_resource.${3:bar}.id}\"\n  http_method = \"\\$\\{aws_api_gateway_method.${4:baz}.http_method}\"\n  status_code = \"\"\n  response_models \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  response_parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "HTTP method response for API Gateway"
  },
  "srAwsApiGatewayMethodSettings": {
    "prefix": "srAwsApiGatewayMethodSettings",
    "body": "resource \"aws_api_gateway_method_settings\" \"${1:name}\" {\n  rest_api_id  = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  stage_name   = \"\\$\\{aws_api_gateway_stage.${3:bar}.stage_name}\"\n  method_path  = \"\\$\\{aws_api_gateway_resource.${4:baz}.path_part}/\\$\\{aws_api_gateway_method.${5:qux}.http_method}\"\n  settings \\{\n    metrics_enabled                         = true|false\n    logging_level                           = \"\"\n    data_trace_enabled                      = true|false\n    throttling_burst_limit                  = 1\n    throttling_rate_limit                   = 1\n    caching_enabled                         = true|false\n    cache_ttl_in_seconds                    = 60\n    cache_data_encrypted                    = true|false\n    require_authorization_for_cache_control = true|false\n  }\n}",
    "description": "Method setting for API Gateway"
  },
  "frAwsApiGatewayMethodSettings": {
    "prefix": "frAwsApiGatewayMethodSettings",
    "body": "resource \"aws_api_gateway_method_settings\" \"${1:name}\" {\n  rest_api_id  = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  stage_name   = \"\\$\\{aws_api_gateway_stage.${3:bar}.stage_name}\"\n  method_path  = \"\\$\\{aws_api_gateway_resource.${4:baz}.path_part}/\\$\\{aws_api_gateway_method.${5:qux}.http_method}\"\n  settings \\{\n    metrics_enabled                         = true|false\n    logging_level                           = \"\"\n    data_trace_enabled                      = true|false\n    throttling_burst_limit                  = 1\n    throttling_rate_limit                   = 1\n    caching_enabled                         = true|false\n    cache_ttl_in_seconds                    = 60\n    cache_data_encrypted                    = true|false\n    require_authorization_for_cache_control = true|false\n  }\n}",
    "description": "Method setting for API Gateway"
  },
  "srAwsApiGatewayModel": {
    "prefix": "srAwsApiGatewayModel",
    "body": "resource \"aws_api_gateway_model\" \"${1:name}\" {\n  rest_api_id  = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  name         = \"${1:name}\"\n  content_type = \"\"\n}",
    "description": "Model for API Gateway"
  },
  "frAwsApiGatewayModel": {
    "prefix": "frAwsApiGatewayModel",
    "body": "resource \"aws_api_gateway_model\" \"${1:name}\" {\n  rest_api_id  = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  name         = \"${1:name}\"\n  content_type = \"\"\n  description  = \"\"\n  schema       = \"\"\n}",
    "description": "Model for API Gateway"
  },
  "srAwsApiGatewayResource": {
    "prefix": "srAwsApiGatewayResource",
    "body": "resource \"aws_api_gateway_resource\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  parent_id   = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.root_resource_id}\"\n  path_part   = \"\"\n}",
    "description": "API Gateway Resource"
  },
  "frAwsApiGatewayResource": {
    "prefix": "frAwsApiGatewayResource",
    "body": "resource \"aws_api_gateway_resource\" \"${1:name}\" {\n  rest_api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n  parent_id   = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.root_resource_id}\"\n  path_part   = \"\"\n}",
    "description": "API Gateway Resource"
  },
  "srAwsApiGatewayRestApi": {
    "prefix": "srAwsApiGatewayRestApi",
    "body": "resource \"aws_api_gateway_rest_api\" \"${1:name}\" {\n  name = \"${1:name}\"\n}",
    "description": "API Gateway Rest API"
  },
  "frAwsApiGatewayRestApi": {
    "prefix": "frAwsApiGatewayRestApi",
    "body": "resource \"aws_api_gateway_rest_api\" \"${1:name}\" {\n  name               = \"${1:name}\"\n  description        = \"\"\n  binary_media_types = [\"\"]\n}",
    "description": "API Gateway Rest API"
  },
  "srAwsApiGatewayStage": {
    "prefix": "srAwsApiGatewayStage",
    "body": "resource \"aws_api_gateway_stage\" \"${1:name}\" {\n  stage_name    = \"${1:name}\"\n  deployment_id = \"\\$\\{aws_api_gateway_deployment.${2:foo}.id}\"\n  rest_api_id   = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.id}\"\n}",
    "description": "API Gateway Stage"
  },
  "frAwsApiGatewayStage": {
    "prefix": "frAwsApiGatewayStage",
    "body": "resource \"aws_api_gateway_stage\" \"${1:name}\" {\n  stage_name            = \"${1:name}\"\n  deployment_id         = \"\\$\\{aws_api_gateway_deployment.${2:foo}.id}\"\n  rest_api_id           = \"\\$\\{aws_api_gateway_rest_api.${3:bar}.id}\"\n  cache_cluster_enabled = true|false\n  cache_cluster_size    = \"\"\n  client_certificate_id = \"\"\n  description           = \"\"\n  documentation_version = \"\"\n  variables \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "API Gateway Stage"
  },
  "srAwsApiGatewayUsagePlan": {
    "prefix": "srAwsApiGatewayUsagePlan",
    "body": "resource \"aws_api_gateway_usage_plan\" \"${1:name}\" {\n  name = \"${1:name}\"\n}",
    "description": "API Gateway Usage Plan"
  },
  "frAwsApiGatewayUsagePlan": {
    "prefix": "frAwsApiGatewayUsagePlan",
    "body": "resource \"aws_api_gateway_usage_plan\" \"${1:name}\" {\n  name         = \"${1:name}\"\n  api_stages \\{\n    api_id = \"\\$\\{aws_api_gateway_rest_api.${2:foo}.id}\"\n    stage  = \"\\$\\{aws_api_gateway_deployment.${3:bar}.stage_name}\"\n  }\n  quota_settings \\{\n    limit  = 1\n    period = \"\"\n  }\n  throttle_settings \\{\n    burst_limit = 1\n    rate_limit  = 1\n  }\n  product_code = \"\"\n}",
    "description": "API Gateway Usage Plan"
  },
  "srAwsApiGatewayUsagePlanKey": {
    "prefix": "srAwsApiGatewayUsagePlanKey",
    "body": "resource \"aws_api_gateway_usage_plan_key\" \"${1:name}\" {\n  key_id        = \"\\$\\{aws_api_gateway_api_key.${2:foo}.id}\"\n  key_type      = \"\"\n  usage_plan_id = \"\\$\\{aws_api_gateway_usage_plan.${3:bar}.id}\"\n}",
    "description": "API Gateway Usage Plan Key"
  },
  "frAwsApiGatewayUsagePlanKey": {
    "prefix": "frAwsApiGatewayUsagePlanKey",
    "body": "resource \"aws_api_gateway_usage_plan_key\" \"${1:name}\" {\n  key_id        = \"\\$\\{aws_api_gateway_api_key.${2:foo}.id}\"\n  key_type      = \"\"\n  usage_plan_id = \"\\$\\{aws_api_gateway_usage_plan.${3:bar}.id}\"\n}",
    "description": "API Gateway Usage Plan Key"
  },
  "srAwsAppCookieStickinessPolicy": {
    "prefix": "srAwsAppCookieStickinessPolicy",
    "body": "resource \"aws_app_cookie_stickiness_policy\" \"${1:name}\" {\n  name          = \"$1\"\n  load_balancer = \"\\$\\{aws_elb.${2:foo}.name}\"\n  lb_port       = 80\n  cookie_name   = \"${3:bar}\"\n}",
    "description": "App Cookie Stickiness Policy for ELB"
  },
  "frAwsAppCookieStickinessPolicy": {
    "prefix": "frAwsAppCookieStickinessPolicy",
    "body": "resource \"aws_app_cookie_stickiness_policy\" \"${1:name}\" {\n  name          = \"$1\"\n  load_balancer = \"\\$\\{aws_elb.${2:foo}.name}\"\n  lb_port       = 80\n  cookie_name   = \"\"\n}",
    "description": "App Cookie Stickiness Policy for ELB"
  },
  "srAwsAppautoscalingPolicy": {
    "prefix": "srAwsAppautoscalingPolicy",
    "body": "resource \"aws_appautoscaling_policy\" \"${1:name}\" {\n  name                    = \"${1}\"\n  resource_id             = \"${2:bar}\"\n  scalable_dimension      = \"${3:baz}\"\n  service_namespace       = \"${4:qux}\"\n  adjustment_type         = \"${5:quux}\"\n  cooldown                = 60\n  metric_aggregation_type = \"${6:quz}\"\n}",
    "description": "App Autoscaling Policy"
  },
  "frAwsAppautoscalingPolicy": {
    "prefix": "frAwsAppautoscalingPolicy",
    "body": "resource \"aws_appautoscaling_policy\" \"${1:name}\" {\n  name                     = \"${1}\"\n  resource_id              = \"${2:bar}\"\n  scalable_dimension       = \"${3:baz}\"\n  service_namespace        = \"${4:qux}\"\n  adjustment_type          = \"${5:quux}\"\n  cooldown                 = 60\n  metric_aggregation_type  = \"${6:quz}\"\n  policy_type              = \"\"\n  min_adjustment_magnitude = 1\n  alarms                   = [\"\"]\n  step_adjustment \\{\n    metric_interval_lower_bound = 1.0\n    metric_interval_upper_bound = 2.0\n    scaling_adjustment          = -1\n  }\n}",
    "description": "App Autoscaling Policy"
  },
  "srAwsAppautoscalingTarget": {
    "prefix": "srAwsAppautoscalingTarget",
    "body": "resource \"aws_appautoscaling_target\" \"${1:name}\" {\n  max_capacity       = 1\n  min_capacity       = 1\n  resource_id        = \"\"\n  role_arn           = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  scalable_dimension = \"\"\n  service_namespace  = \"\"\n}",
    "description": "App Autoscaling Scalable Target"
  },
  "frAwsAppautoscalingTarget": {
    "prefix": "frAwsAppautoscalingTarget",
    "body": "resource \"aws_appautoscaling_target\" \"${1:name}\" {\n  max_capacity       = 1\n  min_capacity       = 1\n  resource_id        = \"\"\n  role_arn           = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  scalable_dimension = \"\"\n  service_namespace  = \"\"\n}",
    "description": "App Autoscaling Scalable Target"
  },
  "srAwsAutoscalingAttachment": {
    "prefix": "srAwsAutoscalingAttachment",
    "body": "// Note: use either separate attachment or inline attachment, not both at the same time.\nresource \"aws_autoscaling_attachment\" \"${1:name}\" {\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.id}\"\n}",
    "description": "Autoscaling Attachment"
  },
  "frAwsAutoscalingAttachment": {
    "prefix": "frAwsAutoscalingAttachment",
    "body": "// Note: use either separate attachment or inline attachment, not both at the same time.\nresource \"aws_autoscaling_attachment\" \"${1:name}\" {\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.id}\"\n  elb                    = \"\\$\\{aws_elb.${3:bar}.id}\"\n  alb_target_group_arn   = \"\\$\\{aws_alb_target_group.${4:baz}.arn}\"\n}",
    "description": "Autoscaling Attachment"
  },
  "srAwsAutoscalingGroup": {
    "prefix": "srAwsAutoscalingGroup",
    "body": "// Note: use either separate attachment or inline attachment, not both at the same time.\nresource \"aws_autoscaling_group\" \"${1:name}\" {\n  launch_configuration = \"\\$\\{aws_launch_configuration.${2:foo}.name}\"\n  min_size             = 1\n  max_size             = 1\n}",
    "description": "Autoscaling Group"
  },
  "frAwsAutoscalingGroup": {
    "prefix": "frAwsAutoscalingGroup",
    "body": "// Note: use either separate attachment or inline attachment, not both at the same time.\nresource \"aws_autoscaling_group\" \"${1:name}\" {\n  launch_configuration      = \"\\$\\{aws_launch_configuration.${2:foo}.name}\"\n  min_size                  = 1\n  max_size                  = 1\n  name                      = \"${1}\" # Conflicts with name_prefix\n  name_prefix               = \"\"\n  desired_capacity          = 1\n  min_elb_capacity          = 1\n  default_cooldown          = 1\n  force_delete              = true|false\n  health_check_grace_period = 300\n  health_check_type         = \"\"\n  availability_zones        = [\"\"]\n  placement_group           = \"\\$\\{aws_placement_group.${3:bar}.id}\"\n  #load_balancers            = [\"\"] #Provided as separate resource below\n  vpc_zone_identifier       = [\"\"]\n  termination_policies      = [\"\"]\n  wait_for_capacity_timeout = \"10m\"\n  wait_for_elb_capacity     = 1\n  enabled_metrics           = [\"\"]\n  suspended_processes       = [\"\"]\n  metrics_granularity       = \"1Minute\"\n  protect_from_scale_in     = true|false\n  target_group_arns         = [\"\"]\n  initial_lifecycle_hook \\{\n    name                    = \"\"\n    default_result          = \"\"\n    heartbeat_timeout       = 1\n    lifecycle_transition    = \"\"\n    notification_metadata   = \"\"\n    notification_target_arn = \"\"\n    role_arn                = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  }\n  tag \\{\n    key                 = \"\"\n    value               = \"\"\n    propagate_at_launch = true|false\n  }\n}\n# Attachment to avoid using 'load_balancers' inline (see docs)\nresource \"aws_autoscaling_attachment\" \"${1}_attachment\" \\{\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${1}.id}\"\n  elb                    = \"\\$\\{aws_elb.${4:qux}.id}\"\n  alb_target_group_arn   = \"\\$\\{aws_alb_target_group.${5:quz}.arn}\"\n}",
    "description": "Autoscaling Group"
  },
  "srAwsAutoscalingLifecycleHook": {
    "prefix": "srAwsAutoscalingLifecycleHook",
    "body": "resource \"aws_autoscaling_lifecycle_hook\" \"${1:name}\" {\n  name                   = \"${1}\"\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n  lifecycle_transition   = \"\"\n}",
    "description": "Autoscaling Lifecycle hook"
  },
  "frAwsAutoscalingLifecycleHook": {
    "prefix": "frAwsAutoscalingLifecycleHook",
    "body": "resource \"aws_autoscaling_lifecycle_hook\" \"${1:name}\" {\n  name                    = \"${1}\"\n  autoscaling_group_name  = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n  lifecycle_transition    = \"\"\n  default_result          = \"\"\n  heartbeat_timeout       = 1\n  notification_metadata   = \"\"\n  notification_target_arn = \"arn:aws:sqs:region:XXX:queue1*\"\n  role_arn                = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n}",
    "description": "Autoscaling Lifecycle hook"
  },
  "srAwsAutoscalingNotification": {
    "prefix": "srAwsAutoscalingNotification",
    "body": "resource \"aws_autoscaling_notification\" \"${1:name}\" {\n  topic_arn     = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  group_names   = [\"\\$\\{aws_autoscaling_group.${3:bar}.name}\"]\n  notifications = [\"autoscaling:EC2_INSTANCE_\"]\n}",
    "description": "Autoscaling Group Notification"
  },
  "frAwsAutoscalingNotification": {
    "prefix": "frAwsAutoscalingNotification",
    "body": "resource \"aws_autoscaling_notification\" \"${1:name}\" {\n  topic_arn     = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  group_names   = [\"\\$\\{aws_autoscaling_group.${3:bar}.name}\"]\n  notifications = [\"autoscaling:EC2_INSTANCE_\"]\n}",
    "description": "Autoscaling Group Notification"
  },
  "srAwsAutoscalingPolicy": {
    "prefix": "srAwsAutoscalingPolicy",
    "body": "resource \"aws_autoscaling_policy\" \"${1:name}\" {\n  name                   = \"${1:name}\"\n  adjustment_type        = \"\"\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n}",
    "description": "Autoscaling Policy"
  },
  "frAwsAutoscalingPolicy": {
    "prefix": "frAwsAutoscalingPolicy",
    "body": "resource \"aws_autoscaling_policy\" \"${1:name}\" {\n  name                      = \"${1}\"\n  adjustment_type           = \"\"\n  autoscaling_group_name    = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n  policy_type               = \"SimpleScaling\"|\"StepScaling\"\n  cooldown                  = 300 # SimpleScaling Only\n  scaling_adjustment        = 1   # SimpleScaling Only\n  metric_aggregation_type   = \"\"  # StepScaling Only\n  estimated_instance_warmup = 200 # StepScaling Only\n  step_adjustment \\{              # StepScaling Only\n    metric_interval_lower_bound  = 2.0\n    metric_interval_upper_bound  = 3.0\n    scaling_adjustment           = 1\n  }\n  #min_adjustment_step     = 1 # Use min_adjustment_magnitude instead\n  min_adjustment_magnitude = 1\n}",
    "description": "Autoscaling Policy"
  },
  "srAwsAutoscalingSchedule": {
    "prefix": "srAwsAutoscalingSchedule",
    "body": "resource \"aws_autoscaling_schedule\" \"${1:name}\" {\n  scheduled_action_name  = \"${1}\"\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n}",
    "description": "Autoscaling Schedule"
  },
  "frAwsAutoscalingSchedule": {
    "prefix": "frAwsAutoscalingSchedule",
    "body": "resource \"aws_autoscaling_schedule\" \"${1:name}\" {\n  scheduled_action_name  = \"${1}\"\n  autoscaling_group_name = \"\\$\\{aws_autoscaling_group.${2:foo}.name}\"\n  start_time             = \"\"\n  end_time               = \"\"\n  recurrence             = \"0 * * * *\"\n  min_size               = 1\n  max_size               = 1\n  desired_capacity       = 1\n}",
    "description": "Autoscaling Schedule"
  },
  "srAwsCloudFormationStack": {
    "prefix": "srAwsCloudFormationStack",
    "body": "resource \"aws_cloud_formation_stack\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "CloudFormation Stack"
  },
  "frAwsCloudFormationStack": {
    "prefix": "frAwsCloudFormationStack",
    "body": "resource \"aws_cloud_formation_stack\" \"${1:name}\" {\n  name               = \"${1}\"\n  template_body      = \"\"\n  template_url       = \"\"\n  capabilities       = [\"\"]\n  disable_rollback   = true|false\n  notification_arns  = [\"\\$\\{aws_sns_topic.${2:foo}.arn}\"]\n  on_failure         = \"\"\n  parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  policy_body        = \"\"\n  policy_url         = \"\" # Conflicts with policy_body\n  timeout_in_minutes = 1\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  iam_role_arn       = \"\"\n}",
    "description": "CloudFormation Stack"
  },
  "srAwsCloudFrontDistribution": {
    "prefix": "srAwsCloudFrontDistribution",
    "body": "resource \"aws_cloud_front_distribution\" \"${1:name}\" {\n  default_cache_behavior \\{\n    allowed_methods        = [\"\"]\n    cached_methods         = [\"\"]\n    compress               = true|false\n    default_ttl            = 1\n    forwarded_values \\{\n      cookies \\{\n        forward           = \"\"\n        whitelisted_names = [\"\"]\n      }\n      headers                 = [\"\"]\n      query_string            = true|false\n      query_string_cache_keys = [\"\"]\n    }\n    lambda_function_association \\{\n      event_type = \"\"\n      lambda_arn = \"\"\n    }\n    max_ttl                = 1\n    min_ttl                = 1\n    smooth_streaming       = true|false\n    target_origin_id       = \"\"\n    trusted_signers        = [\"\"]\n    viewer_protocol_policy = \"\"\n  }\n  enabled                = true|false\n  origin \\{\n    custom_origin_config \\{\n      http_port              = 1\n      https_port             = 1\n      origin_protocol_policy = \"\"\n      origin_ssl_protocols   = [\"\"]\n    }\n    domain_name           = \"\\$\\{aws_s3_bucket.${2:foo}.bucket_domain_name}\"\n    custom_header \\{\n      name  = \"\"\n      value = \"\"\n    }\n    origin_id             = \"\"\n    origin_path           = \"\"\n    s3_origin_config \\{\n      origin_access_identity = \"\"\n    }\n  }\n  restrictions \\{\n    geo_restriction \\{\n      locations        = [\"\"]\n      restriction_type = \"\"\n    }\n  }\n  viewer_certificate \\{\n    acm_certificate_arn            = \"\"\n    cloudfront_default_certificate = true|false\n    iam_certificate_id             = \"\"\n    minimum_protocol_version       = \"\"\n    ssl_support_method             = \"\"\n  }\n}",
    "description": "CloudFront Web distribution"
  },
  "frAwsCloudFrontDistribution": {
    "prefix": "frAwsCloudFrontDistribution",
    "body": "resource \"aws_cloud_front_distribution\" \"${1:name}\" {\n  default_cache_behavior \\{\n    allowed_methods              = [\"\"]\n    cached_methods               = [\"\"]\n    compress                     = true|false\n    default_ttl                  = 1\n    forwarded_values \\{\n      cookies \\{\n        forward           = \"\"\n        whitelisted_names = [\"\"]\n      }\n      headers                 = [\"\"]\n      query_string            = true|false\n      query_string_cache_keys = [\"\"]\n    }\n    lambda_function_association \\{\n      event_type = \"\"\n      lambda_arn = \"\"\n    }\n    max_ttl                = 1\n    min_ttl                = 1\n    smooth_streaming       = true|false\n    target_origin_id       = \"\"\n    trusted_signers        = [\"\"]\n    viewer_protocol_policy = \"\"\n  }\n  enabled                        = true|false\n  origin \\{\n    custom_origin_config \\{\n      http_port              = 1\n      https_port             = 1\n      origin_protocol_policy = \"\"\n      origin_ssl_protocols   = [\"\"]\n    }\n    domain_name           = \"\\$\\{aws_s3_bucket.${2:foo}.bucket_domain_name}\"\n    custom_header \\{\n      name  = \"\"\n      value = \"\"\n    }\n    origin_id             = \"\"\n    origin_path           = \"\"\n    s3_origin_config \\{\n      origin_access_identity = \"\"\n    }\n  }\n  restrictions \\{\n    geo_restriction \\{\n      locations        = [\"\"]\n      restriction_type = \"\"\n    }\n  }\n  viewer_certificate \\{\n    acm_certificate_arn            = \"\"\n    cloudfront_default_certificate = true|false\n    iam_certificate_id             = \"\"\n    minimum_protocol_version       = \"\"\n    ssl_support_method             = \"\"\n  }\n  aliases                        = [\"\"]\n  cache_behavior \\{\n    allowed_methods              = [\"\"]\n    cached_methods               = [\"\"]\n    compress                     = true|false\n    default_ttl                  = 1\n    forwarded_values \\{\n      cookies \\{\n        forward           = \"\"\n        whitelisted_names = [\"\"]\n      }\n      headers                 = [\"\"]\n      query_string            = true|false\n      query_string_cache_keys = [\"\"]\n    }\n    lambda_function_association \\{\n      event_type = \"\"\n      lambda_arn = \"\"\n    }\n    max_ttl                      = 1\n    min_ttl                      = 1\n    path_pattern                 = \"\"\n    smooth_streaming             = true|false\n    target_origin_id             = \"\"\n    trusted_signers              = [\"\"]\n    viewer_protocol_policy       = \"\"\n  }\n  comment                        = \"\"\n  custom_error_response \\{\n    error_caching_min_ttl = 1\n    error_code            = 1\n    response_code         = 1\n    response_page_path    = \"\"\n  }\n  default_root_object            = \"\"\n  http_version                   = \"\"\n  logging_config \\{\n    bucket          = \"\"\n    include_cookies = true|false\n    prefix          = \"\"\n  }\n  price_class                    = \"\"\n  web_acl_id                     = \"\"\n  retain_on_delete               = true|false\n  is_ipv6_enabled                = true|false\n}",
    "description": "CloudFront Web distribution"
  },
  "srAwsCloudFrontOriginAccessIdentity": {
    "prefix": "srAwsCloudFrontOriginAccessIdentity",
    "body": "resource \"aws_cloud_front_origin_access_identity\" \"${1:name}\" {\n}",
    "description": "CloudFront Origin Access Identity"
  },
  "frAwsCloudFrontOriginAccessIdentity": {
    "prefix": "frAwsCloudFrontOriginAccessIdentity",
    "body": "resource \"aws_cloud_front_origin_access_identity\" \"${1:name}\" {\n  comment = \"\"\n}",
    "description": "CloudFront Origin Access Identity"
  },
  "srAwsCloudTrail": {
    "prefix": "srAwsCloudTrail",
    "body": "resource \"aws_cloud_trail\" \"${1:name}\" {\n  name           = \"${1}\"\n  s3_bucket_name = \"\\$\\{aws_s3_bucket.${2:foo}.id}\"\n}",
    "description": "CloudTrail"
  },
  "frAwsCloudTrail": {
    "prefix": "frAwsCloudTrail",
    "body": "resource \"aws_cloud_trail\" \"${1:name}\" {\n  name                          = \"${1}\"\n  s3_bucket_name                = \"\\$\\{aws_s3_bucket.${2:foo}.id}\"\n  enable_logging                = true|false\n  s3_key_prefix                 = \"\"\n  cloud_watch_logs_role_arn     = \"\"\n  cloud_watch_logs_group_arn    = \"\"\n  include_global_service_events = true|false\n  is_multi_region_trail         = true|false\n  sns_topic_name                = \"\"\n  enable_log_file_validation    = true|false\n  kms_key_id                    = \"\"\n}",
    "description": "CloudTrail"
  },
  "srAwsCloudWatchEventRule": {
    "prefix": "srAwsCloudWatchEventRule",
    "body": "resource \"aws_cloud_watch_event_rule\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "CloudWatch Event Rule"
  },
  "frAwsCloudWatchEventRule": {
    "prefix": "frAwsCloudWatchEventRule",
    "body": "resource \"aws_cloud_watch_event_rule\" \"${1:name}\" {\n  name                = \"${1}\"\n  schedule_expression = \"rate(5 minutes)\"\n  event_pattern       = \"\"\n  description         = \"\"\n  role_arn            = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  is_enabled          = true|false\n}",
    "description": "CloudWatch Event Rule"
  },
  "srAwsCloudWatchEventTarget": {
    "prefix": "srAwsCloudWatchEventTarget",
    "body": "resource \"aws_cloud_watch_event_target\" \"${1:name}\" {\n  rule = \"\\$\\{aws_cloudwatch_event_rule.${2:foo}.name}\"\n  arn  = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n}",
    "description": "CloudWatch Event Target"
  },
  "frAwsCloudWatchEventTarget": {
    "prefix": "frAwsCloudWatchEventTarget",
    "body": "resource \"aws_cloud_watch_event_target\" \"${1:name}\" {\n  target_id  = \"${1}\"\n  rule       = \"\\$\\{aws_cloudwatch_event_rule.${2:foo}.name}\"\n  arn        = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n  input      = \"\" # Conflicts with input_path\n  input_path = \"\"\n}",
    "description": "CloudWatch Event Target"
  },
  "srAwsCloudWatchLogDestination": {
    "prefix": "srAwsCloudWatchLogDestination",
    "body": "resource \"aws_cloud_watch_log_destination\" \"${1:name}\" {\n  name       = \"${1}\"\n  role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  target_arn = \"\\$\\{aws_kinesis_stream.${3:bar}.arn}\"\n}",
    "description": "CloudWatch Log Destination"
  },
  "frAwsCloudWatchLogDestination": {
    "prefix": "frAwsCloudWatchLogDestination",
    "body": "resource \"aws_cloud_watch_log_destination\" \"${1:name}\" {\n  name       = \"${1}\"\n  role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  target_arn = \"\\$\\{aws_kinesis_stream.${3:bar}.arn}\"\n}",
    "description": "CloudWatch Log Destination"
  },
  "srAwsCloudWatchLogDestinationPolicy": {
    "prefix": "srAwsCloudWatchLogDestinationPolicy",
    "body": "resource \"aws_cloud_watch_log_destination_policy\" \"${1:name}\" {\n  destination_name = \"\\$\\{aws_cloudwatch_log_destination.${2:foo}.name}\"\n  access_policy    = \"\\$\\{data.aws_iam_policy_document.${3:bar}.json}\"\n}",
    "description": "CloudWatch Log Destination Policy"
  },
  "frAwsCloudWatchLogDestinationPolicy": {
    "prefix": "frAwsCloudWatchLogDestinationPolicy",
    "body": "resource \"aws_cloud_watch_log_destination_policy\" \"${1:name}\" {\n  destination_name = \"\\$\\{aws_cloudwatch_log_destination.${2:foo}.name}\"\n  access_policy    = \"\\$\\{data.aws_iam_policy_document.${3:bar}.json}\"\n}",
    "description": "CloudWatch Log Destination Policy"
  },
  "srAwsCloudWatchLogGroup": {
    "prefix": "srAwsCloudWatchLogGroup",
    "body": "resource \"aws_cloud_watch_log_group\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "CloudWatch Log Group"
  },
  "frAwsCloudWatchLogGroup": {
    "prefix": "frAwsCloudWatchLogGroup",
    "body": "resource \"aws_cloud_watch_log_group\" \"${1:name}\" {\n  name              = \"${1}\" # Conflicts with name_prefix\n  name_prefix       = \"\"\n  retention_in_days = 1\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "CloudWatch Log Group"
  },
  "srAwsCloudWatchLogMetricFilter": {
    "prefix": "srAwsCloudWatchLogMetricFilter",
    "body": "resource \"aws_cloud_watch_log_metric_filter\" \"${1:name}\" {\n  name                  = \"${1}\"\n  pattern               = \"\"\n  log_group_name        = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n  metric_transformation \\{\n    name      = \"\"\n    namespace = \"\"\n    value     = 1\n  }\n}",
    "description": "CloudWatch Log Metric Filter"
  },
  "frAwsCloudWatchLogMetricFilter": {
    "prefix": "frAwsCloudWatchLogMetricFilter",
    "body": "resource \"aws_cloud_watch_log_metric_filter\" \"${1:name}\" {\n  name                  = \"${1}\"\n  pattern               = \"\"\n  log_group_name        = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n  metric_transformation \\{\n    name      = \"\"\n    namespace = \"\"\n    value     = 1\n  }\n}",
    "description": "CloudWatch Log Metric Filter"
  },
  "srAwsCloudWatchLogStream": {
    "prefix": "srAwsCloudWatchLogStream",
    "body": "resource \"aws_cloud_watch_log_stream\" \"${1:name}\" {\n  name           = \"${1}\"\n  log_group_name = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n}",
    "description": "CloudWatch Log Stream"
  },
  "frAwsCloudWatchLogStream": {
    "prefix": "frAwsCloudWatchLogStream",
    "body": "resource \"aws_cloud_watch_log_stream\" \"${1:name}\" {\n  name           = \"${1}\"\n  log_group_name = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n}",
    "description": "CloudWatch Log Stream"
  },
  "srAwsCloudWatchLogSubscriptionFilter": {
    "prefix": "srAwsCloudWatchLogSubscriptionFilter",
    "body": "resource \"aws_cloud_watch_log_subscription_filter\" \"${1:name}\" {\n  name            = \"${1}\"\n  destination_arn = \"\\$\\{aws_kinesis_stream.${3:bar}.arn}\"\n  filter_pattern  = \"\"\n  log_group_name  = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n}",
    "description": "CloudWatch Log Subscription Filter"
  },
  "frAwsCloudWatchLogSubscriptionFilter": {
    "prefix": "frAwsCloudWatchLogSubscriptionFilter",
    "body": "resource \"aws_cloud_watch_log_subscription_filter\" \"${1:name}\" {\n  name            = \"${1}\"\n  destination_arn = \"\\$\\{aws_kinesis_stream.${3:bar}.arn}\"\n  filter_pattern  = \"\"\n  log_group_name  = \"\\$\\{aws_cloudwatch_log_group.${2:foo}.name}\"\n  role_arn        = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n}",
    "description": "CloudWatch Log Subscription Filter"
  },
  "srAwsCloudWatchMetricAlarm": {
    "prefix": "srAwsCloudWatchMetricAlarm",
    "body": "resource \"aws_cloud_watch_metric_alarm\" \"${1:name}\" {\n  alarm_name          = \"${1}\"\n  comparison_operator = \"\"\n  evaluation_periods  = 1\n  metric_name         = \"\"\n  namespace           = \"\"\n  period              = 1\n  threshold           = 1.0\n}",
    "description": "CloudWatch Metric Alarm"
  },
  "frAwsCloudWatchMetricAlarm": {
    "prefix": "frAwsCloudWatchMetricAlarm",
    "body": "resource \"aws_cloud_watch_metric_alarm\" \"${1:name}\" {\n  alarm_name                            = \"${1}\"\n  comparison_operator                   = \"\"\n  evaluation_periods                    = 1\n  metric_name                           = \"\"\n  namespace                             = \"\"\n  period                                = 1\n  threshold                             = 1.0\n  statistic                             = \"\" # Conflicts with extended_statistic\n  actions_enabled                       = true|false\n  alarm_actions                         = [\"\"]\n  alarm_description                     = \"\"\n  dimensions \\{\n      key = \"\\$\\{var.SOMEVAL}\"\n  }\n  insufficient_data_actions             = [\"\"]\n  ok_actions                            = [\"\"]\n  unit                                  = \"\"\n  extended_statistic                    = \"\"\n  treat_missing_data                    = \"\"\n  evaluate_low_sample_count_percentiles = \"\"\n}",
    "description": "CloudWatch Metric Alarm"
  },
  "srAwsCodeBuildProject": {
    "prefix": "srAwsCodeBuildProject",
    "body": "resource \"aws_code_build_project\" \"${1:name}\" {\n  name        = \"${1}\"\n  artifacts \\{\n    name           = \"\"\n    location       = \"\"\n    namespace_type = \"\"\n    packaging      = \"\"\n    path           = \"\"\n    type           = \"\"\n  }\n  environment \\{\n    compute_type = \"\"\n    environment_variable \\{\n      name  = \"\"\n      value = \"\"\n    }\n    image        = \"\"\n    type         = \"\"\n  }\n  source \\{\n    auth \\{\n      resource = \"\"\n      type     = \"\"\n    }\n    buildspec = \"\"\n    location  = \"\"\n    type      = \"\"\n  }\n}",
    "description": "CodeBuild Project"
  },
  "frAwsCodeBuildProject": {
    "prefix": "frAwsCodeBuildProject",
    "body": "resource \"aws_code_build_project\" \"${1:name}\" {\n  name           = \"${1}\"\n  artifacts \\{\n    name           = \"\"\n    location       = \"\"\n    namespace_type = \"\"\n    packaging      = \"\"\n    path           = \"\"\n    type           = \"\"\n  }\n  environment \\{\n    compute_type = \"\"\n    environment_variable \\{\n      name  = \"\"\n      value = \"\"\n    }\n    image        = \"\"\n    type         = \"\"\n  }\n  source \\{\n    auth \\{\n      resource = \"\"\n      type     = \"\"\n    }\n    buildspec  = \"\"\n    location   = \"\"\n    type       = \"\"\n  }\n  description    = \"\"\n  encryption_key = \"\"\n  service_role   = \"\"\n  build_timeout  = 60\n}",
    "description": "CodeBuild Project"
  },
  "srAwsCodeCommitRepository": {
    "prefix": "srAwsCodeCommitRepository",
    "body": "resource \"aws_code_commit_repository\" \"${1:name}\" {\n  repository_name = \"${1}\"\n}",
    "description": "CodeCommit Repository"
  },
  "frAwsCodeCommitRepository": {
    "prefix": "frAwsCodeCommitRepository",
    "body": "resource \"aws_code_commit_repository\" \"${1:name}\" {\n  repository_name = \"${1}\"\n  description     = \"\"\n  default_branch  = \"\"\n}",
    "description": "CodeCommit Repository"
  },
  "srAwsCodeCommitTrigger": {
    "prefix": "srAwsCodeCommitTrigger",
    "body": "resource \"aws_code_commit_trigger\" \"${1:name}\" {\n  name            = \"${1}\"\n  repository_name = \"\"\n  trigger \\{\n    name            = \"\"\n    destination_arn = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n    custom_data     = \"\"\n    branches        = [\"\"]\n    events          = [\"\"]\n  }\n}",
    "description": "CodeCommit Trigger"
  },
  "frAwsCodeCommitTrigger": {
    "prefix": "frAwsCodeCommitTrigger",
    "body": "resource \"aws_code_commit_trigger\" \"${1:name}\" {\n  name            = \"${1}\"\n  repository_name = \"${1}\"\n  trigger \\{\n    name            = \"\"\n    destination_arn = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n    custom_data     = \"\"\n    branches        = [\"\"]\n    events          = [\"\"]\n  }\n}",
    "description": "CodeCommit Trigger"
  },
  "srAwsCodeDeployApp": {
    "prefix": "srAwsCodeDeployApp",
    "body": "resource \"aws_code_deploy_app\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "CodeDeploy App"
  },
  "frAwsCodeDeployApp": {
    "prefix": "frAwsCodeDeployApp",
    "body": "resource \"aws_code_deploy_app\" \"${1:name}\" {\n  name = \"${1}\"\n  unique_id = \"\"\n}",
    "description": "CodeDeploy App"
  },
  "srAwsCodeDeployDeploymentConfig": {
    "prefix": "srAwsCodeDeployDeploymentConfig",
    "body": "resource \"aws_code_deploy_deployment_config\" \"${1:name}\" {\n  deployment_config_name = \"\"\n  minimum_healthy_hosts \\{\n    type  = \"\"\n    value = 1\n  }\n}",
    "description": "CodeDeploy Deployment Config"
  },
  "frAwsCodeDeployDeploymentConfig": {
    "prefix": "frAwsCodeDeployDeploymentConfig",
    "body": "resource \"aws_code_deploy_deployment_config\" \"${1:name}\" {\n  deployment_config_name = \"\"\n  minimum_healthy_hosts \\{\n    type  = \"\"\n    value = 1\n  }\n}",
    "description": "CodeDeploy Deployment Config"
  },
  "srAwsCodeDeployDeploymentGroup": {
    "prefix": "srAwsCodeDeployDeploymentGroup",
    "body": "resource \"aws_code_deploy_deployment_group\" \"${1:name}\" {\n  app_name              = \"\\$\\{aws_codedeploy_app.${2:foo}.name}\"\n  deployment_group_name = \"${1}\"\n  service_role_arn      = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n}",
    "description": "CodeDeploy Deployment Group"
  },
  "frAwsCodeDeployDeploymentGroup": {
    "prefix": "frAwsCodeDeployDeploymentGroup",
    "body": "resource \"aws_code_deploy_deployment_group\" \"${1:name}\" {\n  app_name                        = \"\\$\\{aws_codedeploy_app.${2:foo}.name}\"\n  deployment_group_name           = \"${1}\"\n  service_role_arn                = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n  alarm_configuration \\{\n    alarms                    = [\"\"]\n    enabled                   = true|false\n    ignore_poll_alarm_failure = true|false\n  }\n  auto_rollback_configuration \\{\n    enabled = true|false\n    events  = [\"\"]\n  }\n  autoscaling_groups              = [\"\"]\n  deployment_config_name          = \"\"\n  ec2_tag_filter \\{\n    key   = \"\"\n    type  = \"\"\n    value = \"\"\n  }\n  on_premises_instance_tag_filter \\{\n    key   = \"\"\n    type  = \"\"\n    value = \"\"\n  }\n  trigger_configuration \\{\n    trigger_events     = [\"\"]\n    trigger_name       = \"\"\n    trigger_target_arn = \"\"\n  }\n}",
    "description": "CodeDeploy Deployment Group"
  },
  "srAwsCodePipeline": {
    "prefix": "srAwsCodePipeline",
    "body": "resource \"aws_code_pipeline\" \"${1:name}\" {\n  name           = \"${1}\"\n  role_arn       = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  artifact_store \\{\n    location = \"\"\n    type     = \"\"\n    encryption_key \\{\n      id   = \"\"\n      type = \"\"\n    }\n  }\n  stage \\{\n    name    = \"\"\n    action \\{\n      configuration \\{\n        key = \"\\$\\{var.SOMEVAL}\"\n      }\n      name             = \"\"\n      category         = \"\"\n      owner            = \"\"\n      provider         = \"\"\n      version          = \"\"\n      input_artifacts  = [\"\"]\n      output_artifacts = [\"\"]\n      role_arn         = \"\"\n      run_order        = 1\n    }\n  }\n}",
    "description": "CodePipeLine"
  },
  "frAwsCodePipeline": {
    "prefix": "frAwsCodePipeline",
    "body": "resource \"aws_code_pipeline\" \"${1:name}\" {\n  name           = \"${1}\"\n  role_arn       = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  artifact_store \\{\n    location = \"\"\n    type     = \"\"\n    encryption_key \\{\n      id   = \"\"\n      type = \"\"\n    }\n  }\n  stage \\{\n    name    = \"\"\n    action \\{\n      configuration \\{\n        key = \"\\$\\{var.SOMEVAL}\"\n      }\n      name             = \"\"\n      category         = \"\"\n      owner            = \"\"\n      provider         = \"\"\n      version          = \"\"\n      input_artifacts  = [\"\"]\n      output_artifacts = [\"\"]\n      role_arn         = \"\"\n      run_order        = 1\n    }\n  }\n}",
    "description": "CodePipeLine"
  },
  "srAwsConfigConfigRule": {
    "prefix": "srAwsConfigConfigRule",
    "body": "resource \"aws_config_config_rule\" \"${1:name}\" {\n  name       = \"${1}\"\n  depends_on = [\"aws_config_configuration_recorder.${2:foo}\"]\n  source \\{\n    owner             = \"\"\n    source_detail \\{\n      event_source                = \"\"\n      maximum_execution_frequency = \"\"\n      message_type                = \"\"\n    }\n    source_identifier = \"\"\n  }\n}",
    "description": "Config Rule"
  },
  "frAwsConfigConfigRule": {
    "prefix": "frAwsConfigConfigRule",
    "body": "resource \"aws_config_config_rule\" \"${1:name}\" {\n  name                        = \"${1}\"\n  depends_on                  = [\"aws_config_configuration_recorder.${2:foo}\"]\n  source \\{\n    owner              = \"\"\n    source_detail \\{\n      event_source                = \"\"\n      maximum_execution_frequency = \"\"\n      message_type                = \"\"\n    }\n    source_identifier  = \"\"\n  }\n  description                 = \"\"\n  input_parameters            = \"\"\n  maximum_execution_frequency = \"\"\n  scope \\{\n    compliance_resource_id    = \"\"\n    compliance_resource_types = [\"\"]\n    tag_key                   = \"\"\n    tag_value                 = \"\"\n  }\n}",
    "description": "Config Rule"
  },
  "srAwsConfigConfigurationRecorder": {
    "prefix": "srAwsConfigConfigurationRecorder",
    "body": "resource \"aws_config_configuration_recorder\" \"${1:name}\" {\n  role_arn = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n}",
    "description": "Config Configuration Recorder"
  },
  "frAwsConfigConfigurationRecorder": {
    "prefix": "frAwsConfigConfigurationRecorder",
    "body": "resource \"aws_config_configuration_recorder\" \"${1:name}\" {\n  role_arn        = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  name            = \"${1}\"\n  recording_group \\{\n    all_supported                 = true|false\n    include_global_resource_types = true|false\n    resource_types                = [\"\"]\n  }\n}",
    "description": "Config Configuration Recorder"
  },
  "srAwsConfigConfigurationRecorderStatus": {
    "prefix": "srAwsConfigConfigurationRecorderStatus",
    "body": "resource \"aws_config_configuration_recorder_status\" \"${1:name}\" {\n  name       = \"${1}\"\n  depends_on = [\"aws_config_delivery_channel.${2:foo}\"]\n  is_enabled = true|false\n}",
    "description": "Config Configuration Recorder Status"
  },
  "frAwsConfigConfigurationRecorderStatus": {
    "prefix": "frAwsConfigConfigurationRecorderStatus",
    "body": "resource \"aws_config_configuration_recorder_status\" \"${1:name}\" {\n  name       = \"${1}\"\n  depends_on = [\"aws_config_delivery_channel.${2:foo}\"]\n  is_enabled = true|false\n}",
    "description": "Config Configuration Recorder Status"
  },
  "srAwsConfigDeliveryChannel": {
    "prefix": "srAwsConfigDeliveryChannel",
    "body": "resource \"aws_config_delivery_channel\" \"${1:name}\" {\n  s3_bucket_name = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  depends_on     = [\"aws_config_configuration_recorder.${3:bar}\"]\n}",
    "description": "Config Delivery Channel"
  },
  "frAwsConfigDeliveryChannel": {
    "prefix": "frAwsConfigDeliveryChannel",
    "body": "resource \"aws_config_delivery_channel\" \"${1:name}\" {\n  s3_bucket_name = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  depends_on     = [\"aws_config_configuration_recorder.${3:bar}\"]\n  name           = \"${1}\"\n  s3_key_prefix  = \"\"\n  sns_topic_arn  = \"\\$\\{aws_sns_topic.${4:baz}.arn}\"\n  snapshot_delivery_properties \\{\n    delivery_frequency = \"\"\n  }\n}",
    "description": "Config Delivery Channel"
  },
  "srAwsCustomerGateway": {
    "prefix": "srAwsCustomerGateway",
    "body": "resource \"aws_customer_gateway\" \"${1:name}\" {\n  bgp_asn    = 1\n  ip_address = \"\"\n  type       = \"ipsec.1\"\n}",
    "description": "Customer Gateway in a VPC"
  },
  "frAwsCustomerGateway": {
    "prefix": "frAwsCustomerGateway",
    "body": "resource \"aws_customer_gateway\" \"${1:name}\" {\n  bgp_asn    = 1\n  ip_address = \"\"\n  type       = \"ipsec.1\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Customer Gateway in a VPC"
  },
  "srAwsDbEventSubscription": {
    "prefix": "srAwsDbEventSubscription",
    "body": "resource \"aws_db_event_subscription\" \"${1:name}\" {\n  name      = \"${1:name}\"\n  sns_topic = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n}",
    "description": "DB Event Subscription"
  },
  "frAwsDbEventSubscription": {
    "prefix": "frAwsDbEventSubscription",
    "body": "resource \"aws_db_event_subscription\" \"${1:name}\" {\n  name             = \"${1:name}\"\n  sns_topic        = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  event_categories = [\"\"]\n  source_ids       = [\"\\$\\{aws_db_instance.${3:bar}.id}\"]\n  source_type      = \"\"\n  enabled          = true|false\n}",
    "description": "DB Event Subscription"
  },
  "srAwsDbInstance": {
    "prefix": "srAwsDbInstance",
    "body": "resource \"aws_db_instance\" \"${1:name}\" {\n  instance_class = \"\"\n}",
    "description": "RDS DB Instance"
  },
  "frAwsDbInstance": {
    "prefix": "frAwsDbInstance",
    "body": "resource \"aws_db_instance\" \"${1:name}\" {\n  instance_class              = \"\"\n  name                        = \"${2:foo}\"\n  username                    = \"\"\n  password                    = \"\"\n  engine                      = \"\"\n  engine_version              = \"\"\n  character_set_name          = \"\"\n  storage_encrypted           = true|false\n  allocated_storage           = 1\n  storage_type                = \"\"\n  identifier                  = \"\"\n  identifier_prefix           = \"\" # Conflicts with identifier\n  availability_zone           = \"\"\n  backup_retention_period     = 1\n  backup_window               = \"\"\n  iops                        = 1\n  license_model               = \"\"\n  maintenance_window          = \"\"\n  multi_az                    = true|false\n  port                        = 1\n  publicly_accessible         = true|false\n  vpc_security_group_ids      = [\"\"]\n  security_group_names        = [\"\"]\n  final_snapshot_identifier   = \"\"\n  skip_final_snapshot         = true|false\n  copy_tags_to_snapshot       = true|false\n  db_subnet_group_name        = \"\"\n  parameter_group_name        = \"\"\n  apply_immediately           = true|false\n  replicate_source_db         = \"\"\n  snapshot_identifier         = \"\"\n  auto_minor_version_upgrade  = true|false\n  allow_major_version_upgrade = true|false\n  monitoring_role_arn         = \"\"\n  monitoring_interval         = 1\n  option_group_name           = \"\"\n  kms_key_id                  = \"\"\n  timezone                    = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "RDS DB Instance"
  },
  "srAwsDbOptionGroup": {
    "prefix": "srAwsDbOptionGroup",
    "body": "resource \"aws_db_option_group\" \"${1:name}\" {\n  engine_name          = \"\"\n  major_engine_version = \"\"\n}",
    "description": "RDS DB Option Group"
  },
  "frAwsDbOptionGroup": {
    "prefix": "frAwsDbOptionGroup",
    "body": "resource \"aws_db_option_group\" \"${1:name}\" {\n  engine_name              = \"\"\n  major_engine_version     = \"\"\n  name                     = \"${1:name}\" # Conflicts with name_prefix\n  name_prefix              = \"\"\n  option_group_description = \"\"\n  option \\{\n    option_name                    = \"\"\n    option_settings \\{\n      name  = \"\"\n      value = \"\"\n    }\n    port                           = 1\n    db_security_group_memberships  = [\"\"]\n    vpc_security_group_memberships = [\"\"]\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "RDS DB Option Group"
  },
  "srAwsDbParameterGroup": {
    "prefix": "srAwsDbParameterGroup",
    "body": "resource \"aws_db_parameter_group\" \"${1:name}\" {\n  family = \"\"\n}",
    "description": "RDS DB Parameter Group"
  },
  "frAwsDbParameterGroup": {
    "prefix": "frAwsDbParameterGroup",
    "body": "resource \"aws_db_parameter_group\" \"${1:name}\" {\n  family      = \"\"\n  name        = \"${1:name}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n  description = \"\"\n  parameter \\{\n    name         = \"\"\n    value        = \"\"\n    apply_method = \"\"\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "RDS DB Parameter Group"
  },
  "srAwsDbSecurityGroup": {
    "prefix": "srAwsDbSecurityGroup",
    "body": "# Note: For instances inside a VPC, use aws_db_instance.vpc_security_group_ids\nresource \"aws_db_security_group\" \"${1:name}\" {\n  name = \"${1:name}\"\n  ingress \\{\n    cidr                    = \"\"\n    security_group_name     = \"\"\n    security_group_id       = \"\"\n    security_group_owner_id = \"\"\n  }\n}",
    "description": "RDS Security Group"
  },
  "frAwsDbSecurityGroup": {
    "prefix": "frAwsDbSecurityGroup",
    "body": "# Note: For instances inside a VPC, use aws_db_instance.vpc_security_group_ids\nresource \"aws_db_security_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  ingress \\{\n    cidr                    = \"\"\n    security_group_name     = \"\"\n    security_group_id       = \"\"\n    security_group_owner_id = \"\"\n  }\n  description = \"\"\n}",
    "description": "RDS Security Group"
  },
  "srAwsDbSubnetGroup": {
    "prefix": "srAwsDbSubnetGroup",
    "body": "resource \"aws_db_subnet_group\" \"${1:name}\" {\n  subnet_ids = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n}",
    "description": "RDS Subnet Group"
  },
  "frAwsDbSubnetGroup": {
    "prefix": "frAwsDbSubnetGroup",
    "body": "resource \"aws_db_subnet_group\" \"${1:name}\" {\n  name        = \"${1:name}\" # Conflicts with name_prefix\n  subnet_ids  = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n  name_prefix = \"\"\n  description = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "RDS Subnet Group"
  },
  "srAwsDefaultNetworkAcl": {
    "prefix": "srAwsDefaultNetworkAcl",
    "body": "// XXX: Advanced resource, please read the docs.\nresource \"aws_default_network_acl\" \"${1:name}\" {\n  default_network_acl_id = \"\\$\\{aws_vpc.${2:foo}.default_network_acl_id}\"\n}",
    "description": "Default Network ACL"
  },
  "frAwsDefaultNetworkAcl": {
    "prefix": "frAwsDefaultNetworkAcl",
    "body": "// XXX: Advanced resource, please read the docs.\nresource \"aws_default_network_acl\" \"${1:name}\" {\n  default_network_acl_id = \"\\$\\{aws_vpc.${2:foo}.default_network_acl_id}\"\n  subnet_ids             = [\"\"]\n  ingress \\{\n    from_port  = 0\n    to_port    = 0\n    rule_no    = 100\n    action     = \"allow\"\n    protocol   = -1\n    cidr_block = \"\"\n    icmp_type  = 0\n    icmp_code  = 0\n  }\n  egress \\{\n    from_port  = 0\n    to_port    = 0\n    rule_no    = 100\n    action     = \"allow\"\n    protocol   = -1\n    cidr_block = \"0.0.0.0/0\"\n    icmp_type  = 0\n    icmp_code  = 0\n  }\n}",
    "description": "Default Network ACL"
  },
  "srAwsDefaultRouteTable": {
    "prefix": "srAwsDefaultRouteTable",
    "body": "// XXX: Advanced resource, please read the docs.\n// XXX: Recommended not to use with aws_main_route_table_association\nresource \"aws_default_route_table\" \"${1:name}\" {\n  default_route_table_id = \"\\$\\{aws_vpc.${2:foo}.default_route_table_id}\"\n}",
    "description": "Default VPC Routing Table"
  },
  "frAwsDefaultRouteTable": {
    "prefix": "frAwsDefaultRouteTable",
    "body": "// XXX: Advanced resource, please read the docs.\n// XXX: Recommended not to use with aws_main_route_table_association\nresource \"aws_default_route_table\" \"${1:name}\" {\n  default_route_table_id = \"\\$\\{aws_vpc.${2:foo}.default_route_table_id}\"\n  propagating_vgws       = [\"\"]\n  route \\{\n    cidr_block                = \"\"\n    ipv6_cidr_block           = \"\"\n    egress_only_gateway_id    = \"\"\n    gateway_id                = \"\"\n    instance_id               = \"\"\n    nat_gateway_id            = \"\"\n    vpc_peering_connection_id = \"\"\n    network_interface_id      = \"\"\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Default VPC Routing Table"
  },
  "srAwsDefaultSecurityGroup": {
    "prefix": "srAwsDefaultSecurityGroup",
    "body": "// XXX: Advanced resource, please read the docs.\nresource \"aws_default_security_group\" \"${1:name}\" {\n}",
    "description": "Default Security Group"
  },
  "frAwsDefaultSecurityGroup": {
    "prefix": "frAwsDefaultSecurityGroup",
    "body": "// XXX: Advanced resource, please read the docs.\nresource \"aws_default_security_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  vpc_id      = \"\\$\\{aws_vpc.${2:foo}.vpc}\"\n  ingress \\{\n    from_port        = 1\n    to_port          = 1\n    protocol         = \"\"\n    cidr_blocks      = [\"\"]\n    ipv6_cidr_blocks = [\"\"]\n    security_groups  = [\"\"]\n    self             = true|false\n  }\n  egress \\{\n    from_port        = 1\n    to_port          = 1\n    protocol         = \"\"\n    cidr_blocks      = [\"\"]\n    ipv6_cidr_blocks = [\"\"]\n    prefix_list_ids  = [\"\"]\n    security_groups  = [\"\"]\n    self             = true|false\n  }\n}\n}",
    "description": "Default Security Group"
  },
  "srAwsDirectoryServiceDirectory": {
    "prefix": "srAwsDirectoryServiceDirectory",
    "body": "resource \"aws_directory_service_directory\" \"${1:name}\" {\n  name     = \"${2:fqdn}\"\n  password = \"${3:foo}\"\n}",
    "description": "Microsoft Directory in AWS Directory Service"
  },
  "frAwsDirectoryServiceDirectory": {
    "prefix": "frAwsDirectoryServiceDirectory",
    "body": "resource \"aws_directory_service_directory\" \"${1:name}\" {\n  name             = \"${2:fqdn}\"\n  password         = \"${3:foo}\"\n  size             = \"\"\n  alias            = \"\"\n  description      = \"\"\n  short_name       = \"\"\n  vpc_settings \\{\n    vpc_id     = \"\\$\\{aws_vpc.${4:bar}.id}\"\n    subnet_ids = [\"\\$\\{aws_subnet.${5:baz}.id}\"]\n  }\n  connect_settings \\{\n    vpc_id            = \"\\$\\{aws_vpc.${4:bar}.id}\"\n    subnet_ids        = [\"\\$\\{aws_subnet.${5}.id}\"]\n    customer_username = \"\"\n    customer_dns_ips  = [\"\"]\n  }\n  enable_sso       = true|false\n  type             = \"SimpleAD\"|\"MicrosoftAD\"\n}",
    "description": "Microsoft Directory in AWS Directory Service"
  },
  "srAwsDmsCertificate": {
    "prefix": "srAwsDmsCertificate",
    "body": "resource \"aws_dms_certificate\" \"${1:name}\" {\n  certificate_id = \"${2:foo}\"\n}",
    "description": "Data Migration Service Certificate"
  },
  "frAwsDmsCertificate": {
    "prefix": "frAwsDmsCertificate",
    "body": "resource \"aws_dms_certificate\" \"${1:name}\" {\n  certificate_id     = \"${2:foo}\"\n  certificate_pem    = \"\"\n  certificate_wallet = \"\"\n}",
    "description": "Data Migration Service Certificate"
  },
  "srAwsDmsEndpoint": {
    "prefix": "srAwsDmsEndpoint",
    "body": "resource \"aws_dms_endpoint\" \"${1:name}\" {\n  endpoint_id   = \"${1}\"\n  endpoint_type = \"source\"|\"target\"\n  engine_name   = \"${2:foo}\"\n  password      = \"${3:bar}\"\n  port          = 1\n  server_name   = \"${4:baz}\"\n  username      = \"${5:qux}\"\n}",
    "description": "Data Migration Service endpoint"
  },
  "frAwsDmsEndpoint": {
    "prefix": "frAwsDmsEndpoint",
    "body": "resource \"aws_dms_endpoint\" \"${1:name}\" {\n  endpoint_id   = \"${1}\"\n  endpoint_type = \"source\"|\"target\"\n  engine_name                 = \"${2:foo}\"\n  password                    = \"${3:bar}\"\n  port                        = 1\n  server_name                 = \"${4:baz}\"\n  username                    = \"${5:qux}\"\n  certificate_arn             = \"\"\n  database_name               = \"\"\n  extra_connection_attributes = \"\"\n  kms_key_arn                 = \"\"\n  ssl_mode                    = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Data Migration Service endpoint"
  },
  "srAwsDmsReplicationInstance": {
    "prefix": "srAwsDmsReplicationInstance",
    "body": "resource \"aws_dms_replication_instance\" \"${1:name}\" {\n  replication_instance_class = \"\"\n  replication_instance_id = \"${1}\"\n}",
    "description": "Data Migration Service Instance"
  },
  "frAwsDmsReplicationInstance": {
    "prefix": "frAwsDmsReplicationInstance",
    "body": "resource \"aws_dms_replication_instance\" \"${1:name}\" {\n  replication_instance_class   = \"\"\n  replication_instance_id      = \"${1}\"\n  allocated_storage            = 50\n  apply_immediately            = true|false\n  auto_minor_version_upgrade   = true|false\n  availability_zone            = \"\"\n  engine_version               = \"\"\n  kms_key_arn                  = \"\"\n  multi_az                     = true|false\n  preferred_maintenance_window = \"sun:10:30-sun:14:30\"\n  publicly_accessible          = true|false\n  replication_subnet_group_id  = \"\\$\\{aws_dms_replication_subnet_group.${2:foo}}\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  vpc_security_group_ids       = [\"\\$\\{aws_vpc.${3:bar}.id}\"]\n}",
    "description": "Data Migration Service Instance"
  },
  "srAwsDmsReplicationSubnetGroup": {
    "prefix": "srAwsDmsReplicationSubnetGroup",
    "body": "resource \"aws_dms_replication_subnet_group\" \"${1:name}\" {\n  replication_subnet_group_description = \"${2:foo}\"\n  replication_subnet_group_id          = \"${1}\"\n  subnet_ids                           = [\"\\$\\{aws_subnet.${3:bar}.id}\"]\n}",
    "description": "Data Migration Service subnet group"
  },
  "frAwsDmsReplicationSubnetGroup": {
    "prefix": "frAwsDmsReplicationSubnetGroup",
    "body": "resource \"aws_dms_replication_subnet_group\" \"${1:name}\" {\n  replication_subnet_group_description = \"${2:foo}\"\n  replication_subnet_group_id          = \"${1}\"\n  subnet_ids                           = [\"\\$\\{aws_subnet.${3:bar}.id}\"]\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Data Migration Service subnet group"
  },
  "srAwsDmsReplicationTask": {
    "prefix": "srAwsDmsReplicationTask",
    "body": "resource \"aws_dms_replication_task\" \"${1:name}\" {\n  migration_type           = \"\"\n  replication_instance_arn  = \"\\$\\{aws_dms_replication_instance.${2:foo}.replication_instance_arn}\"\n  replication_task_id       = \"${1}\"\n  source_endpoint_arn       = \"\\$\\{aws_dms_endpoint.${3:bar}.endpoint_arn}\"\n  table_mappings           = \"\"\n  target_endpoint_arn       = \"\\$\\{aws_dms_endpoint.${4:baz}.endpoint_arn}\"\n}",
    "description": "Data Migration Service Replication Task"
  },
  "frAwsDmsReplicationTask": {
    "prefix": "frAwsDmsReplicationTask",
    "body": "resource \"aws_dms_replication_task\" \"${1:name}\" {\n  migration_type            = \"\"\n  replication_instance_arn  = \"\\$\\{aws_dms_replication_instance.${2:foo}.replication_instance_arn}\"\n  replication_task_id       = \"${1}\"\n  source_endpoint_arn       = \"\\$\\{aws_dms_endpoint.${3:bar}.endpoint_arn}\"\n  table_mappings            = \"\"\n  target_endpoint_arn       = \"\\$\\{aws_dms_endpoint.${4:baz}.endpoint_arn}\"\n  cdc_start_time            = \"\"\n  replication_task_settings = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Data Migration Service Replication Task"
  },
  "srAwsDynamoDbTable": {
    "prefix": "srAwsDynamoDbTable",
    "body": "resource \"aws_dynamo_db_table\" \"${1:name}\" {\n  name           = \"${1}\"\n  hash_key       = \"\"\n  write_capacity = 1\n  read_capacity  = 1\n  attribute \\{\n    name = \"\"\n    type = \"\"\n  }\n}",
    "description": "DynamoDB Table"
  },
  "frAwsDynamoDbTable": {
    "prefix": "frAwsDynamoDbTable",
    "body": "resource \"aws_dynamo_db_table\" \"${1:name}\" {\n  name                   = \"${1}\"\n  hash_key               = \"\"\n  write_capacity         = 1\n  read_capacity          = 1\n  attribute \\{\n    name = \"\"\n    type = \"\"\n  }\n  range_key              = \"\"\n  local_secondary_index \\{\n    name               = \"\"\n    range_key          = \"\"\n    projection_type    = \"\"\n    non_key_attributes = [\"\"]\n  }\n  global_secondary_index \\{\n    name               = \"\"\n    write_capacity     = 1\n    read_capacity      = 1\n    hash_key           = \"\"\n    range_key          = \"\"\n    projection_type    = \"\"\n    non_key_attributes = [\"\"]\n  }\n  stream_enabled         = true|false\n  stream_view_type       = \"\"\n}",
    "description": "DynamoDB Table"
  },
  "srAwsEMRCluster": {
    "prefix": "srAwsEMRCluster",
    "body": "resource \"aws_emr_cluster\" \"${1:name}\" {\n  name                 = \"{1}\"\n  release_label        = \"\"\n  master_instance_type = \"\"\n  service_role         = \"\"\n}",
    "description": "Elastic MapReduce Cluster"
  },
  "frAwsEMRCluster": {
    "prefix": "frAwsEMRCluster",
    "body": "resource \"aws_emr_cluster\" \"${1:name}\" {\n  name                              = \"{1}\"\n  release_label                     = \"\"\n  master_instance_type              = \"\"\n  service_role                      = \"\"\n  core_instance_type                = \"\"\n  core_instance_count               = 1\n  log_uri                           = \"\"\n  applications                      = [\"\"]\n  termination_protection            = true|false\n  keep_job_flow_alive_when_no_steps = true|false\n  ec2_attributes \\{\n    key_name                          = \"\"\n    subnet_id                         = \"\\$\\{aws_subnet.${:2foo}.id}\"\n    additional_master_security_groups = \"\"\n    additional_slave_security_groups  = \"\"\n    emr_managed_master_security_group = \"\\$\\{aws_security_group.${3:bar}.id}\"\n    emr_managed_slave_security_group  = \"\\$\\{aws_security_group.${4:baz}.id}\"\n    instance_profile                  = \"\\$\\{aws_iam_instance_profile.${5:qux}.arn}\"\n    service_access_security_group     = \"\"\n  }\n  bootstrap_action \\{\n    name = \"\"\n    path = \"\"\n    args = [\"\"]\n  }\n  configurations                    = \"\"\n  autoscaling_role                  = \"\"\n  visible_to_all_users              = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Elastic MapReduce Cluster"
  },
  "srAwsEMRInstanceGroup": {
    "prefix": "srAwsEMRInstanceGroup",
    "body": "resource \"aws_emr_instance_group\" \"${1:name}\" {\n  cluster_id    = \"\\$\\{aws_emr_cluster.${2:foo}.id}\"\n  instance_type = \"\"\n}",
    "description": "Elastic MarReduce Cluster Instance Group"
  },
  "frAwsEMRInstanceGroup": {
    "prefix": "frAwsEMRInstanceGroup",
    "body": "resource \"aws_emr_instance_group\" \"${1:name}\" {\n  cluster_id             = \"\\$\\{aws_emr_cluster.${2:foo}.id}\"\n  instance_type          = \"\"\n  instance_count         = 1\n  name                   = \"\"\n  ebs_optimized          = true|false\n  ebs_config \\{\n    iops                 = 1\n    size                 = 1\n    type                 = \"\"\n    volumes_per_instance = 1\n  }\n}",
    "description": "Elastic MarReduce Cluster Instance Group"
  },
  "srAwsEbsSnapshot": {
    "prefix": "srAwsEbsSnapshot",
    "body": "resource \"aws_ebs_snapshot\" \"${1:name}\" {\n  volume_id = \"\\$\\{aws_ebs_volume.${2:foo}.id}\"\n}",
    "description": "EBS volume snapshot"
  },
  "frAwsEbsSnapshot": {
    "prefix": "frAwsEbsSnapshot",
    "body": "resource \"aws_ebs_snapshot\" \"${1:name}\" {\n  volume_id   = \"\\$\\{aws_ebs_volume.${2:foo}.id}\"\n  description = \"\"\n}",
    "description": "EBS volume snapshot"
  },
  "srAwsEbsVolume": {
    "prefix": "srAwsEbsVolume",
    "body": "resource \"aws_ebs_volume\" \"${1:name}\" {\n  availability_zone = \"${2:foo}\"\n  size              = 40 # Either this or snapshot_id required\n  snapshot_id       = \"\" # Either this or size is required\n}",
    "description": "EBS volume"
  },
  "frAwsEbsVolume": {
    "prefix": "frAwsEbsVolume",
    "body": "resource \"aws_ebs_volume\" \"${1:name}\" {\n  availability_zone = \"${2:foo}\"\n  encrypted         = true|false\n  iops              = 1\n  kms_key_id        = \"\"\n  size              = 40 # Either this or snapshot_id required\n  snapshot_id       = \"\" # Either this or size is required\n  type              = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "EBS volume"
  },
  "srAwsEcrRepository": {
    "prefix": "srAwsEcrRepository",
    "body": "resource \"aws_ecr_repository\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Elastic Container Registry Repository"
  },
  "frAwsEcrRepository": {
    "prefix": "frAwsEcrRepository",
    "body": "resource \"aws_ecr_repository\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Elastic Container Registry Repository"
  },
  "srAwsEcrRepositoryPolicy": {
    "prefix": "srAwsEcrRepositoryPolicy",
    "body": "resource \"aws_ecr_repository_policy\" \"${1:name}\" {\n  repository = \"${2:foo}\"\n  policy     = \"${3:bar}\"\n}",
    "description": "Elastic Container Registry Repo Policy"
  },
  "frAwsEcrRepositoryPolicy": {
    "prefix": "frAwsEcrRepositoryPolicy",
    "body": "resource \"aws_ecr_repository_policy\" \"${1:name}\" {\n  repository  = \"${2:foo}\"\n  policy      = \"${3:bar}\"\n}",
    "description": "Elastic Container Registry Repo Policy"
  },
  "srAwsEcsCluster": {
    "prefix": "srAwsEcsCluster",
    "body": "resource \"aws_ecs_cluster\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "ECS cluster"
  },
  "frAwsEcsCluster": {
    "prefix": "frAwsEcsCluster",
    "body": "resource \"aws_ecs_cluster\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "ECS cluster"
  },
  "srAwsEcsService": {
    "prefix": "srAwsEcsService",
    "body": "resource \"aws_ecs_service\" \"${1:name}\" {\n  depends_on      = [\"aws_iam_role_policy.${2:foo}\"]\n  name            = \"${1}\"\n  task_definition = \"\\$\\{aws_ecs_task_definition.${3:bar}.arn}\"\n}",
    "description": "ECS service"
  },
  "frAwsEcsService": {
    "prefix": "frAwsEcsService",
    "body": "resource \"aws_ecs_service\" \"${1:name}\" {\n  depends_on                         = [\"aws_iam_role_policy.${2:foo}\"]\n  name                               = \"${1}\"\n  task_definition                    = \"\\$\\{aws_ecs_task_definition.${3:bar}.arn}\"\n  cluster                            = \"\\$\\{aws_ecs_cluster.${4:baz}.id}\"\n  desired_count                      = 1\n  iam_role                           = \"\\$\\{aws_iam_role.${5:qux}.arn}\"\n  deployment_maximum_percent         = 1\n  deployment_minimum_healthy_percent = 1\n  load_balancer \\{\n    elb_name         = \"\\$\\{aws_elb.${6:quz}.name}\"\n    target_group_arn = \"\"\n    container_name   = \"\"\n    container_port   = 1\n  }\n  placement_strategy \\{\n    type  = \"\"\n    field = \"\"\n  }\n  placement_constraints \\{\n    type       = \"\"\n    expression = \"\"\n  }\n}",
    "description": "ECS service"
  },
  "srAwsEcsTaskDefinition": {
    "prefix": "srAwsEcsTaskDefinition",
    "body": "resource \"aws_ecs_task_definition\" \"${1:name}\" {\n  family                = \"${1}\"\n  container_definitions = \"\\$\\{file(\"task-definitions/service.json\")}\"\n}",
    "description": "ECS Task Definition"
  },
  "frAwsEcsTaskDefinition": {
    "prefix": "frAwsEcsTaskDefinition",
    "body": "resource \"aws_ecs_task_definition\" \"${1:name}\" {\n  family                = \"${1}\"\n  container_definitions = \"\\$\\{file(\"task-definitions/service.json\")}\"\n  task_role_arn         = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  network_mode          = \"\"\n  volume \\{\n    name      = \"\"\n    host_path = \"\"\n  }\n  placement_constraints \\{\n    type       = \"\"\n    expression = \"\"\n  }\n}",
    "description": "ECS Task Definition"
  },
  "srAwsEfsFileSystema": {
    "prefix": "srAwsEfsFileSystema",
    "body": "resource \"aws_efs_file_system\" \"${1:name}\" {\n}",
    "description": "Elastic File System"
  },
  "frAwsEfsFileSystema": {
    "prefix": "frAwsEfsFileSystema",
    "body": "resource \"aws_efs_file_system\" \"${1:name}\" {\n  creation_token   = \"${1}\"\n  #reference_name   = \"\" # Deprecated.\n  performance_mode = \"generalPurpose\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Elastic File System"
  },
  "srAwsEfsMountTarget": {
    "prefix": "srAwsEfsMountTarget",
    "body": "resource \"aws_efs_mount_target\" \"${1:name}\" {\n  file_system_id = \"\\$\\{aws_efs_file_system.${2:foo}.id}\"\n  subnet_id      = \"\\$\\{aws_subnet.${3:bar}.id}\"\n}",
    "description": "Elastic File System Mount Target"
  },
  "frAwsEfsMountTarget": {
    "prefix": "frAwsEfsMountTarget",
    "body": "resource \"aws_efs_mount_target\" \"${1:name}\" {\n  file_system_id  = \"\\$\\{aws_efs_file_system.${2:foo}.id}\"\n  subnet_id       = \"\\$\\{aws_subnet.${3:bar}.id}\"\n  ip_address      = \"\"\n  security_groups = [\"\\$\\{aws_security_group.${4:baz}.id}\"]\n}",
    "description": "Elastic File System Mount Target"
  },
  "srAwsEgressOnlyInternetGateway": {
    "prefix": "srAwsEgressOnlyInternetGateway",
    "body": "resource \"aws_egress_only_internet_gateway\" \"${1:name}\" {\n  vpc_id = \"\\$\\{aws_vpc.${2:foo}.id}\"\n}",
    "description": "IPv6 Egress-only Internet Gateway"
  },
  "frAwsEgressOnlyInternetGateway": {
    "prefix": "frAwsEgressOnlyInternetGateway",
    "body": "resource \"aws_egress_only_internet_gateway\" \"${1:name}\" {\n  vpc_id = \"\\$\\{aws_vpc.${2:foo}.id}\"\n}",
    "description": "IPv6 Egress-only Internet Gateway"
  },
  "srAwsEip": {
    "prefix": "srAwsEip",
    "body": "resource \"aws_eip\" \"${1:name}\" {\n}",
    "description": "Elastic IP"
  },
  "frAwsEip": {
    "prefix": "frAwsEip",
    "body": "resource \"aws_eip\" \"${1:name}\" {\n  vpc                       = true|false\n  instance                  = \"\\$\\{aws_instance.${2:foo}.id}\"\n  network_interface         = \"\"\n  associate_with_private_ip = \"${3:bar}\"\n}",
    "description": "Elastic IP"
  },
  "srAwsEipAssociation": {
    "prefix": "srAwsEipAssociation",
    "body": "resource \"aws_eip_association\" \"${1:name}\" {\n}",
    "description": "EIP Association"
  },
  "frAwsEipAssociation": {
    "prefix": "frAwsEipAssociation",
    "body": "resource \"aws_eip_association\" \"${1:name}\" {\n  allocation_id        = \"\\$\\{aws_eip.${2:foo}.id}\"\n  allow_reassociation  = true|false\n  instance_id          = \"\\$\\{aws_instance.${3:bar}.id}\"\n  network_interface_id = \"\"\n  private_ip_address   = \"\"\n  public_ip            = \"\"\n}",
    "description": "EIP Association"
  },
  "srAwsElasticBeanstalkApplication": {
    "prefix": "srAwsElasticBeanstalkApplication",
    "body": "resource \"aws_elastic_beanstalk_application\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Elastic Beanstalk Application"
  },
  "frAwsElasticBeanstalkApplication": {
    "prefix": "frAwsElasticBeanstalkApplication",
    "body": "resource \"aws_elastic_beanstalk_application\" \"${1:name}\" {\n  name        = \"${1}\"\n  description = \"\"\n}",
    "description": "Elastic Beanstalk Application"
  },
  "srAwsElasticBeanstalkApplicationVersion": {
    "prefix": "srAwsElasticBeanstalkApplicationVersion",
    "body": "resource \"aws_elastic_beanstalk_application_version\" \"${1:name}\" {\n  name        = \"${1}\"\n  application = \"${2:foo}\"\n  bucket      = \"\\$\\{aws_s3_bucket.${3:bar}.id}\"\n  key         = \"\\$\\{aws_s3_bucket_object.${4:baz}.id}\"\n}",
    "description": "Elastic Beanstalk Application Version"
  },
  "frAwsElasticBeanstalkApplicationVersion": {
    "prefix": "frAwsElasticBeanstalkApplicationVersion",
    "body": "resource \"aws_elastic_beanstalk_application_version\" \"${1:name}\" {\n  name         = \"${1}\"\n  application  = \"${2:foo}\"\n  bucket       = \"\\$\\{aws_s3_bucket.${3:bar}.id}\"\n  key          = \"\\$\\{aws_s3_bucket_object.${4:baz}.id}\"\n  description  = \"\"\n  force_delete = true|false\n}",
    "description": "Elastic Beanstalk Application Version"
  },
  "srAwsElasticBeanstalkConfigurationTemplate": {
    "prefix": "srAwsElasticBeanstalkConfigurationTemplate",
    "body": "resource \"aws_elastic_beanstalk_configuration_template\" \"${1:name}\" {\n  name        = \"${1}\"\n  application = \"\\$\\{aws_elastic_beanstalk_application.${2:foo}.name}\"\n}",
    "description": "Elastic Beanstalk Configuration Template"
  },
  "frAwsElasticBeanstalkConfigurationTemplate": {
    "prefix": "frAwsElasticBeanstalkConfigurationTemplate",
    "body": "resource \"aws_elastic_beanstalk_configuration_template\" \"${1:name}\" {\n  name           = \"${1}\"\n  application    = \"\\$\\{aws_elastic_beanstalk_application.${2:foo}.name}\"\n  description    = \"\"\n  environment_id = \"\"\n  setting \\{\n    namespace = \"\"\n    name      = \"\"\n    value     = \"\"\n    resource  = \"\"\n  }\n  solution_stack_name = \"\"\n}",
    "description": "Elastic Beanstalk Configuration Template"
  },
  "srAwsElasticBeanstalkEnvironment": {
    "prefix": "srAwsElasticBeanstalkEnvironment",
    "body": "resource \"aws_elastic_beanstalk_environment\" \"${1:name}\" {\n  name        = \"${1}\"\n  application = \"\\$\\{aws_elastic_beanstalk_application.${2:foo}.name}\"\n}",
    "description": "Elastic Beanstalk Environment"
  },
  "frAwsElasticBeanstalkEnvironment": {
    "prefix": "frAwsElasticBeanstalkEnvironment",
    "body": "resource \"aws_elastic_beanstalk_environment\" \"${1:name}\" {\n  name                   = \"${1}\"\n  application            = \"\\$\\{aws_elastic_beanstalk_application.${2:foo}.name}\"\n  description            = \"\"\n  version_label          = \"\"\n  cname_prefix           = \"\"\n  tier                   = \"\"\n  setting \\{\n    namespace = \"\"\n    name      = \"\"\n    value     = \"\"\n    resource  = \"\"\n  }\n  solution_stack_name    = \"\"\n  template_name          = \"\"\n  wait_for_ready_timeout = \"\"\n  poll_interval          = \"\"\n  tags \\{ # Note: cannot be updated once initialized.\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Elastic Beanstalk Environment"
  },
  "srAwsElasticSearchDomain": {
    "prefix": "srAwsElasticSearchDomain",
    "body": "resource \"aws_elastic_search_domain\" \"${1:name}\" {\n  domain_name = \"${1}\"\n}",
    "description": "Elasticsearch Domain"
  },
  "frAwsElasticSearchDomain": {
    "prefix": "frAwsElasticSearchDomain",
    "body": "resource \"aws_elastic_search_domain\" \"${1:name}\" {\n  domain_name           = \"${1}\"\n  access_policies       = \"\"\n  advanced_options \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n  ebs_options \\{\n    ebs_enabled = true|false\n    iops        = 1\n    volume_size = 1\n    volume_type = \"\"\n  }\n  cluster_config \\{\n    dedicated_master_count   = 1\n    dedicated_master_enabled = true|false\n    dedicated_master_type    = \"\"\n    instance_count           = 1\n    instance_type            = \"\"\n    zone_awareness_enabled   = true|false\n  }\n  snapshot_options \\{\n    automated_snapshot_start_hour = 1\n  }\n  elasticsearch_version = \"\"\n}",
    "description": "Elasticsearch Domain"
  },
  "srAwsElasticSearchDomainPolicy": {
    "prefix": "srAwsElasticSearchDomainPolicy",
    "body": "resource \"aws_elastic_search_domain_policy\" \"${1:name}\" {\n  domain_name     = \"\\$\\{aws_elasticsearch_domain.${2:foo}.domain_name}\"\n  access_policies = \"\"\n}",
    "description": "Elasticsearch Domain Policy"
  },
  "frAwsElasticSearchDomainPolicy": {
    "prefix": "frAwsElasticSearchDomainPolicy",
    "body": "resource \"aws_elastic_search_domain_policy\" \"${1:name}\" {\n  domain_name     = \"\\$\\{aws_elasticsearch_domain.${2:foo}.domain_name}\"\n  access_policies = \"\"\n}",
    "description": "Elasticsearch Domain Policy"
  },
  "srAwsElasticTranscoderPipeline": {
    "prefix": "srAwsElasticTranscoderPipeline",
    "body": "resource \"aws_elastic_transcoder_pipeline\" \"${1:name}\" {\n  input_bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  role         = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n}",
    "description": "Elastic Transcoder pipeline"
  },
  "frAwsElasticTranscoderPipeline": {
    "prefix": "frAwsElasticTranscoderPipeline",
    "body": "resource \"aws_elastic_transcoder_pipeline\" \"${1:name}\" {\n  input_bucket                 = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  role                         = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n  aws_kms_key_arn              = \"\"\n  content_config \\{\n    bucket        = \"\\$\\{aws_s3_bucket.${4:baz}.bucket}\"\n    storage_class = \"\"\n  }\n  content_config_permissions \\{\n    access       = [\"\"]\n    grantee      = \"\"\n    grantee_type = \"\"\n  }\n  name                         = \"\"\n  notifications \\{\n    completed   = \"\"\n    error       = \"\"\n    progressing = \"\"\n    warning     = \"\"\n  }\n  output_bucket                = \"\"\n  thumbnail_config \\{\n    bucket        = \"\\$\\{aws_s3_bucket.${5:qux}.bucket}\"\n    storage_class = \"\"\n  }\n  thumbnail_config_permissions \\{\n    access       = [\"\"]\n    grantee      = \"\"\n    grantee_type = \"\"\n  }\n}",
    "description": "Elastic Transcoder pipeline"
  },
  "srAwsElasticTranscoderPreset": {
    "prefix": "srAwsElasticTranscoderPreset",
    "body": "resource \"aws_elastic_transcoder_preset\" \"${1:name}\" {\n  container = \"\"\n}",
    "description": "Elastic Transcoder Pipeline preset"
  },
  "frAwsElasticTranscoderPreset": {
    "prefix": "frAwsElasticTranscoderPreset",
    "body": "resource \"aws_elastic_transcoder_preset\" \"${1:name}\" {\n  container           = \"\"\n  audio \\{\n    audio_packing_mode = \"\"\n    bit_rate           = \"\"\n    channels           = \"\"\n    codec              = \"\"\n    sample_rate        = \"\"\n  }\n  audio_codec_options \\{\n    bit_depth = \"\"\n    bit_order = \"\"\n    profile   = \"\"\n    signed    = \"\"\n  }\n  description         = \"${1}\"\n  name                = \"\"\n  thumbnails \\{\n    aspect_ratio   = \"\"\n    format         = \"\"\n    interval       = \"\"\n    max_height     = \"\"\n    max_width      = \"\"\n    padding_policy = \"\"\n    resolution:    = \"\"\n    sizing_policy  = \"\"\n  }\n  type                = \"\"\n  video \\{\n    aspect_ratio         = \"\"\n    bit_rate             = \"\"\n    codec                = \"\"\n    display_aspect_ratio = \"\"\n    fixed_gop            = \"\"\n    frame_rate           = \"\"\n    keyframes_max_dist   = \"\"\n    max_frame_rate       = \"\"\n    max_height           = \"\"\n    max_width            = \"\"\n    padding_policy       = \"\"\n    resolution           = \"\"\n    sizing_policy        = \"\"\n  }\n  video_watermarks \\{\n    horizontal_align  = \"\"\n    horizontal_offset = \"\"\n    id                = \"\"\n    max_height        = \"\"\n    max_width         = \"\"\n    opacity           = \"\"\n    sizing_policy     = \"\"\n    target            = \"\"\n    vertical_align    = \"\"\n    vertical_offset   = \"\"\n  }\n  video_codec_options \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Elastic Transcoder Pipeline preset"
  },
  "srAwsElasticacheCluster": {
    "prefix": "srAwsElasticacheCluster",
    "body": "resource \"aws_elasticache_cluster\" \"${1:name}\" {\n  cluster_id           = \"${1}\"\n  engine               = \"${2:foo}\"\n  node_type            = \"${3:bar}\"\n  num_cache_nodes      = 1\n  port                 = 11211\n}",
    "description": "ElastiCache Cluster"
  },
  "frAwsElasticacheCluster": {
    "prefix": "frAwsElasticacheCluster",
    "body": "resource \"aws_elasticache_cluster\" \"${1:name}\" {\n  cluster_id               = \"${1}\"\n  engine                   = \"${2:foo}\"\n  engine_version           = \"\"\n  node_type                = \"${3:bar}\"\n  parameter_group_name     = \"${4:baz}\"\n  subnet_group_name        = \"\"\n  port                     = 11211\n  num_cache_nodes          = 1\n  az_mode                  = \"\"\n  availability_zones       = [\"\"]\n  subnet_group_name        = \"\"   # VPC Only\n  security_group_names     = [\"\"] # EC2 Classic Only\n  security_group_ids       = [\"\"] # VPC Only (one element only).\n  snapshot_arns            = [\"\"]\n  snapshot_window          = \"05:00-09:00\"\n  snapshot_name            = \"\"\n  maintenance_window       = \"sun:05:00-sun:09:00\" # Minimum 60 mins range.\n  notification_topic_arn   = \"\"\n  snapshot_retention_limit = 15\n  apply_immediately        = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "ElastiCache Cluster"
  },
  "srAwsElasticacheParameterGroup": {
    "prefix": "srAwsElasticacheParameterGroup",
    "body": "resource \"aws_elasticache_parameter_group\" \"${1:name}\" {\n  name   = \"${1}\"\n  family = \"\"\n}",
    "description": "ElastiCache Parameter Group"
  },
  "frAwsElasticacheParameterGroup": {
    "prefix": "frAwsElasticacheParameterGroup",
    "body": "resource \"aws_elasticache_parameter_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  family      = \"\"\n  description = \"\"\n  parameter \\{\n    name  = \"\"\n    value = \"\"\n  }\n}",
    "description": "ElastiCache Parameter Group"
  },
  "srAwsElasticacheReplicationGroup": {
    "prefix": "srAwsElasticacheReplicationGroup",
    "body": "resource \"aws_elasticache_replication_group\" \"${1:name}\" {\n  replication_group_id          = \"${2:foo}\"\n  replication_group_description = \"${3:bar}\"\n  node_type                     = \"\"\n  number_cache_clusters         = 1\n  port                 = 11211\n}",
    "description": "ElastiCache Replication Group"
  },
  "frAwsElasticacheReplicationGroup": {
    "prefix": "frAwsElasticacheReplicationGroup",
    "body": "resource \"aws_elasticache_replication_group\" \"${1:name}\" {\n  replication_group_id          = \"${2:foo}\"\n  replication_group_description = \"${3:bar}\"\n  node_type                     = \"\"\n  number_cache_clusters         = 1\n  availability_zones            = [\"\"]\n  engine                        = \"\"\n  engine_version                = \"\"\n  parameter_group_name          = \"\"\n  subnet_group_name             = \"\"\n  security_group_names          = [\"\"] # EC2 Classic Only\n  security_group_ids            = [\"\"] # VPC Only\n  snapshot_arns                 = [\"\"] # One element only.\n  snapshot_name                 = \"\"\n  snapshot_window               = \"05:00-09:00\"\n  maintenance_window            = \"sun:05:00-sun:09:00\" # Minimum 60 mins range.\n  port                          = 11211\n  notification_topic_arn        = \"\"\n  snapshot_retention_limit      = 15\n  apply_immediately             = true|false\n  automatic_failover_enabled    = true|false\n  auto_minor_version_upgrade    = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "ElastiCache Replication Group"
  },
  "srAwsElasticacheSecurityGroup": {
    "prefix": "srAwsElasticacheSecurityGroup",
    "body": "resource \"aws_elasticache_security_group\" \"${1:name}\" {\n  name                 = \"${1}\"\n  security_group_names = [\"\\$\\{aws_security_group.${2:foo}.name}\"]\n}",
    "description": "ElastiCache Security Group"
  },
  "frAwsElasticacheSecurityGroup": {
    "prefix": "frAwsElasticacheSecurityGroup",
    "body": "resource \"aws_elasticache_security_group\" \"${1:name}\" {\n  name                 = \"${1}\"\n  security_group_names = [\"\\$\\{aws_security_group.${2:foo}.name}\"]\n  description          = \"\"\n}",
    "description": "ElastiCache Security Group"
  },
  "srAwsElasticacheSubnetGroup": {
    "prefix": "srAwsElasticacheSubnetGroup",
    "body": "resource \"aws_elasticache_subnet_group\" \"${1:name}\" {\n  name       = \"${1}\"\n  subnet_ids = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n}",
    "description": "ElastiCache Subnet Group"
  },
  "frAwsElasticacheSubnetGroup": {
    "prefix": "frAwsElasticacheSubnetGroup",
    "body": "resource \"aws_elasticache_subnet_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  subnet_ids = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n  description = \"\"\n}",
    "description": "ElastiCache Subnet Group"
  },
  "srAwsElb": {
    "prefix": "srAwsElb",
    "body": "resource \"aws_elb\" \"${1:name}\" {\n  listener \\{\n    instance_port      = 1\n    instance_protocol  = \"\"\n    lb_port            = 1\n    lb_protocol        = \"\"\n    ssl_certificate_id = \"\"\n  }\n  subnets = [\"\"] # Required for VPC ELB\n}",
    "description": "Elastic Load Balancer"
  },
  "frAwsElb": {
    "prefix": "frAwsElb",
    "body": "resource \"aws_elb\" \"${1:name}\" {\n  listener \\{\n    instance_port      = 1\n    instance_protocol  = \"\"\n    lb_port            = 1\n    lb_protocol        = \"\"\n    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"\n  }\n  name                        = \"${1}\" # Conflicts with name_prefix\n  name_prefix                 = \"\"\n  internal                    = true|false\n  cross_zone_load_balancing   = true|false\n  availability_zones          = [\"\"]\n  #instances                   = [\"\\$\\{aws_instance.nono.id}\"] # Provided as attachment below\n  security_groups             = [\"\"] # VPC Only\n  source_security_group       = \"\"\n  subnets                     = [\"\"] # Required for VPC ELB\n  idle_timeout                = 60\n  connection_draining         = true|false\n  connection_draining_timeout = 300\n  access_logs \\{\n    interval      = 60\n    bucket        = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n    bucket_prefix = \"\"\n    enabled       = true|false\n  }\n  health_check \\{\n    healthy_threshold   = 1\n    unhealthy_threshold = 1\n    target              = \"\"\n    interval            = 1\n    timeout             = 1\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}\nresource \"aws_elb_attachment\" \"${1}\" \\{\n  elb      = \"\\$\\{aws_elb.${1}.name}\"\n  instance = \"\\$\\{aws_instance.${3:bar}.id}\"\n}",
    "description": "Elastic Load Balancer"
  },
  "srAwsElbAttachment": {
    "prefix": "srAwsElbAttachment",
    "body": "resource \"aws_elb_attachment\" \"${1:name}\" {\n  elb      = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance = \"\\$\\{aws_instance.${3:bar}.id}\"\n}",
    "description": "Elastic Load Balancer instance Attachment"
  },
  "frAwsElbAttachment": {
    "prefix": "frAwsElbAttachment",
    "body": "resource \"aws_elb_attachment\" \"${1:name}\" {\n  elb      = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance = \"\\$\\{aws_instance.${3:bar}.id}\"\n}",
    "description": "Elastic Load Balancer instance Attachment"
  },
  "srAwsFlowLog": {
    "prefix": "srAwsFlowLog",
    "body": "resource \"aws_flow_log\" \"${1:name}\" {\n  iam_role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  log_group_name = \"\\$\\{aws_cloudwatch_log_group.${3:bar}.name}\"\n  traffic_type   = \"ACCEPT\"|\"REJECT\"|\"ALL\"\n}",
    "description": "Network Flow Log Capture"
  },
  "frAwsFlowLog": {
    "prefix": "frAwsFlowLog",
    "body": "resource \"aws_flow_log\" \"${1:name}\" {\n  iam_role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  log_group_name = \"\\$\\{aws_cloudwatch_log_group.${3:bar}.name}\"\n  traffic_type   = \"ACCEPT\"|\"REJECT\"|\"ALL\"\n  vpc_id         = \"\\$\\{aws_vpc.${4:baz}.id}\"\n  subnet_id      = \"\"\n  eni_id         = \"\"\n}",
    "description": "Network Flow Log Capture"
  },
  "srAwsGlacierVault": {
    "prefix": "srAwsGlacierVault",
    "body": "resource \"aws_glacier_vault\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Glacier Vault"
  },
  "frAwsGlacierVault": {
    "prefix": "frAwsGlacierVault",
    "body": "resource \"aws_glacier_vault\" \"${1:name}\" {\n  name          = \"${1}\"\n  access_policy = \"\"\n  notification \\{\n    events    = [\"ArchiveRetrievalCompleted\", \"InventoryRetrievalCompleted\"]\n    sns_topic = \"\\$\\{aws_sns_topic.${{2:foo}.arn}\"\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Glacier Vault"
  },
  "srAwsIAMServerCertificate": {
    "prefix": "srAwsIAMServerCertificate",
    "body": "resource \"aws_iam_server_certificate\" \"${1:name}\" {\n  certificate_body = \"\\$\\{file(\"self-ca-cert.pem\")}\" # UNIX line breaks, only one cert.\n  private_key      = \"\\$\\{file(\"test-key.pem\")}\"     # UNIX line breaks\n}",
    "description": "IAM Server Certificates upload"
  },
  "frAwsIAMServerCertificate": {
    "prefix": "frAwsIAMServerCertificate",
    "body": "resource \"aws_iam_server_certificate\" \"${1:name}\" {\n  certificate_body  = \"\\$\\{file(\"self-ca-cert.pem\")}\" # UNIX line breaks, only one cert.\n  private_key       = \"\\$\\{file(\"test-key.pem\")}\"     # UNIX line breaks\n  certificate_chain = \"\"\n  path              = \"\"\n  name              = \"${1}\" # Conflicts with name_prefix\n  name_prefix       = \"\"\n  arn               = \"\"\n}",
    "description": "IAM Server Certificate upload"
  },
  "srAwsIamAccessKey": {
    "prefix": "srAwsIamAccessKey",
    "body": "resource \"aws_iam_access_key\" \"${1:name}\" {\n  user = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n}",
    "description": "IAM Access Key"
  },
  "frAwsIamAccessKey": {
    "prefix": "frAwsIamAccessKey",
    "body": "resource \"aws_iam_access_key\" \"${1:name}\" {\n  user    = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n  pgp_key = \"keybase:${2:foo}\"\n}",
    "description": "IAM Access Key"
  },
  "srAwsIamAccountAlias": {
    "prefix": "srAwsIamAccountAlias",
    "body": "resource \"aws_iam_account_alias\" \"${1:name}\" {\n  account_alias = \"${1}\"\n}",
    "description": "Account Alias"
  },
  "frAwsIamAccountAlias": {
    "prefix": "frAwsIamAccountAlias",
    "body": "resource \"aws_iam_account_alias\" \"${1:name}\" {\n  account_alias = \"${1}\"\n}",
    "description": "Account Alias"
  },
  "srAwsIamAccountPasswordPolicy": {
    "prefix": "srAwsIamAccountPasswordPolicy",
    "body": "resource \"aws_iam_account_password_policy\" \"${1:name}\" {\n}",
    "description": "Aws IAM Account Password Policy"
  },
  "frAwsIamAccountPasswordPolicy": {
    "prefix": "frAwsIamAccountPasswordPolicy",
    "body": "resource \"aws_iam_account_password_policy\" \"${1:name}\" {\n  allow_users_to_change_password = true|false\n  hard_expiry                    = true|false\n  max_password_age               = 1\n  minimum_password_length        = 1\n  password_reuse_prevention      = 1\n  require_lowercase_characters   = true|false\n  require_numbers                = true|false\n  require_symbols                = true|false\n  require_uppercase_characters   = true|false\n}",
    "description": "Aws IAM Account Password Policy"
  },
  "srAwsIamGroup": {
    "prefix": "srAwsIamGroup",
    "body": "resource \"aws_iam_group\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "IAM Group"
  },
  "frAwsIamGroup": {
    "prefix": "frAwsIamGroup",
    "body": "resource \"aws_iam_group\" \"${1:name}\" {\n  name = \"${1}\"\n  path = \"\"\n}",
    "description": "IAM Group"
  },
  "srAwsIamGroupMembership": {
    "prefix": "srAwsIamGroupMembership",
    "body": "resource \"aws_iam_group_membership\" \"${1:name}\" {\n  name  = \"${1}\"\n  users = [\"\\$\\{aws_iam_user.${2:foo}.name}\"]\n  group = \"\\$\\{aws_iam_group.${3:bar}.name}\"\n}",
    "description": "IAM Group Membership"
  },
  "frAwsIamGroupMembership": {
    "prefix": "frAwsIamGroupMembership",
    "body": "resource \"aws_iam_group_membership\" \"${1:name}\" {\n  name  = \"${1}\"\n  users = [\"\\$\\{aws_iam_user.${2:foo}.name}\"]\n  group = \"\\$\\{aws_iam_group.${3:bar}.name}\"\n}",
    "description": "IAM Group Membership"
  },
  "srAwsIamGroupPolicy": {
    "prefix": "srAwsIamGroupPolicy",
    "body": "resource \"aws_iam_group_policy\" \"${1:name}\" {\n  policy = \"\"\n  group  = \"\\$\\{aws_iam_group.${2:foo}.id}\"\n}",
    "description": "IAM Group Policy"
  },
  "frAwsIamGroupPolicy": {
    "prefix": "frAwsIamGroupPolicy",
    "body": "resource \"aws_iam_group_policy\" \"${1:name}\" {\n  policy      = \"\"\n  group       = \"\\$\\{aws_iam_group.${2:foo}.id}\"\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n}",
    "description": "IAM Group Policy"
  },
  "srAwsIamGroupPolicyAttachment": {
    "prefix": "srAwsIamGroupPolicyAttachment",
    "body": "resource \"aws_iam_group_policy_attachment\" \"${1:name}\" {\n  group      = \"\\$\\{aws_iam_group.${2:foo}.id}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${3:bar}.arn}\"\n}",
    "description": "Attaches IAM Policy to IAM Group"
  },
  "frAwsIamGroupPolicyAttachment": {
    "prefix": "frAwsIamGroupPolicyAttachment",
    "body": "resource \"aws_iam_group_policy_attachment\" \"${1:name}\" {\n  group      = \"\\$\\{aws_iam_group.${2:foo}.id}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${3:bar}.arn}\"\n}",
    "description": "Attaches IAM Policy to IAM Group"
  },
  "srAwsIamInstanceProfile": {
    "prefix": "srAwsIamInstanceProfile",
    "body": "resource \"aws_iam_instance_profile\" \"${1:name}\" {\n  role = \"\"\n}",
    "description": "IAM instance Profile"
  },
  "frAwsIamInstanceProfile": {
    "prefix": "frAwsIamInstanceProfile",
    "body": "resource \"aws_iam_instance_profile\" \"${1:name}\" {\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n  path        = \"/\"\n  roles       = [\"\"] # Deprecated\n  role        = \"\"\n}",
    "description": "IAM instance Profile"
  },
  "srAwsIamPolicy": {
    "prefix": "srAwsIamPolicy",
    "body": "resource \"aws_iam_policy\" \"${1:name}\" {\n  policy = \"\\$\\{file(\"policy.json\")}\"\n}",
    "description": "IAM policy"
  },
  "frAwsIamPolicy": {
    "prefix": "frAwsIamPolicy",
    "body": "resource \"aws_iam_policy\" \"${1:name}\" {\n  policy      = \"\\$\\{file(\"policy.json\")}\"\n  description = \"\"\n  path        = \"/\"\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n}",
    "description": "IAM policy"
  },
  "srAwsIamPolicyAttachment": {
    "prefix": "srAwsIamPolicyAttachment",
    "body": "resource \"aws_iam_policy_attachment\" \"${1:name}\" {\n  name       = \"${1}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${2:foo}.arn}\"\n}",
    "description": "Managed IAM Policy Attachment"
  },
  "frAwsIamPolicyAttachment": {
    "prefix": "frAwsIamPolicyAttachment",
    "body": "resource \"aws_iam_policy_attachment\" \"${1:name}\" {\n  name       = \"${1}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${2:foo}.arn}\"\n  users      = [\"\\$\\{aws_iam_user.${3:user}.name}\"]\n  roles      = [\"\\$\\{aws_iam_role.${4:role}.name}\"]\n  groups     = [\"\\$\\{aws_iam_group.${5:group}.name}\"]\n}",
    "description": "Managed IAM Policy Attachment"
  },
  "srAwsIamRole": {
    "prefix": "srAwsIamRole",
    "body": "resource \"aws_iam_role\" \"${1:name}\" {\n  assume_role_policy = \"\\$\\{data.aws_iam_policy_document.${2:foo}.json}\"\n}",
    "description": "IAM Role"
  },
  "frAwsIamRole": {
    "prefix": "frAwsIamRole",
    "body": "resource \"aws_iam_role\" \"${1:name}\" {\n  assume_role_policy = \"\\$\\{data.aws_iam_policy_document.${2:foo}.json}\"\n  name               = \"${1}\" # Conflicts with name_prefix\n  name_prefix        = \"\"\n  path               = \"/\"\n}",
    "description": "IAM Role"
  },
  "srAwsIamRolePolicy": {
    "prefix": "srAwsIamRolePolicy",
    "body": "resource \"aws_iam_role_policy\" \"${1:name}\" {\n  policy = \"\\$\\{file(\"policy.json\")}\"\n  role   = \"\\$\\{aws_iam_role.${2:foo}.id}\"\n}",
    "description": "IAM Role Policy"
  },
  "frAwsIamRolePolicy": {
    "prefix": "frAwsIamRolePolicy",
    "body": "resource \"aws_iam_role_policy\" \"${1:name}\" {\n  policy      = \"\\$\\{file(\"policy.json\")}\"\n  role        = \"\\$\\{aws_iam_role.${2:foo}.id}\"\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n}",
    "description": "IAM Role Policy"
  },
  "srAwsIamRolePolicyAttachment": {
    "prefix": "srAwsIamRolePolicyAttachment",
    "body": "resource \"aws_iam_role_policy_attachment\" \"${1:name}\" {\n  role       = \"\\$\\{aws_iam_role.${2:foo}.name}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${3:bar}.arn}\"\n}",
    "description": "IAM Role Policy Attachment"
  },
  "frAwsIamRolePolicyAttachment": {
    "prefix": "frAwsIamRolePolicyAttachment",
    "body": "resource \"aws_iam_role_policy_attachment\" \"${1:name}\" {\n  role       = \"\\$\\{aws_iam_role.${2:foo}.name}\"\n  policy_arn = \"\\$\\{aws_iam_policy.${3:bar}.arn}\"\n}",
    "description": "IAM Role Policy Attachment"
  },
  "srAwsIamSamlProvider": {
    "prefix": "srAwsIamSamlProvider",
    "body": "resource \"aws_iam_saml_provider\" \"${1:name}\" {\n  name                   = \"${1}\"\n  saml_metadata_document = \"\\$\\{file(\"saml-metadata.xml\")}\"\n}",
    "description": "IAM SAML provider"
  },
  "frAwsIamSamlProvider": {
    "prefix": "frAwsIamSamlProvider",
    "body": "resource \"aws_iam_saml_provider\" \"${1:name}\" {\n  name                   = \"${1}\"\n  saml_metadata_document = \"\\$\\{file(\"saml-metadata.xml\")}\"\n}",
    "description": "IAM SAML provider"
  },
  "srAwsIamUser": {
    "prefix": "srAwsIamUser",
    "body": "resource \"aws_iam_user\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "IAM user"
  },
  "frAwsIamUser": {
    "prefix": "frAwsIamUser",
    "body": "resource \"aws_iam_user\" \"${1:name}\" {\n  name          = \"${1}\"\n  path          = \"/\"\n  force_destroy = true|false\n}",
    "description": "IAM user"
  },
  "srAwsIamUserLoginProfile": {
    "prefix": "srAwsIamUserLoginProfile",
    "body": "resource \"aws_iam_user_login_profile\" \"${1:name}\" {\n  user    = \"${1}\"\n  pgp_key = \"keybase:${2:foo}\"\n}",
    "description": "One time creation of a IAM user login profile"
  },
  "frAwsIamUserLoginProfile": {
    "prefix": "frAwsIamUserLoginProfile",
    "body": "resource \"aws_iam_user_login_profile\" \"${1:name}\" {\n  user                    = \"${1}\"\n  pgp_key                 = \"keybase:${2:foo}\"\n  password_reset_required = true|false\n  password_length         = 1\n}",
    "description": "One time creation of a IAM user login profile"
  },
  "srAwsIamUserPolicy": {
    "prefix": "srAwsIamUserPolicy",
    "body": "resource \"aws_iam_user_policy\" \"${1:name}\" {\n  policy = \"\\$\\{file(\"policy.json\")}\"\n  user   = \"\\$\\{aws_iam_user.${3:bar}.name}\"\n}",
    "description": "IAM User Policy"
  },
  "frAwsIamUserPolicy": {
    "prefix": "frAwsIamUserPolicy",
    "body": "resource \"aws_iam_user_policy\" \"${1:name}\" {\n  policy      = \"\\$\\{file(\"policy.json\")}\"\n  user        = \"\\$\\{aws_iam_user.${3:bar}.name}\"\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n}",
    "description": "IAM User Policy"
  },
  "srAwsIamUserPolicyAttachment": {
    "prefix": "srAwsIamUserPolicyAttachment",
    "body": "resource \"aws_iam_user_policy_attachment\" \"${1:name}\" {\n  user       = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n  policy_arn = \"\\$\\{aws_iam_policy.policy.arn}\"\n}",
    "description": "IAM User Policy Attachment"
  },
  "frAwsIamUserPolicyAttachment": {
    "prefix": "frAwsIamUserPolicyAttachment",
    "body": "resource \"aws_iam_user_policy_attachment\" \"${1:name}\" {\n  user       = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n  policy_arn = \"\\$\\{aws_iam_policy.policy.arn}\"\n}",
    "description": "IAM User Policy Attachment"
  },
  "srAwsIamUserSshKey": {
    "prefix": "srAwsIamUserSshKey",
    "body": "resource \"aws_iam_user_ssh_key\" \"${1:name}\" {\n  username   = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n  public_key = \"ssh-rsa ... user@host\"\n  encoding   = \"SSH\"|\"PEM\"\n}",
    "description": "Upload a public SSH key for an AMI user"
  },
  "frAwsIamUserSshKey": {
    "prefix": "frAwsIamUserSshKey",
    "body": "resource \"aws_iam_user_ssh_key\" \"${1:name}\" {\n  username   = \"\\$\\{aws_iam_user.${2:foo}.name}\"\n  public_key = \"ssh-rsa ... user@host\"\n  encoding   = \"SSH\"|\"PEM\"\n  status     = \"ACTIVE\"\n}",
    "description": "Upload a public SSH key for an AMI user"
  },
  "srAwsInstance": {
    "prefix": "srAwsInstance",
    "body": "resource \"aws_instance\" \"${1:name}\" {\n  ami           = \"\\$\\{data.aws_ami.${2:foo}.id}\"\n  instance_type = \"${3:bar}\"\n}",
    "description": "EC2 instance"
  },
  "frAwsInstance": {
    "prefix": "frAwsInstance",
    "body": "resource \"aws_instance\" \"${1:name}\" {\n  ami                                  = \"\\$\\{data.aws_ami.${2:foo}.id}\"\n  instance_type                        = \"${3:bar}\"\n  associate_public_ip_address          = true|false\n  availability_zone                    = \"\"\n  placement_group                      = \"\"\n  key_name                             = \"\"\n  subnet_id                            = \"\"\n  private_ip                           = \"\"\n  source_dest_check                    = true|false\n  user_data                            = \"\"\n  security_groups                      = [\"\"]\n  vpc_security_group_ids               = [\"\"] # VPC Only\n  ebs_optimized                        = true|false\n  disable_api_termination              = true|false\n  instance_initiated_shutdown_behavior = \"\"\n  monitoring                           = true|false\n  iam_instance_profile                 = \"\"\n  ipv6_address_count                   = 0\n  ipv6_addresses                       = [\"\"]\n  tenancy                              = \"\"\n  ebs_block_device \\{\n    delete_on_termination = true|false\n    device_name           = \"\"\n    encrypted             = true|false\n    iops                  = 1\n    snapshot_id           = \"\"\n    volume_size           = 1\n    volume_type           = \"\"\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n    no_device    = true|false\n  }\n  root_block_device \\{\n    delete_on_termination = true|false\n    iops                  = 1\n    volume_size           = 1\n    volume_type           = \"\"\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "EC2 instance"
  },
  "srAwsInternetGateway": {
    "prefix": "srAwsInternetGateway",
    "body": "# Note: Use depends_on on the component that uses this resource.\nresource \"aws_internet_gateway\" \"${1:name}\" {\n}",
    "description": "VPC Internet Gateway"
  },
  "frAwsInternetGateway": {
    "prefix": "frAwsInternetGateway",
    "body": "# Note: Use depends_on on the component that uses this resource.\nresource \"aws_internet_gateway\" \"${1:name}\" {\n  vpc_id = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "VPC Internet Gateway"
  },
  "srAwsKeyPair": {
    "prefix": "srAwsKeyPair",
    "body": "resource \"aws_key_pair\" \"${1:name}\" {\n  public_key = \"ssh-rsa ... user@host\"\n}",
    "description": "EC2 Key Pair"
  },
  "frAwsKeyPair": {
    "prefix": "frAwsKeyPair",
    "body": "resource \"aws_key_pair\" \"${1:name}\" {\n  public_key      = \"ssh-rsa ... user@host\"\n  key_name        = \"${1}\" # Conflicts with key_name_prefix\n  key_name_prefix = \"\"\n}",
    "description": "EC2 Key Pair"
  },
  "srAwsKinesisFirehoseDeliveryStream": {
    "prefix": "srAwsKinesisFirehoseDeliveryStream",
    "body": "resource \"aws_kinesis_firehose_delivery_stream\" \"${1:name}\" {\n  name             = \"${1}\"\n  destination      = \"s3\"|\"redshift\"|\"elasticsearch\"\n  s3_configuration \\{\n    bucket_arn                  = \"\\$\\{aws_s3_bucket.${2:foo}.arn}\"\n    buffer_size                 = 1\n    buffer_interval             = 1\n    compression_format          = \"\"\n    kms_key_arn                 = \"\"\n    role_arn                    = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n    prefix                      = \"\"\n    cloudwatch_logging_options \\{\n      enabled         = true|false\n      log_group_name  = \"\"\n      log_stream_name = \"\"\n    }\n  }\n}",
    "description": "Kinesis Firehose Devilery Stream"
  },
  "frAwsKinesisFirehoseDeliveryStream": {
    "prefix": "frAwsKinesisFirehoseDeliveryStream",
    "body": "resource \"aws_kinesis_firehose_delivery_stream\" \"${1:name}\" {\n  name                        = \"${1}\"\n  destination                 = \"s3\"|\"redshift\"|\"elasticsearch\"\n  s3_configuration \\{\n    bucket_arn         = \"\\$\\{aws_s3_bucket.${2:foo}.arn}\"\n    buffer_size        = 1\n    buffer_interval    = 1\n    compression_format = \"\"\n    kms_key_arn        = \"\"\n    role_arn           = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n    prefix             = \"\"\n    cloudwatch_logging_options \\{\n      enabled         = true|false\n      log_group_name  = \"\"\n      log_stream_name = \"\"\n    }\n  }\n  redshift_configuration \\{\n    cluster_jdbcurl    = \"jdbc:redshift://\\$\\{aws_redshift_cluster.${4:baz}.endpoint}/\\$\\{aws_redshift_cluster.${5:qux}.database_name}\"\n    username           = \"\"\n    password           = \"\"\n    role_arn           = \"\\$\\{aws_iam_role.${3}.arn}\"\n    retry_duration     = 1\n    copy_options       = \"delimiter '|'\"\n    data_table_columns = \"\"\n    data_table_name    = \"\"\n    cloudwatch_logging_options \\{\n      enabled         = true|false\n      log_group_name  = \"\"\n      log_stream_name = \"\"\n    }\n  }\n  elasticsearch_configuration \\{\n    buffering_interval    = 300\n    buffering_size        = 1\n    domain_arn            = \"\\$\\{aws_elasticsearch_domain.${6:quz}.arn}\"\n    index_name            = \"${7:quuz}\"\n    index_rotation_period = \"\"\n    retry_duration        = 1\n    role_arn              = \"\\$\\{aws_iam_role.${3}.arn}\"\n    s3_backup_mode        = \"\"\n    type_name             = \"\"\n    cloudwatch_logging_options \\{\n      enabled         = true|false\n      log_group_name  = \"\"\n      log_stream_name = \"\"\n    }\n  }\n  arn                         = \"\"\n  version_id                  = \"\"\n  destination_id              = \"\"\n}",
    "description": "Kinesis Firehose Devilery Stream"
  },
  "srAwsKinesisStream": {
    "prefix": "srAwsKinesisStream",
    "body": "resource \"aws_kinesis_stream\" \"${1:name}\" {\n  name        = \"${1}\"\n  shard_count = 1\n}",
    "description": "Kinesis Stream"
  },
  "frAwsKinesisStream": {
    "prefix": "frAwsKinesisStream",
    "body": "resource \"aws_kinesis_stream\" \"${1:name}\" {\n  name                = \"${1}\"\n  shard_count         = 1\n  retention_period    = 24\n  shard_level_metrics = [\"\"]\n  arn                 = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Kinesis Stream"
  },
  "srAwsKmsAlias": {
    "prefix": "srAwsKmsAlias",
    "body": "resource \"aws_kms_alias\" \"${1:name}\" {\n  target_key_id = \"\\$\\{aws_kms_key.${2:foo}.key_id}\"\n}",
    "description": "KMS Key Alias"
  },
  "frAwsKmsAlias": {
    "prefix": "frAwsKmsAlias",
    "body": "resource \"aws_kms_alias\" \"${1:name}\" {\n  target_key_id = \"\\$\\{aws_kms_key.${2:foo}.key_id}\"\n  name          = \"${1}\" # Conflicts with name_prefix\n  name_prefix   = \"\"\n}",
    "description": "KMS Key Alias"
  },
  "srAwsKmsKey": {
    "prefix": "srAwsKmsKey",
    "body": "resource \"aws_kms_key\" \"${1:name}\" {\n}",
    "description": "KMS Key"
  },
  "frAwsKmsKey": {
    "prefix": "frAwsKmsKey",
    "body": "resource \"aws_kms_key\" \"${1:name}\" {\n  description             = \"\"\n  key_usage               = \"\"\n  policy                  = \"\"\n  is_enabled              = true|false\n  enable_key_rotation     = true|false\n  deletion_window_in_days = 301\n}",
    "description": "KMS Key"
  },
  "srAwsLBCookieStickinessPolicy": {
    "prefix": "srAwsLBCookieStickinessPolicy",
    "body": "resource \"aws_lb_cookie_stickiness_policy\" \"${1:name}\" {\n  name          = \"${1}\"\n  load_balancer = \"\\$\\{aws_elb.${2:foo}.id}\"\n  lb_port       = 1\n}",
    "description": "ELB Cookie Stickiness Policy"
  },
  "frAwsLBCookieStickinessPolicy": {
    "prefix": "frAwsLBCookieStickinessPolicy",
    "body": "resource \"aws_lb_cookie_stickiness_policy\" \"${1:name}\" {\n  name                     = \"${1}\"\n  load_balancer            = \"\\$\\{aws_elb.${2:foo}.id}\"\n  lb_port                  = 1\n  cookie_expiration_period = 1\n}",
    "description": "ELB Cookie Stickiness Policy"
  },
  "srAwsLBSSLNegotiationPolicy": {
    "prefix": "srAwsLBSSLNegotiationPolicy",
    "body": "resource \"aws_lb_ssl_negotiation_policy\" \"${1:name}\" {\n  name          = \"${1}\"\n  load_balancer = \"\\$\\{aws_elb.${2:foo}.id}\"\n  lb_port       = 1\n}",
    "description": "ELB SSL Negotiation Policy"
  },
  "frAwsLBSSLNegotiationPolicy": {
    "prefix": "frAwsLBSSLNegotiationPolicy",
    "body": "resource \"aws_lb_ssl_negotiation_policy\" \"${1:name}\" {\n  name          = \"${1}\"\n  load_balancer = \"\\$\\{aws_elb.${2:foo}.id}\"\n  lb_port       = 1\n  attribute \\{\n    name  = \"\"\n    value = \"\"\n  }\n}",
    "description": "ELB SSL Negotiation Policy"
  },
  "srAwsLambdaAlias": {
    "prefix": "srAwsLambdaAlias",
    "body": "resource \"aws_lambda_alias\" \"${1:name}\" {\n  function_name    = \"\\$\\{aws_lambda_function.${2:foo}.arn}\"\n  function_version = \"\\$LATEST\"\n  name             = \"\"\n}",
    "description": "Lambda function alias"
  },
  "frAwsLambdaAlias": {
    "prefix": "frAwsLambdaAlias",
    "body": "resource \"aws_lambda_alias\" \"${1:name}\" {\n  function_name    = \"\\$\\{aws_lambda_function.${2:foo}.arn}\"\n  function_version = \"\\$LATEST\"\n  name             = \"${1}\"\n  description      = \"\"\n}",
    "description": "Lambda function alias"
  },
  "srAwsLambdaEventSourceMapping": {
    "prefix": "srAwsLambdaEventSourceMapping",
    "body": "resource \"aws_lambda_event_source_mapping\" \"${1:name}\" {\n  event_source_arn  = \"arn:aws:kinesis:REGION:123456789012:stream/stream_name\"\n  function_name     = \"arn:aws:lambda:REGION:123456789012:function:function_name\"\n  starting_position = \"TRIM_HORIZON\"|\"LATEST\"\n}",
    "description": "Lambda Event Source Mapping"
  },
  "frAwsLambdaEventSourceMapping": {
    "prefix": "frAwsLambdaEventSourceMapping",
    "body": "resource \"aws_lambda_event_source_mapping\" \"${1:name}\" {\n  event_source_arn        = \"arn:aws:kinesis:REGION:123456789012:stream/stream_name\"\n  function_name           = \"arn:aws:lambda:REGION:123456789012:function:function_name\"\n  starting_position       = \"TRIM_HORIZON\"|\"LATEST\"\n  batch_size              = 1\n  enabled                 = true|false\n}",
    "description": "Lambda Event Source Mapping"
  },
  "srAwsLambdaFunction": {
    "prefix": "srAwsLambdaFunction",
    "body": "resource \"aws_lambda_function\" \"${1:name}\" {\n  function_name = \"${1}\"\n  handler       = \"${2:foo}\"\n  role          = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n  runtime       = \"\"\n}",
    "description": "Lambda function"
  },
  "frAwsLambdaFunction": {
    "prefix": "frAwsLambdaFunction",
    "body": "resource \"aws_lambda_function\" \"${1:name}\" {\n  function_name      = \"${1}\"\n  handler            = \"${2:foo}\"\n  role               = \"\\$\\{aws_iam_role.${3:bar}.arn}\"\n  runtime            = \"\"\n  filename           = \"file.zip\" # Conflicts with s3_bucket and s3_key\n  s3_bucket          = \"\"\n  s3_key             = \"\"\n  s3_object_version  = \"\"\n  description        = \"\"\n  dead_letter_config \\{\n    target_arn = \"\"\n  }\n  memory_size        = 128\n  timeout            = 3\n  publish            = true|false\n  vpc_config \\{\n    subnet_ids         = [\"\"]\n    security_group_ids = [\"\"]\n    vpc_id             = \"\"\n  }\n  source_code_hash   = \"\\$\\{base64sha256(file(\"file.zip\"))}\"\n  environment \\{\n    variables \\{\n      key = \"\\$\\{var.SOMEVAL}\"\n    }\n  }\n  kms_key_arn        = \"\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Lambda function"
  },
  "srAwsLambdaPermission": {
    "prefix": "srAwsLambdaPermission",
    "body": "resource \"aws_lambda_permission\" \"${1:name}\" {\n  action        = \"\"\n  function_name = \"\\$\\{aws_lambda_function.${2:foo}.function_name}\"\n  principal     = \"\"\n  statement_id  = \"\"\n}",
    "description": "Lambda Permission"
  },
  "frAwsLambdaPermission": {
    "prefix": "frAwsLambdaPermission",
    "body": "resource \"aws_lambda_permission\" \"${1:name}\" {\n  action         = \"\"\n  function_name  = \"\\$\\{aws_lambda_function.${2:foo}.function_name}\"\n  principal      = \"\"\n  statement_id   = \"\"\n  qualifier      = \"\\$\\{aws_lambda_alias.${3:bar}.name}\"\n  source_account = \"\"\n  source_arn     = \"\"\n}",
    "description": "Lambda Permission"
  },
  "srAwsLaunchConfiguration": {
    "prefix": "srAwsLaunchConfiguration",
    "body": "resource \"aws_launch_configuration\" \"${1:name}\" {\n  image_id      = \"\\$\\{data.aws_ami.${2:foo}.id}\"\n  instance_type = \"\"\n  lifecycle \\{ # Recommended\n    create_before_destroy = true\n  }\n}",
    "description": "Launch Configuration"
  },
  "frAwsLaunchConfiguration": {
    "prefix": "frAwsLaunchConfiguration",
    "body": "resource \"aws_launch_configuration\" \"${1:name}\" {\n  image_id                         = \"\\$\\{data.aws_ami.${2:foo}.id}\"\n  instance_type                    = \"\"\n  name                             = \"${1}\" # Conflicts with name_prefix\n  name_prefix                      = \"\"\n  iam_instance_profile             = \"\"\n  key_name                         = \"\"\n  user_data                        = \"\"\n  security_groups                  = [\"\"]\n  vpc_classic_link_id              = \"\"\n  vpc_classic_link_security_groups = [\"\"]\n  associate_public_ip_address      = true|false\n  spot_price                       = \"\"\n  ebs_optimized                    = true|false\n  placement_tenancy                = \"\"\n  enable_monitoring                = true|false\n  ebs_block_device \\{\n    delete_on_termination = true|false\n    device_name           = \"\"\n    iops                  = 1\n    snapshot_id           = \"\"\n    volume_size           = 1\n    volume_type           = \"\"\n    encrypted             = true|false\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n  }\n  root_block_device \\{\n    delete_on_termination = true|false\n    iops                  = 1\n    volume_size           = 1\n    volume_type           = \"\"\n  }\n  lifecycle \\{ # Recommended\n    create_before_destroy = true\n  }\n}",
    "description": "Launch Configuration"
  },
  "srAwsLightsailDomain": {
    "prefix": "srAwsLightsailDomain",
    "body": "resource \"aws_lightsail_domain\" \"${1:name}\" {\n  domain_name = \"${2:foo}\"\n}",
    "description": "Lightsail Domain"
  },
  "frAwsLightsailDomain": {
    "prefix": "frAwsLightsailDomain",
    "body": "resource \"aws_lightsail_domain\" \"${1:name}\" {\n  domain_name = \"${2:foo}\"\n}",
    "description": "Lightsail Domain"
  },
  "srAwsLightsailInstance": {
    "prefix": "srAwsLightsailInstance",
    "body": "resource \"aws_lightsail_instance\" \"${1:name}\" {\n  name              = \"${1}\"\n  availability_zone = \"us-east-1b\" # Must be in us-east-1\n  blueprint_id      = \"${2:foo}\"\n  bundle_id         = \"${3:bar}\"\n}",
    "description": "Lightsail instance"
  },
  "frAwsLightsailInstance": {
    "prefix": "frAwsLightsailInstance",
    "body": "resource \"aws_lightsail_instance\" \"${1:name}\" {\n  name               = \"${1}\"\n  availability_zone  = \"us-east-1b # Must be in us-east-1\"\n  blueprint_id       = \"${2:foo}\"\n  bundle_id          = \"${3:bar}\"\n  key_pair_name      = \"\"\n  user_data          = \"\"\n}",
    "description": "Lightsail instance"
  },
  "srAwsLightsailKeyPair": {
    "prefix": "srAwsLightsailKeyPair",
    "body": "resource \"aws_lightsail_key_pair\" \"${1:name}\" {\n}",
    "description": "Lightsail Key Pair"
  },
  "frAwsLightsailKeyPair": {
    "prefix": "frAwsLightsailKeyPair",
    "body": "resource \"aws_lightsail_key_pair\" \"${1:name}\" {\n  name                  = \"${1}\" # Conflicts with name_prefix\n  name_prefix           = \"\"\n  pgp_key               = \"\"\n  public_key            = \"\\$\\{file(\"~/.ssh/id_rsa.pub\")}\"\n}",
    "description": "Lightsail Key Pair"
  },
  "srAwsLightsailStaticIp": {
    "prefix": "srAwsLightsailStaticIp",
    "body": "resource \"aws_lightsail_static_ip\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Lightsail Static IP"
  },
  "frAwsLightsailStaticIp": {
    "prefix": "frAwsLightsailStaticIp",
    "body": "resource \"aws_lightsail_static_ip\" \"${1:name}\" {\n  name         = \"${1}\"\n}",
    "description": "Lightsail Static IP"
  },
  "srAwsLightsailStaticIpAttachment": {
    "prefix": "srAwsLightsailStaticIpAttachment",
    "body": "resource \"aws_lightsail_static_ip_attachment\" \"${1:name}\" {\n  static_ip_name = \"\\$\\{aws_lightsail_static_ip.${2:foo}.name}\"\n  instance_name  = \"\\$\\{aws_lightsail_instance.${3:bar}.name}\"\n}",
    "description": "Lightsail Static IP Attachment"
  },
  "frAwsLightsailStaticIpAttachment": {
    "prefix": "frAwsLightsailStaticIpAttachment",
    "body": "resource \"aws_lightsail_static_ip_attachment\" \"${1:name}\" {\n  static_ip_name = \"\\$\\{aws_lightsail_static_ip.${2:foo}.name}\"\n  instance_name  = \"\\$\\{aws_lightsail_instance.${3:bar}.name}\"\n}",
    "description": "Lightsail Static IP Attachment"
  },
  "srAwsLoadBalancerBackendServerPolicies": {
    "prefix": "srAwsLoadBalancerBackendServerPolicies",
    "body": "resource \"aws_load_balancer_backend_server_policies\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance_port      = 1\n}",
    "description": "LB Policy Attachment to an ELB backend server"
  },
  "frAwsLoadBalancerBackendServerPolicies": {
    "prefix": "frAwsLoadBalancerBackendServerPolicies",
    "body": "resource \"aws_load_balancer_backend_server_policies\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance_port      = 1\n  policy_names       = [\"\\$\\{aws_load_balancer_policy.${3:bar}.policy_name}\"]\n}",
    "description": "LB Policy Attachment to an ELB backend server"
  },
  "srAwsLoadBalancerListenerPolicies": {
    "prefix": "srAwsLoadBalancerListenerPolicies",
    "body": "resource \"aws_load_balancer_listener_policies\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  load_balancer_port = 1\n}",
    "description": "LB Policy attachment to ELB listener"
  },
  "frAwsLoadBalancerListenerPolicies": {
    "prefix": "frAwsLoadBalancerListenerPolicies",
    "body": "resource \"aws_load_balancer_listener_policies\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  load_balancer_port = 1\n  policy_names       = [\"\\$\\{aws_load_balancer_policy.${3:bar}.policy_name}\"]\n}",
    "description": "LB Policy attachment to ELB listener"
  },
  "srAwsLoadBalancerPolicy": {
    "prefix": "srAwsLoadBalancerPolicy",
    "body": "resource \"aws_load_balancer_policy\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  policy_name        = \"${1}\"\n  policy_type_name   = \"${3:bar}\"\n}",
    "description": "Load Balancer Policy"
  },
  "frAwsLoadBalancerPolicy": {
    "prefix": "frAwsLoadBalancerPolicy",
    "body": "resource \"aws_load_balancer_policy\" \"${1:name}\" {\n  load_balancer_name = \"\\$\\{aws_elb.${2:foo}.name}\"\n  policy_name        = \"${1}\"\n  policy_type_name   = \"${3:bar}\"\n  policy_attribute \\{\n    name  = \"\"\n    value = \"\"\n  }\n}",
    "description": "Load Balancer Policy"
  },
  "srAwsMainRouteTableAssociation": {
    "prefix": "srAwsMainRouteTableAssociation",
    "body": "resource \"aws_main_route_table_association\" \"${1:name}\" {\n  vpc_id         = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  route_table_id = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "VPC Main Route Table"
  },
  "frAwsMainRouteTableAssociation": {
    "prefix": "frAwsMainRouteTableAssociation",
    "body": "resource \"aws_main_route_table_association\" \"${1:name}\" {\n  vpc_id         = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  route_table_id = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "VPC Main Route Table"
  },
  "srAwsNatGateway": {
    "prefix": "srAwsNatGateway",
    "body": "resource \"aws_nat_gateway\" \"${1:name}\" {\n  depends_on    = [\"aws_internet_gateway.${2:foo}\"]\n  allocation_id = \"\\$\\{aws_eip.${3:bar}.id}\"\n  subnet_id     = \"\\$\\{aws_subnet.${4:baz}.id}\"\n}",
    "description": "VPC NAT Gateway"
  },
  "frAwsNatGateway": {
    "prefix": "frAwsNatGateway",
    "body": "resource \"aws_nat_gateway\" \"${1:name}\" {\n  depends_on           = [\"aws_internet_gateway.${2:foo}\"]\n  allocation_id        = \"\\$\\{aws_eip.${3:bar}.id}\"\n  subnet_id            = \"\\$\\{aws_subnet.${4:baz}.id}\"\n  network_interface_id = \"\"\n  private_ip           = \"\"\n  public_ip            = \"\"\n}",
    "description": "VPC NAT Gateway"
  },
  "srAwsNetworkAcl": {
    "prefix": "srAwsNetworkAcl",
    "body": "resource \"aws_network_acl\" \"${1:name}\" {\n  vpc_id  = \"\\$\\{aws_vpc.${2:foo}.id}\"\n}",
    "description": "Network ACL"
  },
  "frAwsNetworkAcl": {
    "prefix": "frAwsNetworkAcl",
    "body": "resource \"aws_network_acl\" \"${1:name}\" {\n  vpc_id     = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  #subnet_id  = \"DEPRECATED\"\n  subnet_ids = [\"\\$\\{aws_subnet.${3:bar}.id}\"]\n  ingress \\{\n    from_port       = 1\n    to_port         = 1\n    rule_no         = 1\n    action          = \"\"\n    protocol        = \"\"\n    cidr_block      = \"\"\n    ipv6_cidr_block = \"\"\n    icmp_type       = 0\n    icmp_code       = 0\n  }\n  egress \\{\n    from_port       = 1\n    to_port         = 1\n    rule_no         = 1\n    action          = \"\"\n    protocol        = \"\"\n    cidr_block      = \"\"\n    ipv6_cidr_block = \"\"\n    icmp_type       = 0\n    icmp_code       = 0\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Network ACL"
  },
  "srAwsNetworkAclRule": {
    "prefix": "srAwsNetworkAclRule",
    "body": "resource \"aws_network_acl_rule\" \"${1:name}\" {\n  network_acl_id = \"\\$\\{aws_network_acl.${2:foo}.id}\"\n  rule_number    = 1\n  protocol       = \"\"\n  rule_action    = \"\"\n}",
    "description": "Network ACL rule"
  },
  "frAwsNetworkAclRule": {
    "prefix": "frAwsNetworkAclRule",
    "body": "resource \"aws_network_acl_rule\" \"${1:name}\" {\n  network_acl_id  = \"\\$\\{aws_network_acl.${2:foo}.id}\"\n  rule_number     = 1\n  protocol        = \"\"\n  rule_action     = \"\"\n  egress          = true|false\n  cidr_block      = \"\"\n  ipv6_cidr_block = \"\"\n  from_port       = 1\n  to_port         = 1\n  icmp_type       = \"\"\n  icmp_code       = \"\"\n}",
    "description": "Network ACL rule"
  },
  "srAwsNetworkInterface": {
    "prefix": "srAwsNetworkInterface",
    "body": "resource \"aws_network_interface\" \"${1:name}\" {\n  subnet_id = \"\\$\\{aws_subnet.${2:foo}.id}\"\n}",
    "description": "Elastic Network Interface"
  },
  "frAwsNetworkInterface": {
    "prefix": "frAwsNetworkInterface",
    "body": "resource \"aws_network_interface\" \"${1:name}\" {\n  subnet_id         = \"\\$\\{aws_subnet.${2:foo}.id}\"\n  private_ips       = [\"\"]\n  security_groups   = [\"\\$\\{aws_security_group.${3:bar}.id}\"]\n  source_dest_check = true|false\n  description       = \"\"\n  attachment \\{\n    instance      = \"\\$\\{aws_instance.${4:baz}.id}\"\n    device_index  = 1\n  }\n}",
    "description": "Elastic Network Interface"
  },
  "srAwsOpsworksApplication": {
    "prefix": "srAwsOpsworksApplication",
    "body": "resource \"aws_opsworks_application\" \"${1:name}\" {\n  name     = \"${1}\"\n  type     = \"${2:foo}\"\n  stack_id = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n}",
    "description": "OpsWorks Application"
  },
  "frAwsOpsworksApplication": {
    "prefix": "frAwsOpsworksApplication",
    "body": "resource \"aws_opsworks_application\" \"${1:name}\" {\n  name                      = \"${1}\"\n  type                      = \"${2:foo}\"\n  stack_id                  = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n  short_name                = \"\"\n  document_root             = \"\"\n  rails_env                 = \"\"\n  auto_bundle_on_deploy     = \"\"\n  aws_flow_ruby_settings    = \"\"\n  app_source \\{\n    type     = \"git\"\n    url      = \"https://github.com/example.git\"\n    username = \"\"\n    password = \"\"\n    revision = \"master\"\n    ssh_key  = \"\"\n  }\n  data_source_type          = \"\"\n  data_source_database_name = \"\"\n  data_source_arn           = \"\"\n  description               = \"\"\n  domains                   = [\"\"]\n  environment \\{\n    key    = \"\"\n    value  = \"\"\n    secure = true|false\n  }\n  enable_ssl                = true|false\n  ssl_configuration \\{\n    certificate = \"\\$\\{file(\"./foobar.crt\")}\"\n    private_key = \"\\$\\{file(\"./foobar.key\")}\"\n    chain       = \"\\$\\{file(\"./foobar.ca\")}\"\n  }\n}",
    "description": "OpsWorks Application"
  },
  "srAwsOpsworksGangliaLayer": {
    "prefix": "srAwsOpsworksGangliaLayer",
    "body": "resource \"aws_opsworks_ganglia_layer\" \"${1:name}\" {\n  password = \"${2:foo}\"\n  stack_id = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n}",
    "description": "OpsWorks Ganglia Layer"
  },
  "frAwsOpsworksGangliaLayer": {
    "prefix": "frAwsOpsworksGangliaLayer",
    "body": "resource \"aws_opsworks_ganglia_layer\" \"${1:name}\" {\n  password                    = \"${2:foo}\"\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n  name                        = \"${1}\"\n  url                         = \"\"\n  username                    = \"\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks Ganglia Layer"
  },
  "srAwsOpsworksHaproxyLayer": {
    "prefix": "srAwsOpsworksHaproxyLayer",
    "body": "resource \"aws_opsworks_haproxy_layer\" \"${1:name}\" {\n  stats_password = \"${2:foo}\"\n  stack_id       = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n}",
    "description": "OpsWorks HA Proxy Layer"
  },
  "frAwsOpsworksHaproxyLayer": {
    "prefix": "frAwsOpsworksHaproxyLayer",
    "body": "resource \"aws_opsworks_haproxy_layer\" \"${1:name}\" {\n  stats_password              = \"${2:foo}\"\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n  stats_enabled               = true|false\n  stats_url                   = \"/haproxy?stats\"\n  stats_user                  = \"opsworks\"\n  healthcheck_url             = \"/\"\n  healthcheck_method          = \"OPTIONS\"\n  name                        = \"${1}\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks HA Proxy Layer"
  },
  "srAwsOpsworksInstance": {
    "prefix": "srAwsOpsworksInstance",
    "body": "resource \"aws_opsworks_instance\" \"${1:name}\" {\n  layer_ids     = [\"\\$\\{aws_opsworks_custom_layer.${2:foo}.id}\"]\n  stack_id      = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n  instance_type = \"${4:baz}\"\n}",
    "description": "OpsWorks instance"
  },
  "frAwsOpsworksInstance": {
    "prefix": "frAwsOpsworksInstance",
    "body": "resource \"aws_opsworks_instance\" \"${1:name}\" {\n  layer_ids                    = [\"\\$\\{aws_opsworks_custom_layer.${2:foo}.id}\"]\n  stack_id                     = \"\\$\\{aws_opsworks_stack.${3:bar}.id}\"\n  instance_type                = \"${4:baz}\"\n  agent_version                = \"\"\n  ami_id                       = \"\\$\\{data.aws_ami.${5:foo}.id}\"\n  architecture                 = \"x86_64\"\n  auto_scaling_type            = \"\"\n  availability_zone            = \"\"\n  created_at                   = \"\"\n  delete_ebs                   = true|false\n  delete_eip                   = true|false\n  ebs_optimized                = true|false\n  ec2_instance_id              = \"\"\n  ecs_cluster_arn              = \"\"\n  elastic_ip                   = \"\"\n  hostname                     = \"\"\n  infrastructure_class         = \"\"\n  install_updates_on_boot      = true|false\n  instance_profile_arn         = \"\"\n  instance_type                = \"\"\n  last_service_error_id        = \"\"\n  os                           = \"\"\n  platform                     = \"\"\n  private_dns                  = \"\"\n  private_ip                   = \"\"\n  public_dns                   = \"\"\n  public_ip                    = \"\"\n  registered_by                = \"\"\n  reported_agent_version       = \"\"\n  reported_os_family           = \"\"\n  reported_os_name             = \"\"\n  reported_os_version          = \"\"\n  root_device_type             = \"\"\n  root_device_volume_id        = \"\"\n  security_group_ids           = [\"\"]\n  ssh_host_dsa_key_fingerprint = \"\"\n  ssh_host_rsa_key_fingerprint = \"\"\n  ssh_key_name                 = \"\"\n  state                        = \"running\"|\"stopped\"\n  status                       = \"\"\n  subnet_id                    = \"\"\n  tenancy                      = \"\"\n  virtualization_type          = \"\"\n  ebs_block_device \\{\n    delete_on_termination = true|false\n    device_name           = \"\"\n    iops                  = 1\n    snapshot_id           = \"\"\n    volume_size           = 1\n    volume_type           = \"\"\n  }\n  ephemeral_block_device \\{\n    device_name  = \"\"\n    virtual_name = \"\"\n  }\n  root_block_device \\{\n    delete_on_termination = true|false\n    iops                  = 1\n    volume_size           = 1\n    volume_type           = \"\"\n  }\n}",
    "description": "OpsWorks instance"
  },
  "srAwsOpsworksJavaAppLayer": {
    "prefix": "srAwsOpsworksJavaAppLayer",
    "body": "resource \"aws_opsworks_java_app_layer\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n}",
    "description": "OpsWorks Java App Layer"
  },
  "frAwsOpsworksJavaAppLayer": {
    "prefix": "frAwsOpsworksJavaAppLayer",
    "body": "resource \"aws_opsworks_java_app_layer\" \"${1:name}\" {\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  jvm_type                    = \"\"\n  jvm_version                 = \"\"\n  jvm_options                 = \"\"\n  app_server                  = \"\"\n  app_server_version          = \"\"\n  name                        = \"${1}\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks Java App Layer"
  },
  "srAwsOpsworksMemcachedLayer": {
    "prefix": "srAwsOpsworksMemcachedLayer",
    "body": "resource \"aws_opsworks_memcached_layer\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n}",
    "description": "OpsWorks Memcached Layer"
  },
  "frAwsOpsworksMemcachedLayer": {
    "prefix": "frAwsOpsworksMemcachedLayer",
    "body": "resource \"aws_opsworks_memcached_layer\" \"${1:name}\" {\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  allocated_memory            = 1\n  name                        = \"${1}\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks Memcached Layer"
  },
  "srAwsOpsworksMysqlLayer": {
    "prefix": "srAwsOpsworksMysqlLayer",
    "body": "resource \"aws_opsworks_mysql_layer\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n}",
    "description": "OpsWorks MySQL Layer"
  },
  "frAwsOpsworksMysqlLayer": {
    "prefix": "frAwsOpsworksMysqlLayer",
    "body": "resource \"aws_opsworks_mysql_layer\" \"${1:name}\" {\n  stack_id                       = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  root_password                  = \"\"\n  root_password_on_all_instances = true|false\n  name                           = \"${1}\"\n  auto_assign_elastic_ips        = true|false\n  auto_assign_public_ips         = true|false\n  custom_instance_profile_arn    = \"\"\n  elastic_load_balancer          = \"\"\n  custom_setup_recipes           = [\"\"]\n  custom_configure_recipes       = [\"\"]\n  custom_deploy_recipes          = [\"\"]\n  custom_undeploy_recipes        = [\"\"]\n  custom_shutdown_recipes        = [\"\"]\n  custom_security_group_ids      = [\"\"]\n  custom_json                    = \"\"\n  auto_healing                   = true|false\n  install_updates_on_boot        = true|false\n  instance_shutdown_timeout      = 120\n  drain_elb_on_shutdown          = true|false\n  system_packages                = [\"\"]\n  use_ebs_optimized_instances    = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks MySQL Layer"
  },
  "srAwsOpsworksNodejsAppLayer": {
    "prefix": "srAwsOpsworksNodejsAppLayer",
    "body": "resource \"aws_opsworks_nodejs_app_layer\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n}",
    "description": "OpsWorks NodeJS Layer"
  },
  "frAwsOpsworksNodejsAppLayer": {
    "prefix": "frAwsOpsworksNodejsAppLayer",
    "body": "resource \"aws_opsworks_nodejs_app_layer\" \"${1:name}\" {\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  nodejs_version              = \"\"\n  name                        = \"${1}\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks NodeJS Layer"
  },
  "srAwsOpsworksPermission": {
    "prefix": "srAwsOpsworksPermission",
    "body": "resource \"aws_opsworks_permission\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  user_arn = \"\\$\\{aws_iam_user.${3:bar}.arn}\"\n}",
    "description": "OpsWorks permission"
  },
  "frAwsOpsworksPermission": {
    "prefix": "frAwsOpsworksPermission",
    "body": "resource \"aws_opsworks_permission\" \"${1:name}\" {\n  stack_id   = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  user_arn   = \"\\$\\{aws_iam_user.${3:bar}.arn}\"\n  allow_ssh  = true|false\n  allow_sudo = true|false\n  level      = \"\"\n}",
    "description": "OpsWorks permission"
  },
  "srAwsOpsworksRailsAppLayer": {
    "prefix": "srAwsOpsworksRailsAppLayer",
    "body": "resource \"aws_opsworks_rails_app_layer\" \"${1:name}\" {\n  stack_id = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n}",
    "description": "OpsWorks Ruby on Rails"
  },
  "frAwsOpsworksRailsAppLayer": {
    "prefix": "frAwsOpsworksRailsAppLayer",
    "body": "resource \"aws_opsworks_rails_app_layer\" \"${1:name}\" {\n  stack_id                    = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  ruby_version                = \"\"\n  app_server                  = \"\"\n  passenger_version           = \"\"\n  rubygems_version            = \"\"\n  manage_bundler              = true|false\n  bundler_version             = \"\"\n  name                        = \"${1}\"\n  auto_assign_elastic_ips     = true|false\n  auto_assign_public_ips      = true|false\n  custom_instance_profile_arn = \"\"\n  elastic_load_balancer       = \"\"\n  custom_setup_recipes        = [\"\"]\n  custom_configure_recipes    = [\"\"]\n  custom_deploy_recipes       = [\"\"]\n  custom_undeploy_recipes     = [\"\"]\n  custom_shutdown_recipes     = [\"\"]\n  custom_security_group_ids   = [\"\"]\n  custom_json                 = \"\"\n  auto_healing                = true|false\n  install_updates_on_boot     = true|false\n  instance_shutdown_timeout   = 120\n  drain_elb_on_shutdown       = true|false\n  system_packages             = [\"\"]\n  use_ebs_optimized_instances = true|false\n  ebs_volume \\{\n    iops            = 0\n    mount_point     = \"\"\n    number_of_disks = 1\n    raid_level      = \"\"\n    size            = 1\n    type            = \"\"\n  }\n}",
    "description": "OpsWorks Ruby on Rails"
  },
  "srAwsOpsworksRdsDbInstance": {
    "prefix": "srAwsOpsworksRdsDbInstance",
    "body": "resource \"aws_opsworks_rds_db_instance\" \"${1:name}\" {\n  stack_id            = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  rds_db_instance_arn = \"\\$\\{aws_db_instance.${3:bar}.arn}\"\n  db_user             = \"${4:baz}\"\n  db_password         = \"${5:qux}\"\n}",
    "description": "OpsWorks RDS DB"
  },
  "frAwsOpsworksRdsDbInstance": {
    "prefix": "frAwsOpsworksRdsDbInstance",
    "body": "resource \"aws_opsworks_rds_db_instance\" \"${1:name}\" {\n  stack_id            = \"\\$\\{aws_opsworks_stack.${2:foo}.id}\"\n  rds_db_instance_arn = \"\\$\\{aws_db_instance.${3:bar}.arn}\"\n  db_user             = \"${4:baz}\"\n  db_password         = \"${5:qux}\"\n}",
    "description": "OpsWorks RDS DB"
  },
  "srAwsOpsworksStack": {
    "prefix": "srAwsOpsworksStack",
    "body": "resource \"aws_opsworks_stack\" \"${1:name}\" {\n  name                         = \"${1}\"\n  region                       = \"\"\n  service_role_arn             = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  default_instance_profile_arn = \"\\$\\{aws_iam_instance_profile.${3:bar}.arn}\"\n}",
    "description": "OpsWorks Stack"
  },
  "frAwsOpsworksStack": {
    "prefix": "frAwsOpsworksStack",
    "body": "resource \"aws_opsworks_stack\" \"${1:name}\" {\n  name                          = \"${1}\"\n  region                        = \"\"\n  service_role_arn              = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  default_instance_profile_arn  = \"\\$\\{aws_iam_instance_profile.${3:bar}.arn}\"\n  agent_version                 = \"\"\n  color                         = \"\"\n  configuration_manager_name    = \"\"\n  configuration_manager_version = \"\"\n  manage_berkshelf              = true|false\n  berkshelf_version             = \"\"\n  custom_cookbooks_source \\{\n    type     = \"\"\n    url      = \"\"\n    username = \"\"\n    password = \"\"\n    revision = \"\"\n    ssh_key  = \"\"\n  }\n  custom_json                   = \"\"\n  default_availability_zone     = \"\"\n  default_os                    = \"\"\n  default_root_device_type      = \"\"\n  default_ssh_key_name          = \"\"\n  default_subnet_id             = \"\"\n  hostname_theme                = \"\"\n  use_custom_cookbooks          = true|false\n  use_opsworks_security_groups  = true|false\n  vpc_id                        = \"\\$\\{aws_vpc.${4:baz}.id}\"\n}",
    "description": "OpsWorks Stack"
  },
  "srAwsOpsworksUserProfile": {
    "prefix": "srAwsOpsworksUserProfile",
    "body": "resource \"aws_opsworks_user_profile\" \"${1:name}\" {\n  user_arn     = \"\\$\\{aws_iam_user.${2:foo}.arn}\"\n  ssh_username = \"${3:bar}\"\n}",
    "description": "OpsWorks User Profile"
  },
  "frAwsOpsworksUserProfile": {
    "prefix": "frAwsOpsworksUserProfile",
    "body": "resource \"aws_opsworks_user_profile\" \"${1:name}\" {\n  user_arn              = \"\\$\\{aws_iam_user.${2:foo}.arn}\"\n  ssh_username          = \"${3:bar}\"\n  allow_self_management = true|false\n  ssh_public_key        = \"\"\n}",
    "description": "OpsWorks User Profile"
  },
  "srAwsPlacementGroup": {
    "prefix": "srAwsPlacementGroup",
    "body": "resource \"aws_placement_group\" \"${1:name}\" {\n  name     = \"${1}\"\n  strategy = \"${2:bar}\"\n}",
    "description": "EC2 Placement Group"
  },
  "frAwsPlacementGroup": {
    "prefix": "frAwsPlacementGroup",
    "body": "resource \"aws_placement_group\" \"${1:name}\" {\n  name     = \"${1}\"\n  strategy = \"${2:bar}\"\n}",
    "description": "EC2 Placement Group"
  },
  "srAwsProxyProtocolPolicy": {
    "prefix": "srAwsProxyProtocolPolicy",
    "body": "resource \"aws_proxy_protocol_policy\" \"${1:name}\" {\n  load_balancer  = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance_ports = [\"${3:bar}\"]\n}",
    "description": "ELB Proxy Protocol"
  },
  "frAwsProxyProtocolPolicy": {
    "prefix": "frAwsProxyProtocolPolicy",
    "body": "resource \"aws_proxy_protocol_policy\" \"${1:name}\" {\n  load_balancer  = \"\\$\\{aws_elb.${2:foo}.name}\"\n  instance_ports = [\"${3:bar}\"]\n}",
    "description": "ELB Proxy Protocol"
  },
  "srAwsRDSCluster": {
    "prefix": "srAwsRDSCluster",
    "body": "resource \"aws_rds_cluster\" \"${1:name}\" {\n  snapshot_identifier = \"\"\n  master_username     = \"\" # Required unless snapshot_identifier set.\n  master_password     = \"\" # Requried unless snapshot_identifier set.\n}",
    "description": "Aurora RDS Cluster"
  },
  "frAwsRDSCluster": {
    "prefix": "frAwsRDSCluster",
    "body": "resource \"aws_rds_cluster\" \"${1:name}\" {\n  availability_zones              = [\"\"]\n  cluster_identifier              = \"${1}\"\n  cluster_identifier_prefix       = \"\"\n  cluster_members                 = [\"\"]\n  database_name                   = \"${1}\"\n  db_subnet_group_name            = \"\"\n  db_cluster_parameter_group_name = \"\"\n  storage_encrypted               = true|false\n  final_snapshot_identifier       = \"\"\n  skip_final_snapshot             = true|false\n  master_username                 = \"\"\n  master_password                 = \"\"\n  snapshot_identifier             = \"\"\n  port                            = 1\n  apply_immediately               = true|false\n  vpc_security_group_ids          = [\"\"]\n  preferred_backup_window         = \"\"\n  preferred_maintenance_window    = \"\"\n  backup_retention_period         = 1\n  kms_key_id                      = \"\"\n  replication_source_identifier   = \"\"\n}",
    "description": "Aurora RDS Cluster"
  },
  "srAwsRDSClusterInstance": {
    "prefix": "srAwsRDSClusterInstance",
    "body": "resource \"aws_rds_cluster_instance\" \"${1:name}\" {\n  cluster_identifier = \"\\$\\{aws_rds_cluster.${2:foo}.id}\"\n  instance_class     = \"${3:bar}\"\n}",
    "description": "Aurora RDS Cluster Instance"
  },
  "frAwsRDSClusterInstance": {
    "prefix": "frAwsRDSClusterInstance",
    "body": "resource \"aws_rds_cluster_instance\" \"${1:name}\" {\n  cluster_identifier           = \"\\$\\{aws_rds_cluster.${2:foo}.id}\"\n  instance_class               = \"${3:bar}\"\n  identifier                   = \"${1}\"\n  identifier_prefix            = \"\"\n  db_subnet_group_name         = \"\"\n  publicly_accessible          = true|false\n  db_parameter_group_name      = \"\"\n  apply_immediately            = true|false\n  auto_minor_version_upgrade   = true|false\n  monitoring_role_arn          = \"\"\n  preferred_maintenance_window = \"\"\n  preferred_backup_window      = \"\"\n  monitoring_interval          = 1\n  promotion_tier               = 1\n}",
    "description": "Aurora RDS Cluster Instance"
  },
  "srAwsRDSClusterParameterGroup": {
    "prefix": "srAwsRDSClusterParameterGroup",
    "body": "resource \"aws_rds_cluster_parameter_group\" \"${1:name}\" {\n  family = \"\"\n}",
    "description": "RDS Cluster Parameter Group"
  },
  "frAwsRDSClusterParameterGroup": {
    "prefix": "frAwsRDSClusterParameterGroup",
    "body": "resource \"aws_rds_cluster_parameter_group\" \"${1:name}\" {\n  family      = \"\"\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n  description = \"\"\n  parameter \\{\n    name         = \"\"\n    value        = \"\"\n    apply_method = \"\"\n  }\n}",
    "description": "RDS Cluster Parameter Group"
  },
  "srAwsRedshiftCluster": {
    "prefix": "srAwsRedshiftCluster",
    "body": "resource \"aws_redshift_cluster\" \"${1:name}\" {\n  cluster_identifier  = \"${2:foo}\" # Must be lowercase\n  node_type           = \"${3:bar}\"\n  snapshot_identifier = \"\"\n  master_username     = \"\" # Required unless snapshot_identifier set.\n  master_password     = \"\" # Required unless snapshot_identifier set.\n}",
    "description": "Redshift Cluster"
  },
  "frAwsRedshiftCluster": {
    "prefix": "frAwsRedshiftCluster",
    "body": "resource \"aws_redshift_cluster\" \"${1:name}\" {\n  cluster_identifier                  = \"${2:foo} # Must be lowercase\"\n  node_type                           = \"${3:bar}\"\n  snapshot_identifier                 = \"\"\n  master_username                     = \"\" # Required unless snapshot_identifier set.\n  master_password                     = \"\" # Required unless snapshot_identifier set.\n  database_name                       = \"dev\"\n  cluster_type                        = \"\"\n  cluster_security_groups             = [\"\"]\n  vpc_security_group_ids              = [\"\"]\n  cluster_subnet_group_name           = \"\"\n  availability_zone                   = \"\"\n  preferred_maintenance_window        = \"\"\n  cluster_parameter_group_name        = \"\"\n  automated_snapshot_retention_period = 1\n  port                                = 1\n  cluster_version                     = \"\"\n  allow_version_upgrade               = true|false\n  number_of_nodes                     = 1\n  publicly_accessible                 = true|false\n  encrypted                           = true|false\n  enhanced_vpc_routing                = true|false\n  kms_key_id                          = \"\"\n  elastic_ip                          = \"\"\n  final_snapshot_identifier           = \"\"\n  skip_final_snapshot                 = true|false\n  cluster_public_key                  = \"\"\n  cluster_revision_number             = \"\"\n  iam_roles                           = [\"\"]\n  enable_logging                      = true|false\n  bucket_name                         = \"\"\n  s3_key_prefix                       = \"\"\n  snapshot_cluster_identifier         = \"\"\n  owner_account                       = \"\"\n}",
    "description": "Redshift Cluster"
  },
  "srAwsRedshiftParameterGroup": {
    "prefix": "srAwsRedshiftParameterGroup",
    "body": "resource \"aws_redshift_parameter_group\" \"${1:name}\" {\n  name   = \"${1}\"\n  family = \"${2:foo}\"\n}",
    "description": "Redshift Parameter Group"
  },
  "frAwsRedshiftParameterGroup": {
    "prefix": "frAwsRedshiftParameterGroup",
    "body": "resource \"aws_redshift_parameter_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  family      = \"${2:foo}\"\n  description = \"\"\n  parameter \\{\n    name  = \"\"\n    value = \"\"\n  }\n}",
    "description": "Redshift Parameter Group"
  },
  "srAwsRedshiftSecurityGroup": {
    "prefix": "srAwsRedshiftSecurityGroup",
    "body": "resource \"aws_redshift_security_group\" \"${1:name}\" {\n  name    = \"${1}\"\n  ingress \\{\n    cidr                    = \"\"\n    security_group_name     = \"\"\n    security_group_owner_id = \"\"\n  }\n}",
    "description": "Redshift Security Group"
  },
  "frAwsRedshiftSecurityGroup": {
    "prefix": "frAwsRedshiftSecurityGroup",
    "body": "resource \"aws_redshift_security_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  ingress \\{\n    cidr                    = \"\"\n    security_group_name     = \"\"\n    security_group_owner_id = \"\"\n  }\n  description = \"\"\n}",
    "description": "Redshift Security Group"
  },
  "srAwsRedshiftSubnetGroup": {
    "prefix": "srAwsRedshiftSubnetGroup",
    "body": "resource \"aws_redshift_subnet_group\" \"${1:name}\" {\n  name       = \"${1}\"\n  subnet_ids = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n}",
    "description": "Redshift Subnet Group"
  },
  "frAwsRedshiftSubnetGroup": {
    "prefix": "frAwsRedshiftSubnetGroup",
    "body": "resource \"aws_redshift_subnet_group\" \"${1:name}\" {\n  name        = \"${1}\"\n  subnet_ids  = [\"\\$\\{aws_subnet.${2:foo}.id}\"]\n  description = \"\"\n}",
    "description": "Redshift Subnet Group"
  },
  "srAwsRoute": {
    "prefix": "srAwsRoute",
    "body": "# Use Route Table instead.\nresource \"aws_route\" \"${1:name}\" {\n  route_table_id = \"rtb-XXX\"\n}",
    "description": "AWS Route"
  },
  "frAwsRoute": {
    "prefix": "frAwsRoute",
    "body": "# Use Route Table instead.\nresource \"aws_route\" \"${1:name}\" {\n  route_table_id              = \"rtb-XXX\"\n  destination_cidr_block      = \"\"\n  destination_ipv6_cidr_block = \"\"\n  gateway_id                  = \"\"\n  egress_only_gateway_id      = \"\"\n  nat_gateway_id              = \"\"\n  instance_id                 = \"\"\n  network_interface_id        = \"\"\n  vpc_peering_connection_id   = \"\"\n}",
    "description": "AWS Route"
  },
  "srAwsRoute53DelegationSet": {
    "prefix": "srAwsRoute53DelegationSet",
    "body": "resource \"aws_route53_delegation_set\" \"${1:name}\" {\n}",
    "description": "Route53 Delegation Set"
  },
  "frAwsRoute53DelegationSet": {
    "prefix": "frAwsRoute53DelegationSet",
    "body": "resource \"aws_route53_delegation_set\" \"${1:name}\" {\n  reference_name = \"${1}\"\n}",
    "description": "Route53 Delegation Set"
  },
  "srAwsRoute53HealthCheck": {
    "prefix": "srAwsRoute53HealthCheck",
    "body": "resource \"aws_route53_health_check\" \"${1:name}\" {\n  type = \"${2:foo}\"\n}",
    "description": "Route53 Health Check"
  },
  "frAwsRoute53HealthCheck": {
    "prefix": "frAwsRoute53HealthCheck",
    "body": "resource \"aws_route53_health_check\" \"${1:name}\" {\n  type                            = \"${2:foo}\"\n  failure_threshold               = 1\n  request_interval                = 1\n  ip_address                      = \"\"\n  fqdn                            = \"\"\n  port                            = 1\n  invert_healthcheck              = true|false\n  resource_path                   = \"\"\n  search_string                   = \"\"\n  measure_latency                 = true|false\n  child_healthchecks              = [\"\"]\n  child_health_threshold          = 1\n  cloudwatch_alarm_name           = \"\"\n  cloudwatch_alarm_region         = \"\"\n  insufficient_data_health_status = \"\"\n  reference_name                  = \"\"\n  enable_sni                      = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Route53 Health Check"
  },
  "srAwsRoute53Record": {
    "prefix": "srAwsRoute53Record",
    "body": "resource \"aws_route53_record\" \"${1:name}\" {\n  name    = \"${2:foo}\"\n  type    = \"${3:bar}\"\n  zone_id = \"\\$\\{aws_route53_zone.${4:baz}.zone_id}\"\n}",
    "description": "Route53 Record"
  },
  "frAwsRoute53Record": {
    "prefix": "frAwsRoute53Record",
    "body": "resource \"aws_route53_record\" \"${1:name}\" {\n  name                       = \"${2:foo}\"\n  type                       = \"${3:bar}\"\n  zone_id                    = \"\\$\\{aws_route53_zone.${4:baz}.zone_id}\"\n  ttl                        = 300 # Conflicts with Alias\n  set_identifier             = \"\"\n  alias \\{\n    zone_id                = \"\"\n    name                   = \"\"\n    evaluate_target_health = true|false\n  }\n  # Use only one policy\n  failover_routing_policy \\{\n    type = \"\"\n  }\n  latency_routing_policy \\{\n    region = \"\"\n  }\n  geolocation_routing_policy \\{\n    continent   = \"\"\n    country     = \"\"\n    subdivision = \"\"\n  }\n  weighted_routing_policy \\{\n    weight = 1\n  }\n  health_check_id            = \"\"\n  records                    = [\"\"] # Conflicts with Alias\n}",
    "description": "Route53 Record"
  },
  "srAwsRoute53Zone": {
    "prefix": "srAwsRoute53Zone",
    "body": "resource \"aws_route53_zone\" \"${1:name}\" {\n  name = \"${2:foo}\"\n}",
    "description": "Route53 Hosted Zone"
  },
  "frAwsRoute53Zone": {
    "prefix": "frAwsRoute53Zone",
    "body": "resource \"aws_route53_zone\" \"${1:name}\" {\n  name              = \"${2:foo}\"\n  comment           = \"\"\n  vpc_id            = \"\\$\\{aws_vpc.${3:bar}.id}\"\n  vpc_region        = \"\"\n  delegation_set_id = \"\" # conflicts with vpc_id\n  force_destroy     = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Route53 Hosted Zone"
  },
  "srAwsRoute53ZoneAssociation": {
    "prefix": "srAwsRoute53ZoneAssociation",
    "body": "resource \"aws_route53_zone_association\" \"${1:name}\" {\n  zone_id = \"\\$\\{aws_route53_zone.${2:foo}.zone_id}\"\n  vpc_id  = \"\\$\\{aws_vpc.${3:bar}.id}\"\n}",
    "description": "Route53 Private Zone VPC Association"
  },
  "frAwsRoute53ZoneAssociation": {
    "prefix": "frAwsRoute53ZoneAssociation",
    "body": "resource \"aws_route53_zone_association\" \"${1:name}\" {\n  zone_id    = \"\\$\\{aws_route53_zone.${2:foo}.zone_id}\"\n  vpc_id     = \"\\$\\{aws_vpc.${3:bar}.id}\"\n  vpc_region = \"\"\n}",
    "description": "Route53 Private Zone VPC Association"
  },
  "srAwsRouteTable": {
    "prefix": "srAwsRouteTable",
    "body": "# Warning: do not use with aws_route\nresource \"aws_route_table\" \"${1:name}\" {\n  vpc_id = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  route \\{\n    cidr_block                = \"\"\n    ipv6_cidr_block           = \"\"\n    egress_only_gateway_id    = \"\"\n    gateway_id                = \"\" # target\n    instance_id               = \"\" # target\n    nat_gateway_id            = \"\" # target\n    vpc_peering_connection_id = \"\" # target\n    network_interface_id      = \"\" # target\n  }\n}",
    "description": "VPC Routing Table"
  },
  "frAwsRouteTable": {
    "prefix": "frAwsRouteTable",
    "body": "# Warning: do not use with aws_route\nresource \"aws_route_table\" \"${1:name}\" {\n  vpc_id           = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  propagating_vgws = [\"\"]\n  # One of the below 'target' must be set.\n  route \\{\n    cidr_block                = \"\"\n    ipv6_cidr_block           = \"\"\n    egress_only_gateway_id    = \"\"\n    gateway_id                = \"\" # target\n    instance_id               = \"\" # target\n    nat_gateway_id            = \"\" # target\n    vpc_peering_connection_id = \"\" # target\n    network_interface_id      = \"\" # target\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "VPC Routing Table"
  },
  "srAwsRouteTableAssociation": {
    "prefix": "srAwsRouteTableAssociation",
    "body": "resource \"aws_route_table_association\" \"${1:name}\" {\n  subnet_id      = \"\\$\\{aws_subnet.${2:foo}.id}\"\n  route_table_id = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "Route Table to Subnet Association"
  },
  "frAwsRouteTableAssociation": {
    "prefix": "frAwsRouteTableAssociation",
    "body": "resource \"aws_route_table_association\" \"${1:name}\" {\n  subnet_id      = \"\\$\\{aws_subnet.${2:foo}.id}\"\n  route_table_id = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "Route Table to Subnet Association"
  },
  "srAwsS3Bucket": {
    "prefix": "srAwsS3Bucket",
    "body": "resource \"aws_s3_bucket\" \"${1:name}\" {\n  bucket = \"${2:foo}\"\n}",
    "description": "S3 Bucket"
  },
  "frAwsS3Bucket": {
    "prefix": "frAwsS3Bucket",
    "body": "resource \"aws_s3_bucket\" \"${1:name}\" {\n  bucket                    = \"${2:foo}\"\n  arn                       = \"\"\n  acl                       = \"private\"\n  policy                    = \"\"\n  cors_rule \\{\n    allowed_headers = [\"\"]\n    allowed_methods = [\"\"]\n    allowed_origins = [\"\"]\n    expose_headers  = [\"\"]\n    max_age_seconds = 1\n  }\n  website \\{\n    index_document           = \"\"\n    error_document           = \"\"\n    redirect_all_requests_to = \"\"\n    routing_rules            = \"\"\n  }\n  hosted_zone_id            = \"\"\n  region                    = \"\"\n  website_endpoint          = \"\"\n  website_domain            = \"\"\n  versioning \\{\n    enabled    = true|false\n    mfa_delete = true|false\n  }\n  logging \\{\n    target_bucket = \"\"\n    target_prefix = \"\"\n  }\n  lifecycle_rule \\{\n    id                                     = \"\"\n    prefix                                 = \"\"\n    enabled                                = true|false\n    abort_incomplete_multipart_upload_days = 1\n    expiration \\{\n      date                         = \"\"\n      days                         = 1\n      expired_object_delete_marker = true|false\n    }\n    noncurrent_version_expiration \\{\n      days = 1\n    }\n    transition \\{\n      date          = \"\"\n      days          = 1\n      storage_class = \"\"\n    }\n    noncurrent_version_transition \\{\n      days          = 1\n      storage_class = \"\"\n    }\n  }\n  force_destroy             = true|false\n  acceleration_status       = \"\"\n  request_payer             = \"\"\n  replication_configuration \\{\n    role = \"\"\n    rules \\{\n      id     = \"\"\n      destination \\{\n        bucket        = \"\"\n        storage_class = \"\"\n      }\n      prefix = \"\"\n      status = \"\"\n    }\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "S3 Bucket"
  },
  "srAwsS3BucketNotification": {
    "prefix": "srAwsS3BucketNotification",
    "body": "resource \"aws_s3_bucket_notification\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.id}\"\n}",
    "description": "S3 Bucket Notification"
  },
  "frAwsS3BucketNotification": {
    "prefix": "frAwsS3BucketNotification",
    "body": "resource \"aws_s3_bucket_notification\" \"${1:name}\" {\n  bucket          = \"\\$\\{aws_s3_bucket.${2:foo}.id}\"\n  topic \\{\n    id            = \"${1}\"\n    filter_prefix = \"\"\n    filter_suffix = \".log\"\n    topic_arn     = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n    events        = [\"s3:ObjectCreated:*\"]\n  }\n  queue \\{\n    id            = \"${1}\"\n    filter_prefix = \"\"\n    filter_suffix = \".log\"\n    queue_arn     = \"\\$\\{aws_sqs_queue.${4:baz}.arn}\"\n    events        = [\"s3:ObjectCreated:*\"]\n  }\n  lambda_function \\{\n    id                  = \"${1}\"\n    filter_prefix       = \"\"\n    filter_suffix       = \".log\"\n    lambda_function_arn = \"\\$\\{aws_lambda_function.${5:qux}.arn}\"\n    events              = [\"s3:ObjectCreated:*\"]\n  }\n}",
    "description": "S3 Bucket Notification"
  },
  "srAwsS3BucketObject": {
    "prefix": "srAwsS3BucketObject",
    "body": "resource \"aws_s3_bucket_object\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  key    = \"${1}\"\n}",
    "description": "S3 Bucket Object"
  },
  "frAwsS3BucketObject": {
    "prefix": "frAwsS3BucketObject",
    "body": "resource \"aws_s3_bucket_object\" \"${1:name}\" {\n  bucket                 = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  key                    = \"${1}\"\n  acl                    = \"private\"\n  cache_control          = \"\"\n  content_disposition    = \"\"\n  content_encoding       = \"\"\n  content_language       = \"\"\n  content_type           = \"\"\n  source                 = \"\"\n  content                = \"\"\n  storage_class          = \"STANDARD\"\n  server_side_encryption = \"\"\n  kms_key_id             = \"\\$\\{aws_kms_key.${3:bar}.arn}\"\n  etag                   = \"\\$\\{md5(file(\"path/to/file\"))}\"\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "S3 Bucket Object"
  },
  "srAwsS3BucketPolicy": {
    "prefix": "srAwsS3BucketPolicy",
    "body": "resource \"aws_s3_bucket_policy\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  policy = \"\\$\\{data.aws_iam_policy_document.${3:bar}.json}\"\n}",
    "description": "S3 Bucket Policy Attachment"
  },
  "frAwsS3BucketPolicy": {
    "prefix": "frAwsS3BucketPolicy",
    "body": "resource \"aws_s3_bucket_policy\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  policy = \"\\$\\{data.aws_iam_policy_document.${3:bar}.json}\"\n}",
    "description": "S3 Bucket Policy Attachment"
  },
  "srAwsSecurityGroup": {
    "prefix": "srAwsSecurityGroup",
    "body": "resource \"aws_security_group\" \"${1:name}\" {\n}",
    "description": "Security Group"
  },
  "frAwsSecurityGroup": {
    "prefix": "frAwsSecurityGroup",
    "body": "resource \"aws_security_group\" \"${1:name}\" {\n  name        = \"${1}\" # Conflicts with name_prefix\n  name_prefix = \"\"\n  description = \"Managed by Terraforma\" # Cannot be updated\n  vpc_id      = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  ingress \\{\n    from_port        = 1\n    to_port          = 1\n    protocol         = \"\"\n    cidr_blocks      = [\"\"]\n    ipv6_cidr_blocks = [\"\"]\n    security_groups  = [\"\"]\n    self             = true|false\n  }\n  egress \\{\n    from_port        = 1\n    to_port          = 1\n    protocol         = \"\"\n    cidr_blocks      = [\"\"]\n    ipv6_cidr_blocks = [\"\"]\n    prefix_list_ids  = [\"\"]\n    security_groups  = [\"\"]\n    self             = true|false\n  }\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Security Group"
  },
  "srAwsSecurityGroupRule": {
    "prefix": "srAwsSecurityGroupRule",
    "body": "resource \"aws_security_group_rule\" \"${1:name}\" {\n  type              = \"ingress\"|\"egress\"\n  from_port         = 1\n  to_port           = 1\n  protocol          = \"\"\n  security_group_id = \"sg-\"\n}",
    "description": "Security Group Rule"
  },
  "frAwsSecurityGroupRule": {
    "prefix": "frAwsSecurityGroupRule",
    "body": "resource \"aws_security_group_rule\" \"${1:name}\" {\n  type                     = \"\"\n  from_port                = 1\n  to_port                  = 1\n  protocol                 = \"\"\n  security_group_id        = \"sg-\"\n  cidr_blocks              = [\"\"]\n  ipv6_cidr_blocks         = [\"\"]\n  prefix_list_ids          = [\"\\$\\{aws_vpc_endpoint.${2:foo}.prefix_list_id}\"]\n  source_security_group_id = \"\" # Cannot be used with cidr_blocks\n  self                     = true|false\n}",
    "description": "Security Group Rule"
  },
  "srAwsSesActiveReceiptRuleSet": {
    "prefix": "srAwsSesActiveReceiptRuleSet",
    "body": "resource \"aws_ses_active_receipt_rule_set\" \"${1:name}\" {\n  rule_set_name = \"${1}\"\n}",
    "description": "SES Active Receipt Rule Set"
  },
  "frAwsSesActiveReceiptRuleSet": {
    "prefix": "frAwsSesActiveReceiptRuleSet",
    "body": "resource \"aws_ses_active_receipt_rule_set\" \"${1:name}\" {\n  rule_set_name = \"${1}\"\n}",
    "description": "SES Active Receipt Rule Set"
  },
  "srAwsSesConfigurationSet": {
    "prefix": "srAwsSesConfigurationSet",
    "body": "resource \"aws_ses_configuration_set\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "SES Configuration Set"
  },
  "frAwsSesConfigurationSet": {
    "prefix": "frAwsSesConfigurationSet",
    "body": "resource \"aws_ses_configuration_set\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "SES Configuration Set"
  },
  "srAwsSesDomainIdentity": {
    "prefix": "srAwsSesDomainIdentity",
    "body": "resource \"aws_ses_domain_identity\" \"${1:name}\" {\n  domain = \"${2:domain}\"\n}",
    "description": "SES Domain Identity"
  },
  "frAwsSesDomainIdentity": {
    "prefix": "frAwsSesDomainIdentity",
    "body": "resource \"aws_ses_domain_identity\" \"${1:name}\" {\n  domain = \"${2:domain}\"\n}",
    "description": "SES Domain Identity"
  },
  "srAwsSesEventDestination": {
    "prefix": "srAwsSesEventDestination",
    "body": "resource \"aws_ses_event_destination\" \"${1:name}\" {\n  name                   = \"${1}\"\n  configuration_set_name = \"\\$\\{aws_ses_configuration_set.${2:foo}.name}\"\n  matching_types         = [\"send\",\"reject\",\"bounce\",\"complaint\",\"delivery\"]\n}",
    "description": "SES Event Destination"
  },
  "frAwsSesEventDestination": {
    "prefix": "frAwsSesEventDestination",
    "body": "resource \"aws_ses_event_destination\" \"${1:name}\" {\n  name                   = \"${1}\"\n  configuration_set_name = \"\\$\\{aws_ses_configuration_set.${2:foo}.name}\"\n  matching_types         = [\"send\",\"reject\",\"bounce\",\"complaint\",\"delivery\"]\n  enabled                = true|false\n  cloudwatch_destination \\{ # Conflicts with kinesis_destination\n    default_value  = \"default\"\n    dimension_name = \"dimension\"\n    value_source   = \"emailHeader\"\n  }\n  kinesis_destination \\{\n    stream_arn = \"\\$\\{aws_kinesis_firehose_delivery_stream.${3:bar}.arn}\"\n    role_arn   = \"\\${aws_iam_role.${4:baz}.arn}\"\n  }\n}",
    "description": "SES Event Destination"
  },
  "srAwsSesReceiptFilter": {
    "prefix": "srAwsSesReceiptFilter",
    "body": "resource \"aws_ses_receipt_filter\" \"${1:name}\" {\n  name   = \"${1}\"\n  cidr   = \"${2:foo}\"\n  policy = \"Block\"|\"Allow\"\n}",
    "description": "SES Receipt Filter"
  },
  "frAwsSesReceiptFilter": {
    "prefix": "frAwsSesReceiptFilter",
    "body": "resource \"aws_ses_receipt_filter\" \"${1:name}\" {\n  name   = \"${1}\"\n  cidr   = \"${2:foo}\"\n  policy = \"Block\"|\"Allow\"\n}",
    "description": "SES Receipt Filter"
  },
  "srAwsSesReceiptRule": {
    "prefix": "srAwsSesReceiptRule",
    "body": "resource \"aws_ses_receipt_rule\" \"${1:name}\" {\n  name          = \"${1}\"\n  rule_set_name = \"${2:foo}\"\n}",
    "description": "SES Receipt Rule"
  },
  "frAwsSesReceiptRule": {
    "prefix": "frAwsSesReceiptRule",
    "body": "resource \"aws_ses_receipt_rule\" \"${1:name}\" {\n  name              = \"${1}\"\n  rule_set_name     = \"${2:foo}\"\n  after             = \"\"\n  enabled           = true|false\n  recipients        = [\"user@domain.com\"]\n  scan_enabled      = true|false\n  tls_policy        = \"\"\n  add_header_action \\{\n    header_name  = \"\"\n    header_value = \"\"\n    position     = 1\n  }\n  bounce_action \\{\n    message         = \"\"\n    sender          = \"\"\n    smtp_reply_code = \"\"\n    status_code     = \"\"\n    topic_arn       = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n    position        = 1\n  }\n  lambda_action \\{\n    function_arn    = \"\"\n    invocation_type = \"\"\n    topic_arn       = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n    position        = 1\n  }\n  s3_action \\{\n    bucket_name       = \"\"\n    kms_key_arn       = \"\"\n    object_key_prefix = \"\"\n    topic_arn         = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n    position          = 1\n  }\n  sns_action \\{\n    topic_arn = \"\\$\\{aws_sns_topic.${3:bar}.arn}\"\n    position  = 1\n  }\n  stop_action \\{\n    scope     = \"\"\n    topic_arn = \"\"\n    position  = 1\n  }\n  workmail_action \\{\n    organization_arn = \"\"\n    topic_arn        = \"\"\n    position         = 1\n  }\n}",
    "description": "SES Receipt Rule"
  },
  "srAwsSesReceiptRuleSet": {
    "prefix": "srAwsSesReceiptRuleSet",
    "body": "resource \"aws_ses_receipt_rule_set\" \"${1:name}\" {\n  rule_set_name = \"${1}\"\n}",
    "description": "SES Receipt Rule Set"
  },
  "frAwsSesReceiptRuleSet": {
    "prefix": "frAwsSesReceiptRuleSet",
    "body": "resource \"aws_ses_receipt_rule_set\" \"${1:name}\" {\n  rule_set_name = \"${1}\"\n}",
    "description": "SES Receipt Rule Set"
  },
  "srAwsSfnActivity": {
    "prefix": "srAwsSfnActivity",
    "body": "resource \"aws_sfn_activity\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Step Function Activity"
  },
  "frAwsSfnActivity": {
    "prefix": "frAwsSfnActivity",
    "body": "resource \"aws_sfn_activity\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Step Function Activity"
  },
  "srAwsSfnStateMachine": {
    "prefix": "srAwsSfnStateMachine",
    "body": "resource \"aws_sfn_state_machine\" \"${1:name}\" {\n  name       = \"${1}\"\n  role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  definition = \"\\{...}\"\n}",
    "description": "Step Function State Machine"
  },
  "frAwsSfnStateMachine": {
    "prefix": "frAwsSfnStateMachine",
    "body": "resource \"aws_sfn_state_machine\" \"${1:name}\" {\n  name       = \"${1}\"\n  role_arn   = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  definition = \"\\{...}\"\n}",
    "description": "Step Function State Machine"
  },
  "srAwsSimpleDBDomain": {
    "prefix": "srAwsSimpleDBDomain",
    "body": "resource \"aws_simpledb_domain\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Simple DB Domain"
  },
  "frAwsSimpleDBDomain": {
    "prefix": "frAwsSimpleDBDomain",
    "body": "resource \"aws_simpledb_domain\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "Simple DB Domain"
  },
  "srAwsSnapshotCreateVolumePermission": {
    "prefix": "srAwsSnapshotCreateVolumePermission",
    "body": "resource \"aws_snapshot_create_volume_permission\" \"${1:name}\" {\n  snapshot_id = \"\\$\\{aws_ebs_snapshot.${2:foo}.id}\"\n  account_id  = \"12345678\"\n}",
    "description": "Allows EBS Snapshot to Account"
  },
  "frAwsSnapshotCreateVolumePermission": {
    "prefix": "frAwsSnapshotCreateVolumePermission",
    "body": "resource \"aws_snapshot_create_volume_permission\" \"${1:name}\" {\n  snapshot_id = \"\\$\\{aws_ebs_snapshot.${2:foo}.id}\"\n  account_id  = \"12345678\"\n}",
    "description": "Allows EBS Snapshot to Account"
  },
  "srAwsSnsTopic": {
    "prefix": "srAwsSnsTopic",
    "body": "resource \"aws_sns_topic\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "SNS Topic"
  },
  "frAwsSnsTopic": {
    "prefix": "frAwsSnsTopic",
    "body": "resource \"aws_sns_topic\" \"${1:name}\" {\n  name            = \"${1}\"\n  display_name    = \"${1}\"\n  policy          = \"\\$\\{data.aws_iam_policy_document.${2:foo}.json}\"\n  delivery_policy = \"sns-delivery-policy\"\n}",
    "description": "SNS Topic"
  },
  "srAwsSnsTopicPolicy": {
    "prefix": "srAwsSnsTopicPolicy",
    "body": "resource \"aws_sns_topic_policy\" \"${1:name}\" {\n  arn    = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  policy = \"\\{jsondoc}\"\n}",
    "description": "SNS Topic Policy"
  },
  "frAwsSnsTopicPolicy": {
    "prefix": "frAwsSnsTopicPolicy",
    "body": "resource \"aws_sns_topic_policy\" \"${1:name}\" {\n  arn    = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  policy = \"\\{jsondoc}\"\n}",
    "description": "SNS Topic Policy"
  },
  "srAwsSnsTopicSubscription": {
    "prefix": "srAwsSnsTopicSubscription",
    "body": "resource \"aws_sns_topic_subscription\" \"${1:name}\" {\n  topic_arn = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  protocol  = \"sqs\"|\"lambda\"|\"application\"\n  endpoint  = \"\\$\\{aws_sqs_queue.${3:bar}.arn}\"\n}",
    "description": "SNS Topic Subscription"
  },
  "frAwsSnsTopicSubscription": {
    "prefix": "frAwsSnsTopicSubscription",
    "body": "resource \"aws_sns_topic_subscription\" \"${1:name}\" {\n  topic_arn                       = \"\\$\\{aws_sns_topic.${2:foo}.arn}\"\n  protocol                        = \"sqs\"|\"lambda\"|\"application\"\n  endpoint                        = \"\\$\\{aws_sqs_queue.${3:bar}.arn}\"\n  endpoint_auto_confirms          = true|false\n  confirmation_timeout_in_minutes = 1\n  delivery_policy                 = \"\"\n  raw_message_delivery            = true|false\n}",
    "description": "SNS Topic Subscription"
  },
  "srAwsSpotDataFeedSubscription": {
    "prefix": "srAwsSpotDataFeedSubscription",
    "body": "resource \"aws_spot_data_feed_subscription\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n}",
    "description": "EC2 Spot DataFeed Subscription"
  },
  "frAwsSpotDataFeedSubscription": {
    "prefix": "frAwsSpotDataFeedSubscription",
    "body": "# Note: Only one por account.\nresource \"aws_spot_data_feed_subscription\" \"${1:name}\" {\n  bucket = \"\\$\\{aws_s3_bucket.${2:foo}.bucket}\"\n  prefix = \"subdir\"\n}",
    "description": "EC2 Spot DataFeed Subscription"
  },
  "srAwsSpotFleetRequest": {
    "prefix": "srAwsSpotFleetRequest",
    "body": "resource \"aws_spot_fleet_request\" \"${1:name}\" {\n  iam_fleet_role       = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  launch_specification \\{ # Can be used several times.\n    vpc_security_group_ids       = [\"\"]\n    associate_public_ip_address  = true|false\n    ebs_block_device \\{\n      delete_on_termination = true|false\n      device_name           = \"\"\n      encrypted             = true|false\n      iops                  = 1\n      snapshot_id           = \"\"\n      volume_size           = 1\n      volume_type           = \"\"\n    }\n    ephemeral_block_device \\{\n      device_name  = \"\"\n      virtual_name = \"\"\n    }\n    root_block_device \\{\n      delete_on_termination = true|false\n      iops                  = 1\n      volume_size           = 1\n      volume_type           = \"\"\n    }\n    ebs_optimized                = true|false\n    iam_instance_profile         = \"\"\n    ami                          = \"\"\n    instance_type                = \"\"\n    key_name                     = \"\"\n    monitoring                   = true|false\n    placement_group              = \"\"\n    spot_price                   = \"\"\n    user_data                    = \"\"\n    weighted_capacity            = \"\"\n    subnet_id                    = \"\"\n    availability_zone            = \"\"\n  }\n  target_capacity      = 1\n  spot_price           = \"\"\n}",
    "description": "Request EC2 Spot Fleet"
  },
  "frAwsSpotFleetRequest": {
    "prefix": "frAwsSpotFleetRequest",
    "body": "resource \"aws_spot_fleet_request\" \"${1:name}\" {\n  iam_fleet_role                      = \"\\$\\{aws_iam_role.${2:foo}.arn}\"\n  launch_specification \\{ # Can be used several times.\n    vpc_security_group_ids       = [\"\"]\n    associate_public_ip_address  = true|false\n    ebs_block_device \\{\n      delete_on_termination = true|false\n      device_name           = \"\"\n      encrypted             = true|false\n      iops                  = 1\n      snapshot_id           = \"\"\n      volume_size           = 1\n      volume_type           = \"\"\n    }\n    ephemeral_block_device \\{\n      device_name  = \"\"\n      virtual_name = \"\"\n    }\n    root_block_device \\{\n      delete_on_termination = true|false\n      iops                  = 1\n      volume_size           = 1\n      volume_type           = \"\"\n    }\n    ebs_optimized                = true|false\n    iam_instance_profile         = \"\"\n    ami                          = \"\"\n    instance_type                = \"\"\n    key_name                     = \"\"\n    monitoring                   = true|false\n    placement_group              = \"\"\n    spot_price                   = \"\"\n    user_data                    = \"\"\n    weighted_capacity            = \"\"\n    subnet_id                    = \"\"\n    availability_zone            = \"\"\n  }\n  target_capacity                     = 1\n  spot_price                          = \"\"\n  replace_unhealthy_instances         = true|false\n  allocation_strategy                 = \"\"\n  excess_capacity_termination_policy  = \"\"\n  terminate_instances_with_expiration = true|false\n  valid_from                          = \"\"\n  valid_until                         = \"\"\n}",
    "description": "Request EC2 Spot Fleet"
  },
  "srAwsSpotInstanceRequest": {
    "prefix": "srAwsSpotInstanceRequest",
    "body": "resource \"aws_spot_instance_request\" \"${1:name}\" {\n  spot_price = \"${2:foo}\"\n}",
    "description": "EC2 Spot Instance Request"
  },
  "frAwsSpotInstanceRequest": {
    "prefix": "frAwsSpotInstanceRequest",
    "body": "resource \"aws_spot_instance_request\" \"${1:name}\" {\n  spot_price             = \"${2:foo}\"\n  spot_type              = \"\"\n  wait_for_fulfillment   = true|false\n  block_duration_minutes = 120 # Multiple of 60\n}",
    "description": "EC2 Spot Instance Request"
  },
  "srAwsSqsQueue": {
    "prefix": "srAwsSqsQueue",
    "body": "resource \"aws_sqs_queue\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "SQS Queue"
  },
  "frAwsSqsQueue": {
    "prefix": "frAwsSqsQueue",
    "body": "resource \"aws_sqs_queue\" \"${1:name}\" {\n  name                        = \"${1}\"\n  delay_seconds               = 0\n  max_message_size            = 262144 # Max 262144\n  message_retention_seconds   = 345600 # Max 1209600\n  receive_wait_time_seconds   = 0 # Max 20\n  visibility_timeout_seconds  = 30 # Max 43200\n  redrive_policy              = \"\\{\\\\\"deadLetterTargetArn\\\\\":\\\\\"\\$\\{aws_sqs_queue.${2:foo}.arn}\\\\\",\\\\\"maxReceiveCount\\\\\":4}\"\n  policy                      = \"\"\n  fifo_queue                  = true|false\n  content_based_deduplication = true|false\n}",
    "description": "SQS Queue"
  },
  "srAwsSqsQueuePolicy": {
    "prefix": "srAwsSqsQueuePolicy",
    "body": "resource \"aws_sqs_queue_policy\" \"${1:name}\" {\n  queue_url = \"\\$\\{aws_sqs_queue.${2:foo}.id}\"\n  policy    = \"\"\n}",
    "description": "SQS Queue Policy"
  },
  "frAwsSqsQueuePolicy": {
    "prefix": "frAwsSqsQueuePolicy",
    "body": "resource \"aws_sqs_queue_policy\" \"${1:name}\" {\n  queue_url = \"\\$\\{aws_sqs_queue.${2:foo}.id}\"\n  policy    = \"\"\n}",
    "description": "SQS Queue Policy"
  },
  "srAwsSsmActivation": {
    "prefix": "srAwsSsmActivation",
    "body": "resource \"aws_ssm_activation\" \"${1:name}\" {\n  iam_role = \"\\$\\{aws_iam_role.${2:foo}.id}\"\n}",
    "description": "Activate on-prem machine with EC2 System Manager"
  },
  "frAwsSsmActivation": {
    "prefix": "frAwsSsmActivation",
    "body": "resource \"aws_ssm_activation\" \"${1:name}\" {\n  iam_role           = \"\\$\\{aws_iam_role.${2:foo}.id}\"\n  name               = \"${1}\"\n  description        = \"\"\n  expiration_date    = \"\"\n  registration_limit = 1\n}",
    "description": "Activate on-prem machine with EC2 System Manager"
  },
  "srAwsSsmAssociation": {
    "prefix": "srAwsSsmAssociation",
    "body": "resource \"aws_ssm_association\" \"${1:name}\" {\n  instance_id = \"\\$\\{aws_instance.${2:foo}.id}\"\n  name        = \"${1}\"\n}",
    "description": "SSM Document Association to Instance"
  },
  "frAwsSsmAssociation": {
    "prefix": "frAwsSsmAssociation",
    "body": "resource \"aws_ssm_association\" \"${1:name}\" {\n  instance_id = \"\\$\\{aws_instance.${2:foo}.id}\"\n  name        = \"${1}\"\n  parameters \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "SSM Document Association to Instance"
  },
  "srAwsSsmDocument": {
    "prefix": "srAwsSsmDocument",
    "body": "resource \"aws_ssm_document\" \"${1:name}\" {\n  name          = \"${1}\"\n  content       = \"\\{json}\"\n  document_type = \"Command\"|\"Policy\"|\"Automation\"\n}",
    "description": "SSM Document"
  },
  "frAwsSsmDocument": {
    "prefix": "frAwsSsmDocument",
    "body": "resource \"aws_ssm_document\" \"${1:name}\" {\n  name          = \"${1}\"\n  content       = \"\\{json}\"\n  document_type = \"Command\"|\"Policy\"|\"Automation\"\n  permissions \\{\n    type        = \"Share\"\n    account_ids = \"All\"\n  }\n}",
    "description": "SSM Document"
  },
  "srAwsSubnet": {
    "prefix": "srAwsSubnet",
    "body": "resource \"aws_subnet\" \"${1:name}\" {\n  vpc_id     = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  cidr_block = \"\"\n}",
    "description": "VPC Subnet"
  },
  "frAwsSubnet": {
    "prefix": "frAwsSubnet",
    "body": "resource \"aws_subnet\" \"${1:name}\" {\n  vpc_id                          = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  cidr_block                      = \"\"\n  ipv6_cidr_block                 = \"\"\n  availability_zone               = \"\"\n  map_public_ip_on_launch         = true|false\n  assign_ipv6_address_on_creation = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "VPC Subnet"
  },
  "srAwsVolumeAttachment": {
    "prefix": "srAwsVolumeAttachment",
    "body": "resource \"aws_volume_attachment\" \"${1:name}\" {\n  device_name = \"/dev/sdX\"\n  instance_id = \"\\$\\{aws_instance.${2:foo}.id}\"\n  volume_id   = \"\\$\\{aws_ebs_volume.${3:bar}.id}\"\n}",
    "description": "AWS EBS Volume Attachment"
  },
  "frAwsVolumeAttachment": {
    "prefix": "frAwsVolumeAttachment",
    "body": "resource \"aws_volume_attachment\" \"${1:name}\" {\n  device_name  = \"/dev/sdX\"\n  instance_id  = \"\\$\\{aws_instance.${2:foo}.id}\"\n  volume_id    = \"\\$\\{aws_ebs_volume.${3:bar}.id}\"\n  force_detach = true|false\n  skip_destroy = true|false\n}",
    "description": "AWS EBS Volume Attachment"
  },
  "srAwsVpc": {
    "prefix": "srAwsVpc",
    "body": "resource \"aws_vpc\" \"${1:name}\" {\n  cidr_block = \"10.0.0.0/16\"\n}",
    "description": "Virtual Private Cloud"
  },
  "frAwsVpc": {
    "prefix": "frAwsVpc",
    "body": "resource \"aws_vpc\" \"${1:name}\" {\n  cidr_block                       = \"10.0.0.0/16\"\n  instance_tenancy                 = \"\"\n  enable_dns_hostnames             = true|false\n  enable_dns_support               = true|false\n  enable_classiclink               = true|false\n  assign_generated_ipv6_cidr_block = true|false\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "Virtual Private Cloud"
  },
  "srAwsVpcDhcpOptions": {
    "prefix": "srAwsVpcDhcpOptions",
    "body": "resource \"aws_vpc_dhcp_options\" \"${1:name}\" {\n# Must specify one of these at least:\n  domain_name          = \"mydomain\"\n  domain_name_servers  = [\"8.8.8.8\",\"4.2.2.2\"]\n  ntp_servers          = [\"127.0.0.1\"]\n  netbios_node_type    = \"2\"|\"1\"|\"4\"|\"8\"\n  netbios_name_servers = [\"127.0.0.1\"]\n}",
    "description": "VPC DHCP Options"
  },
  "frAwsVpcDhcpOptions": {
    "prefix": "frAwsVpcDhcpOptions",
    "body": "resource \"aws_vpc_dhcp_options\" \"${1:name}\" {\n  domain_name          = \"mydomain\"\n  domain_name_servers  = [\"8.8.8.8\",\"4.2.2.2\"]\n  ntp_servers          = [\"127.0.0.1\"]\n  netbios_node_type    = \"2\"|\"1\"|\"4\"|\"8\"\n  netbios_name_servers = [\"127.0.0.1\"]\n  tags \\{\n    key = \"\\$\\{var.SOMEVAL}\"\n  }\n}",
    "description": "VPC DHCP Options"
  },
  "srAwsVpcDhcpOptionsAssociation": {
    "prefix": "srAwsVpcDhcpOptionsAssociation",
    "body": "resource \"aws_vpc_dhcp_options_association\" \"${1:name}\" {\n  vpc_id          = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  dhcp_options_id = \"\\$\\{aws_vpc_dhcp_options.${3:bar}.id}\"\n}",
    "description": "VPC DHCP Options Association"
  },
  "frAwsVpcDhcpOptionsAssociation": {
    "prefix": "frAwsVpcDhcpOptionsAssociation",
    "body": "resource \"aws_vpc_dhcp_options_association\" \"${1:name}\" {\n  vpc_id          = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  dhcp_options_id = \"\\$\\{aws_vpc_dhcp_options.${3:bar}.id}\"\n}",
    "description": "VPC DHCP Options Association"
  },
  "srAwsVpcEndpoint": {
    "prefix": "srAwsVpcEndpoint",
    "body": "resource \"aws_vpc_endpoint\" \"${1:name}\" {\n  vpc_id       = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  service_name = \"${3:bar}\"\n}",
    "description": "VPC Endpoint"
  },
  "frAwsVpcEndpoint": {
    "prefix": "frAwsVpcEndpoint",
    "body": "resource \"aws_vpc_endpoint\" \"${1:name}\" {\n  vpc_id          = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  service_name    = \"${3:bar}\"\n  policy          = \"\"\n  route_table_ids = [\"\"] # Do not use in conjunction with vpc_endpoint_route_table_association\n}",
    "description": "VPC Endpoint"
  },
  "srAwsVpcEndpointRouteTableAssociation": {
    "prefix": "srAwsVpcEndpointRouteTableAssociation",
    "body": "resource \"aws_vpc_endpoint_route_table_association\" \"${1:name}\" {\n  vpc_endpoint_id = \"\\$\\{aws_vpc_endpoint.${2:foo}.id}\"\n  route_table_id  = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "VPC Endpoint to Route Table Association"
  },
  "frAwsVpcEndpointRouteTableAssociation": {
    "prefix": "frAwsVpcEndpointRouteTableAssociation",
    "body": "resource \"aws_vpc_endpoint_route_table_association\" \"${1:name}\" {\n  vpc_endpoint_id = \"\\$\\{aws_vpc_endpoint.${2:foo}.id}\"\n  route_table_id  = \"\\$\\{aws_route_table.${3:bar}.id}\"\n}",
    "description": "VPC Endpoint to Route Table Association"
  },
  "srAwsVpcPeeringConnection": {
    "prefix": "srAwsVpcPeeringConnection",
    "body": "resource \"aws_vpc_peering_connection\" \"${1:name}\" {\n  peer_owner_id = \"\\$\\{var.peer_owner_id}\"\n  peer_vpc_id  = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  vpc_id       = \"\\$\\{aws_vpc.${3:bar}.id}\"\n}",
    "description": "VPC Peering Connection"
  },
  "frAwsVpcPeeringConnection": {
    "prefix": "frAwsVpcPeeringConnection",
    "body": "resource \"aws_vpc_peering_connection\" \"${1:name}\" {\n  peer_vpc_id   = \"$\\{aws_vpc.${2:foo}.id}\"\n  vpc_id        = \"\\$\\{aws_vpc.${3:bar}.id}\"\n  peer_owner_id = \"\\$\\{var.peer_owner_id}\"\n  auto_accept   = true|false\n  accepter \\{\n    allow_remote_vpc_dns_resolution  = true|false\n    allow_classic_link_to_remote_vpc = true|false\n    allow_vpc_to_remote_classic_link = true|false\n  }\n  requester \\{\n    allow_remote_vpc_dns_resolution  = true|false\n    allow_classic_link_to_remote_vpc = true|false\n    allow_vpc_to_remote_classic_link = true|false\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPC Peering Connection"
  },
  "srAwsVpcPeeringConnectionAccepter": {
    "prefix": "srAwsVpcPeeringConnectionAccepter",
    "body": "resource \"aws_vpc_peering_connection_accepter\" \"${1:name}\" {\n  vpc_peering_connection_id = \"\\$\\{aws_vpc_peering_connection.${2:foo}.id}\"\n}",
    "description": "Cross-account VPC Peering Connection Acceptance"
  },
  "frAwsVpcPeeringConnectionAccepter": {
    "prefix": "frAwsVpcPeeringConnectionAccepter",
    "body": "resource \"aws_vpc_peering_connection_accepter\" \"${1:name}\" {\n  vpc_peering_connection_id = \"\\$\\{aws_vpc_peering_connection.${2:foo}.id}\"\n  auto_accept               = true|false\n  accepter \\{\n    allow_remote_vpc_dns_resolution  = true|false\n    allow_classic_link_to_remote_vpc = true|false\n    allow_vpc_to_remote_classic_link = true|false\n  }\n  requester \\{\n    allow_remote_vpc_dns_resolution  = true|false\n    allow_classic_link_to_remote_vpc = true|false\n    allow_vpc_to_remote_classic_link = true|false\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "Cross-account VPC Peering Connection Acceptance"
  },
  "srAwsVpnConnection": {
    "prefix": "srAwsVpnConnection",
    "body": "resource \"aws_vpn_connection\" \"${1:name}\" {\n  vpn_gateway_id      = \"\\$\\{aws_vpn_gateway.${2:foo}.id}\"\n  customer_gateway_id = \"\\$\\{aws_customer_gateway.${3:bar}.id}\"\n  type                = \"ipsec.1\"\n}",
    "description": "VPN Connection"
  },
  "frAwsVpnConnection": {
    "prefix": "frAwsVpnConnection",
    "body": "resource \"aws_vpn_connection\" \"${1:name}\" {\n  vpn_gateway_id                 = \"\\$\\{aws_vpn_gateway.${2:foo}.id}\"\n  customer_gateway_id            = \"\\$\\{aws_customer_gateway.${3:bar}.id}\"\n  type                           = \"ipsec.1\"\n  static_routes_only             = true|false\n  customer_gateway_configuration = \"\"\n  routes \\{\n    destination_cidr_block = \"\"\n    source                 = \"\"\n    state                  = \"\"\n  }\n  vgw_telemetry \\{\n    accepted_route_count = 1\n    last_status_change   = \"\"\n    outside_ip_address   = \"\"\n    status               = \"\"\n    status_message       = \"\"\n  }\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPN Connection"
  },
  "srAwsVpnConnectionRoute": {
    "prefix": "srAwsVpnConnectionRoute",
    "body": "resource \"aws_vpn_connection_route\" \"${1:name}\" {\n  destination_cidr_block = \"192.168.10.0/24\"\n  vpn_connection_id      = \"\\$\\{aws_vpn_connection.${2:foo}.id}\"\n}",
    "description": "VPN Connection to Customer Gateway Static Route"
  },
  "frAwsVpnConnectionRoute": {
    "prefix": "frAwsVpnConnectionRoute",
    "body": "resource \"aws_vpn_connection_route\" \"${1:name}\" {\n  destination_cidr_block = \"192.168.10.0/24\"\n  vpn_connection_id      = \"\\$\\{aws_vpn_connection.${2:foo}.id}\"\n}",
    "description": "VPN Connection to Customer Gateway Static Route"
  },
  "srAwsVpnGateway": {
    "prefix": "srAwsVpnGateway",
    "body": "resource \"aws_vpn_gateway\" \"${1:name}\" {\n}",
    "description": "VPN VPC Gateway"
  },
  "frAwsVpnGateway": {
    "prefix": "frAwsVpnGateway",
    "body": "resource \"aws_vpn_gateway\" \"${1:name}\" {\n  availability_zone = \"\"\n  vpc_id            = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  tags \\{\n    TagName = \"\"\n  }\n}",
    "description": "VPN VPC Gateway"
  },
  "srAwsVpnGatewayAttachment": {
    "prefix": "srAwsVpnGatewayAttachment",
    "body": "resource \"aws_vpn_gateway_attachment\" \"${1:name}\" {\n  vpc_id         = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  vpn_gateway_id = \"\\$\\{aws_vpn_gateway.${3:bar}.id}\"\n}",
    "description": "VPN Gateway Attachment"
  },
  "frAwsVpnGatewayAttachment": {
    "prefix": "frAwsVpnGatewayAttachment",
    "body": "resource \"aws_vpn_gateway_attachment\" \"${1:name}\" {\n  vpc_id         = \"\\$\\{aws_vpc.${2:foo}.id}\"\n  vpn_gateway_id = \"\\$\\{aws_vpn_gateway.${3:bar}.id}\"\n}",
    "description": "VPN Gateway Attachment"
  },
  "srAwsWafByteMatchSet": {
    "prefix": "srAwsWafByteMatchSet",
    "body": "resource \"aws_waf_byte_match_set\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "WAF Byte Match Set"
  },
  "frAwsWafByteMatchSet": {
    "prefix": "frAwsWafByteMatchSet",
    "body": "resource \"aws_waf_byte_match_set\" \"${1:name}\" {\n  name              = \"${1}\"\n  byte_match_tuples \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    positional_constraint = \"\"\n    target_string         = \"\"\n    text_transformation   = \"\"\n  }\n}",
    "description": "WAF Byte Match Set"
  },
  "srAwsWafIPSet": {
    "prefix": "srAwsWafIPSet",
    "body": "resource \"aws_waf_ipset\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "WAF IPSet"
  },
  "frAwsWafIPSet": {
    "prefix": "frAwsWafIPSet",
    "body": "resource \"aws_waf_ipset\" \"${1:name}\" {\n  name = \"${1}\"\n  ip_set_descriptors \\{\n    type  = \"IPV4\"|\"\"IPV6\"\n    value = \"\"\n  }\n}",
    "description": "WAF IPSet"
  },
  "srAwsWafRule": {
    "prefix": "srAwsWafRule",
    "body": "resource \"aws_waf_rule\" \"${1:name}\" {\n  depends_on  = [\"aws_waf_ipset.foo\"]\n  name        = \"${1}\"\n  metric_name = \"${1}\"\n}",
    "description": "WAF Rule"
  },
  "frAwsWafRule": {
    "prefix": "frAwsWafRule",
    "body": "resource \"aws_waf_rule\" \"${1:name}\" {\n  depends_on  = [\"aws_waf_ipset.bar\"]\n  name        = \"${1}\"\n  metric_name = \"${1}\"\n  predicates \\{\n    negated = true|false\n    data_id = \"\\$\\{aws_waf_ipset.${2:foo}.id}\"\n    type    = \"\"\n  }\n}",
    "description": "WAF Rule"
  },
  "srAwsWafSizeConstraintSet": {
    "prefix": "srAwsWafSizeConstraintSet",
    "body": "resource \"aws_waf_size_constraint_set\" \"${1:name}\" {\n  name = \"${1}\"\n  size_constraints \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    comparison_operator = \"EQ\"|\"NE\"|\"LT\"|\"GT\"|\"...\"\n    size                = 1\n    text_transformation = \"\"\n  }\n}",
    "description": "WAF Size Constraint Set"
  },
  "frAwsWafSizeConstraintSet": {
    "prefix": "frAwsWafSizeConstraintSet",
    "body": "resource \"aws_waf_size_constraint_set\" \"${1:name}\" {\n  name = \"${1}\"\n  size_constraints \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    comparison_operator = \"EQ\"|\"NE\"|\"LT\"|\"GT\"|\"...\"\n    size                = 1\n    text_transformation = \"\"\n  }\n}",
    "description": "WAF Size Constraint Set"
  },
  "srAwsWafSqlInjectionMatchSet": {
    "prefix": "srAwsWafSqlInjectionMatchSet",
    "body": "resource \"aws_waf_sql_injection_match_set\" \"${1:name}\" {\n  name = \"${1}\"\n}",
    "description": "WAF SQL Injection Match Set"
  },
  "frAwsWafSqlInjectionMatchSet": {
    "prefix": "frAwsWafSqlInjectionMatchSet",
    "body": "resource \"aws_waf_sql_injection_match_set\" \"${1:name}\" {\n  name = \"${1}\"\n  sql_injection_match_tuples \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    text_transformation  = \"\"\n  }\n}",
    "description": "WAF SQL Injection Match Set"
  },
  "srAwsWafWebAcl": {
    "prefix": "srAwsWafWebAcl",
    "body": "resource \"aws_waf_web_acl\" \"${1:name}\" {\n  depends_on  = [\"aws_waf_ipset.foo\", \"aws_waf_rule.bar\"]\n  name = \"${1}\"\n  default_action \\{\n    type = \"\"\n  }\n  metric_name    = \"\"\n}",
    "description": "WAF Web ACL"
  },
  "frAwsWafWebAcl": {
    "prefix": "frAwsWafWebAcl",
    "body": "resource \"aws_waf_web_acl\" \"${1:name}\" {\n  depends_on  = [\"aws_waf_ipset.foo\", \"aws_waf_rule.bar\"]\n  name = \"${1}\"\n  default_action \\{\n    type = \"ALLOW\"\n  }\n  metric_name    = \"${1}\"\n  rules \\{\n    action \\{\n      type = \"BLOCK\"\n    }\n    priority = 1\n    rule_id  = \"\\$\\{aws_waf_rule.${2:foo}.id}\"\n  }\n}",
    "description": "WAF Web ACL"
  },
  "srAwsWafXssMatchSet": {
    "prefix": "srAwsWafXssMatchSet",
    "body": "resource \"aws_waf_xss_match_set\" \"${1:name}\" {\n  name = \"${1}\"\n  xss_match_tuples \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    text_transformation  = \"\"\n  }\n}",
    "description": "WAF XSS Match Set"
  },
  "frAwsWafXssMatchSet": {
    "prefix": "frAwsWafXssMatchSet",
    "body": "resource \"aws_waf_xss_match_set\" \"${1:name}\" {\n  name = \"${1}\"\n  xss_match_tuples \\{\n    field_to_match \\{\n      data = \"\"\n      type = \"\"\n    }\n    text_transformation  = \"\"\n  }\n}",
    "description": "WAF XSS Match Set"
  }
}
